// Generated from CSharpParser.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from './antlr4.web.js';
import { Parser } from './antlr4.web.js';
import CSharpParserListener from './CSharpParserListener.js';
import CSharpParserVisitor from './CSharpParserVisitor.js';

// import CSharpParserBase from './CSharpParserBase.js';

const serializedATN = [4,1,198,2649,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,1,0,3,0,440,
8,0,1,0,3,0,443,8,0,1,0,3,0,446,8,0,1,0,5,0,449,8,0,10,0,12,0,452,9,0,1,
0,3,0,455,8,0,1,0,1,0,1,1,1,1,3,1,461,8,1,1,1,3,1,464,8,1,1,1,1,1,1,1,3,
1,469,8,1,5,1,471,8,1,10,1,12,1,474,9,1,1,2,1,2,1,2,1,2,5,2,480,8,2,10,2,
12,2,483,9,2,1,3,1,3,1,3,1,3,1,3,3,3,490,8,3,1,4,1,4,1,4,1,4,4,4,496,8,4,
11,4,12,4,497,1,4,1,4,1,5,1,5,3,5,504,8,5,1,6,1,6,3,6,508,8,6,1,7,1,7,1,
7,3,7,513,8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,3,10,523,8,10,1,11,1,11,
1,11,1,11,5,11,529,8,11,10,11,12,11,532,9,11,1,11,1,11,1,12,1,12,1,12,5,
12,539,8,12,10,12,12,12,542,9,12,1,13,1,13,1,13,3,13,547,8,13,1,13,3,13,
550,8,13,1,13,1,13,1,13,3,13,555,8,13,1,13,3,13,558,8,13,1,14,1,14,1,14,
1,14,3,14,564,8,14,1,15,1,15,1,15,3,15,569,8,15,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,3,16,579,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
1,17,1,17,3,17,592,8,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,600,8,18,1,19,
1,19,1,19,1,19,3,19,606,8,19,3,19,608,8,19,1,20,1,20,1,20,5,20,613,8,20,
10,20,12,20,616,9,20,1,21,1,21,1,21,5,21,621,8,21,10,21,12,21,624,9,21,1,
22,1,22,1,22,5,22,629,8,22,10,22,12,22,632,9,22,1,23,1,23,1,23,5,23,637,
8,23,10,23,12,23,640,9,23,1,24,1,24,1,24,5,24,645,8,24,10,24,12,24,648,9,
24,1,25,1,25,1,25,5,25,653,8,25,10,25,12,25,656,9,25,1,26,1,26,1,26,1,26,
1,26,1,26,1,26,5,26,665,8,26,10,26,12,26,668,9,26,1,27,1,27,1,27,3,27,673,
8,27,1,27,5,27,676,8,27,10,27,12,27,679,9,27,1,28,1,28,1,28,5,28,684,8,28,
10,28,12,28,687,9,28,1,29,1,29,1,29,5,29,692,8,29,10,29,12,29,695,9,29,1,
30,1,30,1,30,1,30,1,30,3,30,702,8,30,3,30,704,8,30,1,30,3,30,707,8,30,1,
31,1,31,1,31,5,31,712,8,31,10,31,12,31,715,9,31,1,32,1,32,3,32,719,8,32,
1,32,1,32,1,32,1,33,1,33,3,33,726,8,33,1,33,1,33,3,33,730,8,33,3,33,732,
8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,756,8,34,1,35,1,35,1,35,
1,35,1,35,1,36,1,36,3,36,765,8,36,1,36,5,36,768,8,36,10,36,12,36,771,9,36,
1,36,3,36,774,8,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,782,8,36,1,36,3,36,
785,8,36,1,36,5,36,788,8,36,10,36,12,36,791,9,36,1,36,3,36,794,8,36,5,36,
796,8,36,10,36,12,36,799,9,36,1,37,1,37,1,37,3,37,804,8,37,1,37,1,37,1,37,
1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,818,8,37,1,37,1,37,1,37,
1,37,3,37,824,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,5,37,834,8,37,
10,37,12,37,837,9,37,1,37,3,37,840,8,37,1,37,4,37,843,8,37,11,37,12,37,844,
1,37,1,37,3,37,849,8,37,1,37,1,37,1,37,1,37,3,37,855,8,37,1,37,1,37,1,37,
1,37,4,37,861,8,37,11,37,12,37,862,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,
37,872,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
1,37,1,37,1,37,1,37,3,37,890,8,37,1,37,3,37,893,8,37,1,37,1,37,1,37,3,37,
898,8,37,1,37,3,37,901,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
1,37,1,37,5,37,914,8,37,10,37,12,37,917,9,37,1,37,1,37,1,37,3,37,922,8,37,
1,38,1,38,3,38,926,8,38,1,39,1,39,1,39,1,40,3,40,932,8,40,1,40,1,40,1,40,
3,40,937,8,40,1,41,3,41,940,8,41,1,41,1,41,1,41,1,41,5,41,946,8,41,10,41,
12,41,949,9,41,1,41,1,41,1,42,1,42,1,42,3,42,956,8,42,1,42,1,42,1,43,1,43,
1,44,1,44,1,44,5,44,965,8,44,10,44,12,44,968,9,44,1,45,1,45,3,45,972,8,45,
1,46,1,46,1,46,3,46,977,8,46,3,46,979,8,46,1,46,1,46,1,47,1,47,1,47,5,47,
986,8,47,10,47,12,47,989,9,47,1,48,1,48,1,48,1,48,1,48,3,48,996,8,48,1,48,
1,48,1,48,1,49,1,49,3,49,1003,8,49,1,50,1,50,1,50,1,50,5,50,1009,8,50,10,
50,12,50,1012,9,50,1,50,3,50,1015,8,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,
3,51,1024,8,51,1,52,1,52,1,52,3,52,1029,8,52,3,52,1031,8,52,1,52,1,52,1,
53,1,53,1,53,5,53,1038,8,53,10,53,12,53,1041,9,53,1,54,1,54,1,54,1,54,1,
54,3,54,1048,8,54,1,55,1,55,3,55,1052,8,55,1,55,1,55,1,55,3,55,1057,8,55,
3,55,1059,8,55,1,55,1,55,1,55,3,55,1064,8,55,5,55,1066,8,55,10,55,12,55,
1069,9,55,1,56,1,56,5,56,1073,8,56,10,56,12,56,1076,9,56,1,56,1,56,1,57,
1,57,1,57,5,57,1083,8,57,10,57,12,57,1086,9,57,1,57,3,57,1089,8,57,1,57,
3,57,1092,8,57,1,57,3,57,1095,8,57,1,58,1,58,1,58,1,58,5,58,1101,8,58,10,
58,12,58,1104,9,58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,3,60,1113,8,60,1,60,
1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,
61,1130,8,61,1,62,1,62,1,62,5,62,1135,8,62,10,62,12,62,1138,9,62,1,63,3,
63,1141,8,63,1,63,1,63,1,63,1,64,1,64,1,64,5,64,1149,8,64,10,64,12,64,1152,
9,64,1,65,1,65,3,65,1156,8,65,1,66,1,66,1,66,1,67,1,67,3,67,1163,8,67,1,
67,1,67,1,67,1,67,1,68,5,68,1170,8,68,10,68,12,68,1173,9,68,1,68,1,68,3,
68,1177,8,68,1,69,1,69,1,69,1,69,1,69,3,69,1184,8,69,1,70,1,70,1,70,1,70,
1,70,1,71,1,71,1,71,1,72,1,72,3,72,1196,8,72,1,72,1,72,1,72,1,72,1,72,1,
72,1,72,1,72,1,72,3,72,1207,8,72,1,73,1,73,1,73,1,73,5,73,1213,8,73,10,73,
12,73,1216,9,73,1,74,1,74,3,74,1220,8,74,1,75,1,75,1,75,1,75,1,75,1,75,1,
75,3,75,1229,8,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,3,77,1238,8,77,1,78,
1,78,1,78,1,78,1,78,1,78,1,78,3,78,1247,8,78,1,79,1,79,1,79,1,80,3,80,1253,
8,80,1,80,1,80,1,80,3,80,1258,8,80,1,80,1,80,3,80,1262,8,80,1,80,1,80,3,
80,1266,8,80,1,81,1,81,3,81,1270,8,81,1,81,1,81,3,81,1274,8,81,1,82,1,82,
1,82,1,82,1,82,3,82,1281,8,82,1,83,1,83,1,83,1,83,1,84,1,84,3,84,1289,8,
84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1302,8,85,
1,85,1,85,1,85,1,85,1,85,1,85,5,85,1310,8,85,10,85,12,85,1313,9,85,1,85,
1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
85,1,85,1,85,1,85,3,85,1334,8,85,1,85,1,85,3,85,1338,8,85,1,85,1,85,3,85,
1342,8,85,1,85,1,85,1,85,3,85,1347,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1367,8,85,
1,85,1,85,1,85,3,85,1372,8,85,1,85,1,85,1,85,3,85,1377,8,85,1,85,1,85,1,
85,1,85,1,85,3,85,1384,8,85,1,85,3,85,1387,8,85,1,85,1,85,1,85,1,85,1,85,
1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
85,3,85,1409,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,
1421,8,85,1,86,1,86,3,86,1425,8,86,1,86,1,86,1,87,1,87,1,87,1,87,3,87,1433,
8,87,1,87,1,87,1,87,1,87,1,87,1,87,5,87,1441,8,87,10,87,12,87,1444,9,87,
1,87,1,87,1,87,1,87,3,87,1450,8,87,1,88,1,88,3,88,1454,8,88,1,89,1,89,1,
89,3,89,1459,8,89,1,89,3,89,1462,8,89,1,90,1,90,1,90,3,90,1467,8,90,1,91,
1,91,1,91,1,91,1,92,1,92,3,92,1475,8,92,1,93,4,93,1478,8,93,11,93,12,93,
1479,1,93,1,93,1,94,1,94,1,94,3,94,1487,8,94,1,94,1,94,1,94,1,94,3,94,1493,
8,94,1,95,1,95,1,95,1,96,4,96,1499,8,96,11,96,12,96,1500,1,97,1,97,1,97,
1,97,5,97,1507,8,97,10,97,12,97,1510,9,97,3,97,1512,8,97,1,98,1,98,1,98,
5,98,1517,8,98,10,98,12,98,1520,9,98,1,99,1,99,5,99,1524,8,99,10,99,12,99,
1527,9,99,1,99,3,99,1530,8,99,1,99,3,99,1533,8,99,1,100,1,100,1,100,1,100,
3,100,1539,8,100,1,100,1,100,3,100,1543,8,100,1,100,1,100,1,101,1,101,3,
101,1549,8,101,1,101,1,101,1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,
1,104,1,104,3,104,1563,8,104,1,105,1,105,1,105,1,105,3,105,1569,8,105,1,
106,1,106,1,106,5,106,1574,8,106,10,106,12,106,1577,9,106,1,107,1,107,3,
107,1581,8,107,1,107,3,107,1584,8,107,1,107,3,107,1587,8,107,1,107,1,107,
1,108,4,108,1592,8,108,11,108,12,108,1593,1,109,1,109,1,109,1,109,1,109,
1,110,4,110,1602,8,110,11,110,12,110,1603,1,111,1,111,1,111,1,111,1,111,
1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,1621,8,
111,1,112,4,112,1624,8,112,11,112,12,112,1625,1,113,1,113,3,113,1630,8,113,
1,114,3,114,1633,8,114,1,114,3,114,1636,8,114,1,114,1,114,1,114,1,114,1,
114,3,114,1643,8,114,1,115,1,115,1,115,1,115,3,115,1649,8,115,1,116,1,116,
1,116,1,116,5,116,1655,8,116,10,116,12,116,1658,9,116,1,116,1,116,1,117,
3,117,1663,8,117,1,117,1,117,1,118,1,118,1,118,1,118,5,118,1671,8,118,10,
118,12,118,1674,9,118,1,119,1,119,1,119,5,119,1679,8,119,10,119,12,119,1682,
9,119,1,120,4,120,1685,8,120,11,120,12,120,1686,1,121,1,121,1,121,1,121,
1,121,1,122,1,122,1,122,1,122,3,122,1698,8,122,1,122,1,122,3,122,1702,8,
122,3,122,1704,8,122,1,123,1,123,1,123,3,123,1709,8,123,1,123,1,123,3,123,
1713,8,123,1,124,1,124,1,124,5,124,1718,8,124,10,124,12,124,1721,9,124,1,
125,1,125,1,125,1,125,1,126,1,126,3,126,1729,8,126,1,126,1,126,1,127,4,127,
1734,8,127,11,127,12,127,1735,1,128,3,128,1739,8,128,1,128,3,128,1742,8,
128,1,128,1,128,3,128,1746,8,128,1,129,4,129,1749,8,129,11,129,12,129,1750,
1,130,1,130,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,
1764,8,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,1774,8,
131,1,132,1,132,1,132,1,132,1,132,3,132,1781,8,132,1,132,1,132,1,132,1,132,
1,132,1,132,1,132,1,132,1,132,1,132,3,132,1793,8,132,1,133,1,133,1,133,5,
133,1798,8,133,10,133,12,133,1801,9,133,1,134,1,134,1,134,1,134,1,135,1,
135,1,135,5,135,1810,8,135,10,135,12,135,1813,9,135,1,136,1,136,1,136,3,
136,1818,8,136,1,137,1,137,3,137,1822,8,137,1,138,1,138,3,138,1826,8,138,
1,139,1,139,1,140,1,140,3,140,1832,8,140,1,141,1,141,1,141,1,141,3,141,1838,
8,141,3,141,1840,8,141,1,142,1,142,1,142,5,142,1845,8,142,10,142,12,142,
1848,9,142,1,143,3,143,1851,8,143,1,143,3,143,1854,8,143,1,143,1,143,3,143,
1858,8,143,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,1868,8,
144,1,145,3,145,1871,8,145,1,145,1,145,1,145,1,145,1,146,3,146,1878,8,146,
1,146,3,146,1881,8,146,1,146,1,146,1,146,3,146,1886,8,146,1,146,1,146,1,
146,3,146,1891,8,146,3,146,1893,8,146,1,147,3,147,1896,8,147,1,147,3,147,
1899,8,147,1,147,1,147,1,147,1,148,3,148,1905,8,148,1,148,3,148,1908,8,148,
1,148,1,148,1,148,1,149,1,149,1,149,1,149,1,149,1,149,1,149,3,149,1920,8,
149,1,150,1,150,3,150,1924,8,150,1,151,3,151,1927,8,151,1,151,1,151,1,151,
1,151,1,151,1,151,1,151,1,151,3,151,1937,8,151,1,152,3,152,1940,8,152,1,
152,1,152,1,152,1,153,3,153,1946,8,153,1,153,1,153,1,153,1,154,1,154,1,154,
1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
1,154,1,154,1,154,1,154,1,154,1,154,1,154,3,154,1973,8,154,1,155,1,155,1,
155,1,155,1,155,1,155,1,155,1,156,1,156,1,156,1,156,3,156,1986,8,156,1,156,
1,156,1,157,1,157,3,157,1992,8,157,1,158,1,158,1,158,1,159,1,159,5,159,1999,
8,159,10,159,12,159,2002,9,159,1,159,1,159,1,160,3,160,2007,8,160,1,160,
3,160,2010,8,160,1,160,1,160,1,160,1,160,4,160,2016,8,160,11,160,12,160,
2017,1,160,1,160,3,160,2022,8,160,1,161,1,161,5,161,2026,8,161,10,161,12,
161,2029,9,161,1,161,4,161,2032,8,161,11,161,12,161,2033,1,162,1,162,5,162,
2038,8,162,10,162,12,162,2041,9,162,1,162,1,162,1,163,1,163,1,163,1,163,
5,163,2049,8,163,10,163,12,163,2052,9,163,1,163,3,163,2055,8,163,3,163,2057,
8,163,1,163,1,163,1,164,1,164,1,164,1,164,5,164,2065,8,164,10,164,12,164,
2068,9,164,1,164,1,164,1,165,3,165,2073,8,165,1,165,3,165,2076,8,165,1,165,
1,165,1,166,1,166,1,167,1,167,1,167,1,168,1,168,5,168,2087,8,168,10,168,
12,168,2090,9,168,1,168,1,168,1,169,3,169,2095,8,169,1,169,3,169,2098,8,
169,1,169,3,169,2101,8,169,1,169,1,169,1,169,1,169,1,169,3,169,2108,8,169,
1,169,1,169,1,169,3,169,2113,8,169,1,169,1,169,3,169,2117,8,169,1,169,1,
169,3,169,2121,8,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
1,169,1,169,1,169,1,169,1,169,1,169,3,169,2138,8,169,1,169,3,169,2141,8,
169,1,169,1,169,1,169,3,169,2146,8,169,1,169,1,169,3,169,2150,8,169,1,169,
1,169,3,169,2154,8,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,3,169,2163,
8,169,1,170,3,170,2166,8,170,1,170,1,170,1,170,3,170,2171,8,170,1,170,1,
170,3,170,2175,8,170,1,170,1,170,1,170,3,170,2180,8,170,1,170,1,170,3,170,
2184,8,170,3,170,2186,8,170,1,171,1,171,1,171,1,172,1,172,1,172,1,172,5,
172,2195,8,172,10,172,12,172,2198,9,172,1,172,3,172,2201,8,172,3,172,2203,
8,172,1,172,1,172,1,173,3,173,2208,8,173,1,173,1,173,1,173,3,173,2213,8,
173,1,174,1,174,1,174,1,174,1,174,3,174,2220,8,174,1,174,1,174,1,175,1,175,
3,175,2226,8,175,1,176,4,176,2229,8,176,11,176,12,176,2230,1,177,1,177,1,
177,1,177,3,177,2237,8,177,1,177,1,177,3,177,2241,8,177,1,177,1,177,1,178,
1,178,3,178,2247,8,178,1,179,1,179,1,179,5,179,2252,8,179,10,179,12,179,
2255,9,179,1,180,1,180,1,180,1,180,1,180,5,180,2262,8,180,10,180,12,180,
2265,9,180,3,180,2267,8,180,1,180,3,180,2270,8,180,1,181,1,181,1,181,3,181,
2275,8,181,1,181,1,181,1,182,1,182,3,182,2281,8,182,1,182,1,182,5,182,2285,
8,182,10,182,12,182,2288,9,182,1,182,1,182,1,182,1,182,3,182,2294,8,182,
1,183,1,183,1,183,5,183,2299,8,183,10,183,12,183,2302,9,183,1,184,1,184,
1,184,1,184,1,185,3,185,2309,8,185,1,185,1,185,3,185,2313,8,185,1,186,1,
186,1,186,1,186,1,186,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,
187,2328,8,187,1,187,1,187,3,187,2332,8,187,1,187,1,187,1,187,1,187,1,187,
5,187,2339,8,187,10,187,12,187,2342,9,187,1,187,3,187,2345,8,187,1,187,1,
187,3,187,2349,8,187,1,188,1,188,1,188,1,188,1,189,1,189,1,189,1,189,1,190,
1,190,1,190,1,190,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,3,191,
2371,8,191,1,192,1,192,1,193,1,193,1,193,1,193,3,193,2379,8,193,1,194,1,
194,5,194,2383,8,194,10,194,12,194,2386,9,194,1,194,1,194,1,195,1,195,5,
195,2392,8,195,10,195,12,195,2395,9,195,1,195,1,195,1,196,1,196,1,196,1,
196,3,196,2403,8,196,1,197,1,197,1,197,1,197,3,197,2409,8,197,1,198,1,198,
1,198,5,198,2414,8,198,10,198,12,198,2417,9,198,1,198,1,198,4,198,2421,8,
198,11,198,12,198,2422,3,198,2425,8,198,1,199,1,199,1,200,1,200,1,200,3,
200,2432,8,200,1,200,3,200,2435,8,200,1,200,3,200,2438,8,200,1,200,1,200,
3,200,2442,8,200,1,201,3,201,2445,8,201,1,201,1,201,1,201,3,201,2450,8,201,
1,201,3,201,2453,8,201,1,201,3,201,2456,8,201,1,201,1,201,3,201,2460,8,201,
1,202,1,202,1,202,3,202,2465,8,202,1,202,3,202,2468,8,202,1,202,3,202,2471,
8,202,1,202,1,202,3,202,2475,8,202,1,203,1,203,1,203,3,203,2480,8,203,1,
203,1,203,3,203,2484,8,203,1,204,1,204,1,204,1,204,3,204,2490,8,204,1,204,
1,204,3,204,2494,8,204,1,204,1,204,3,204,2498,8,204,1,204,1,204,1,205,1,
205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,3,205,2512,8,205,1,206,
1,206,1,206,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,3,207,2525,8,
207,1,207,1,207,1,207,1,207,3,207,2531,8,207,1,208,1,208,1,208,1,208,1,208,
1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
3,209,2550,8,209,1,210,1,210,1,210,1,210,1,210,1,210,1,211,1,211,1,211,3,
211,2561,8,211,1,211,1,211,3,211,2565,8,211,1,211,1,211,1,212,1,212,3,212,
2571,8,212,1,212,1,212,3,212,2575,8,212,1,212,1,212,3,212,2579,8,212,1,212,
1,212,1,212,1,212,1,212,3,212,2586,8,212,1,213,1,213,1,213,1,213,1,213,3,
213,2593,8,213,1,213,3,213,2596,8,213,1,213,1,213,5,213,2600,8,213,10,213,
12,213,2603,9,213,1,214,1,214,1,214,1,214,3,214,2609,8,214,1,214,1,214,1,
214,3,214,2614,8,214,1,214,3,214,2617,8,214,1,214,1,214,1,214,1,214,1,214,
1,214,3,214,2625,8,214,1,215,1,215,1,215,1,215,3,215,2631,8,215,1,216,1,
216,3,216,2635,8,216,1,216,1,216,1,217,1,217,3,217,2641,8,217,1,217,1,217,
3,217,2645,8,217,1,218,1,218,1,218,0,0,219,0,2,4,6,8,10,12,14,16,18,20,22,
24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,
296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,
332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,
368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,
404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,0,19,
8,0,21,21,24,24,55,55,63,63,83,83,87,87,99,100,104,104,2,0,34,34,45,45,3,
0,54,54,72,72,80,80,1,0,156,157,2,0,146,147,158,159,1,0,135,136,1,0,137,
139,14,0,18,18,21,21,24,24,29,29,34,34,45,45,55,55,63,63,68,68,83,83,87,
87,91,91,99,100,104,104,2,0,14,14,32,32,2,0,15,15,103,103,12,0,9,9,15,15,
41,41,57,57,66,66,73,73,75,79,84,84,90,90,103,103,107,107,109,109,2,0,40,
40,53,53,2,0,17,17,94,94,2,0,137,137,148,148,2,0,54,54,72,72,2,0,42,42,96,
96,19,0,9,9,13,13,17,19,21,31,33,34,36,37,39,47,50,50,52,57,59,59,62,63,
65,68,70,70,72,74,76,80,82,84,87,105,107,109,112,112,1,0,79,80,20,0,10,12,
14,16,20,20,32,32,35,35,38,38,48,49,51,51,58,58,60,61,64,64,69,69,71,71,
75,75,81,81,85,86,102,102,106,106,110,111,113,114,2918,0,439,1,0,0,0,2,463,
1,0,0,0,4,475,1,0,0,0,6,489,1,0,0,0,8,491,1,0,0,0,10,501,1,0,0,0,12,507,
1,0,0,0,14,512,1,0,0,0,16,514,1,0,0,0,18,516,1,0,0,0,20,522,1,0,0,0,22,524,
1,0,0,0,24,535,1,0,0,0,26,546,1,0,0,0,28,563,1,0,0,0,30,568,1,0,0,0,32,578,
1,0,0,0,34,591,1,0,0,0,36,593,1,0,0,0,38,601,1,0,0,0,40,609,1,0,0,0,42,617,
1,0,0,0,44,625,1,0,0,0,46,633,1,0,0,0,48,641,1,0,0,0,50,649,1,0,0,0,52,657,
1,0,0,0,54,669,1,0,0,0,56,680,1,0,0,0,58,688,1,0,0,0,60,696,1,0,0,0,62,708,
1,0,0,0,64,716,1,0,0,0,66,731,1,0,0,0,68,755,1,0,0,0,70,757,1,0,0,0,72,762,
1,0,0,0,74,921,1,0,0,0,76,925,1,0,0,0,78,927,1,0,0,0,80,931,1,0,0,0,82,939,
1,0,0,0,84,955,1,0,0,0,86,959,1,0,0,0,88,961,1,0,0,0,90,971,1,0,0,0,92,973,
1,0,0,0,94,982,1,0,0,0,96,995,1,0,0,0,98,1002,1,0,0,0,100,1004,1,0,0,0,102,
1023,1,0,0,0,104,1025,1,0,0,0,106,1034,1,0,0,0,108,1047,1,0,0,0,110,1049,
1,0,0,0,112,1070,1,0,0,0,114,1079,1,0,0,0,116,1096,1,0,0,0,118,1107,1,0,
0,0,120,1112,1,0,0,0,122,1129,1,0,0,0,124,1131,1,0,0,0,126,1140,1,0,0,0,
128,1145,1,0,0,0,130,1155,1,0,0,0,132,1157,1,0,0,0,134,1160,1,0,0,0,136,
1171,1,0,0,0,138,1183,1,0,0,0,140,1185,1,0,0,0,142,1190,1,0,0,0,144,1193,
1,0,0,0,146,1208,1,0,0,0,148,1217,1,0,0,0,150,1228,1,0,0,0,152,1230,1,0,
0,0,154,1237,1,0,0,0,156,1246,1,0,0,0,158,1248,1,0,0,0,160,1252,1,0,0,0,
162,1273,1,0,0,0,164,1280,1,0,0,0,166,1282,1,0,0,0,168,1288,1,0,0,0,170,
1420,1,0,0,0,172,1422,1,0,0,0,174,1449,1,0,0,0,176,1453,1,0,0,0,178,1455,
1,0,0,0,180,1466,1,0,0,0,182,1468,1,0,0,0,184,1474,1,0,0,0,186,1477,1,0,
0,0,188,1492,1,0,0,0,190,1494,1,0,0,0,192,1498,1,0,0,0,194,1511,1,0,0,0,
196,1513,1,0,0,0,198,1532,1,0,0,0,200,1534,1,0,0,0,202,1546,1,0,0,0,204,
1552,1,0,0,0,206,1557,1,0,0,0,208,1562,1,0,0,0,210,1564,1,0,0,0,212,1570,
1,0,0,0,214,1578,1,0,0,0,216,1591,1,0,0,0,218,1595,1,0,0,0,220,1601,1,0,
0,0,222,1620,1,0,0,0,224,1623,1,0,0,0,226,1629,1,0,0,0,228,1632,1,0,0,0,
230,1644,1,0,0,0,232,1650,1,0,0,0,234,1662,1,0,0,0,236,1666,1,0,0,0,238,
1675,1,0,0,0,240,1684,1,0,0,0,242,1688,1,0,0,0,244,1703,1,0,0,0,246,1712,
1,0,0,0,248,1714,1,0,0,0,250,1722,1,0,0,0,252,1726,1,0,0,0,254,1733,1,0,
0,0,256,1738,1,0,0,0,258,1748,1,0,0,0,260,1752,1,0,0,0,262,1773,1,0,0,0,
264,1780,1,0,0,0,266,1794,1,0,0,0,268,1802,1,0,0,0,270,1806,1,0,0,0,272,
1814,1,0,0,0,274,1821,1,0,0,0,276,1825,1,0,0,0,278,1827,1,0,0,0,280,1831,
1,0,0,0,282,1839,1,0,0,0,284,1841,1,0,0,0,286,1857,1,0,0,0,288,1867,1,0,
0,0,290,1870,1,0,0,0,292,1877,1,0,0,0,294,1895,1,0,0,0,296,1904,1,0,0,0,
298,1919,1,0,0,0,300,1923,1,0,0,0,302,1926,1,0,0,0,304,1939,1,0,0,0,306,
1945,1,0,0,0,308,1972,1,0,0,0,310,1974,1,0,0,0,312,1981,1,0,0,0,314,1991,
1,0,0,0,316,1993,1,0,0,0,318,1996,1,0,0,0,320,2006,1,0,0,0,322,2023,1,0,
0,0,324,2035,1,0,0,0,326,2044,1,0,0,0,328,2060,1,0,0,0,330,2072,1,0,0,0,
332,2079,1,0,0,0,334,2081,1,0,0,0,336,2084,1,0,0,0,338,2094,1,0,0,0,340,
2165,1,0,0,0,342,2187,1,0,0,0,344,2190,1,0,0,0,346,2207,1,0,0,0,348,2214,
1,0,0,0,350,2225,1,0,0,0,352,2228,1,0,0,0,354,2232,1,0,0,0,356,2246,1,0,
0,0,358,2248,1,0,0,0,360,2256,1,0,0,0,362,2274,1,0,0,0,364,2293,1,0,0,0,
366,2295,1,0,0,0,368,2303,1,0,0,0,370,2312,1,0,0,0,372,2314,1,0,0,0,374,
2348,1,0,0,0,376,2350,1,0,0,0,378,2354,1,0,0,0,380,2358,1,0,0,0,382,2370,
1,0,0,0,384,2372,1,0,0,0,386,2378,1,0,0,0,388,2380,1,0,0,0,390,2389,1,0,
0,0,392,2402,1,0,0,0,394,2408,1,0,0,0,396,2410,1,0,0,0,398,2426,1,0,0,0,
400,2428,1,0,0,0,402,2444,1,0,0,0,404,2461,1,0,0,0,406,2476,1,0,0,0,408,
2485,1,0,0,0,410,2501,1,0,0,0,412,2513,1,0,0,0,414,2516,1,0,0,0,416,2532,
1,0,0,0,418,2537,1,0,0,0,420,2551,1,0,0,0,422,2557,1,0,0,0,424,2568,1,0,
0,0,426,2592,1,0,0,0,428,2604,1,0,0,0,430,2626,1,0,0,0,432,2632,1,0,0,0,
434,2638,1,0,0,0,436,2646,1,0,0,0,438,440,5,1,0,0,439,438,1,0,0,0,439,440,
1,0,0,0,440,442,1,0,0,0,441,443,3,216,108,0,442,441,1,0,0,0,442,443,1,0,
0,0,443,445,1,0,0,0,444,446,3,220,110,0,445,444,1,0,0,0,445,446,1,0,0,0,
446,450,1,0,0,0,447,449,3,348,174,0,448,447,1,0,0,0,449,452,1,0,0,0,450,
448,1,0,0,0,450,451,1,0,0,0,451,454,1,0,0,0,452,450,1,0,0,0,453,455,3,224,
112,0,454,453,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,457,5,0,0,1,457,
1,1,0,0,0,458,460,3,436,218,0,459,461,3,22,11,0,460,459,1,0,0,0,460,461,
1,0,0,0,461,464,1,0,0,0,462,464,3,230,115,0,463,458,1,0,0,0,463,462,1,0,
0,0,464,472,1,0,0,0,465,466,5,131,0,0,466,468,3,436,218,0,467,469,3,22,11,
0,468,467,1,0,0,0,468,469,1,0,0,0,469,471,1,0,0,0,470,465,1,0,0,0,471,474,
1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,3,1,0,0,0,474,472,1,0,0,0,475,
481,3,6,3,0,476,480,5,148,0,0,477,480,3,324,162,0,478,480,5,137,0,0,479,
476,1,0,0,0,479,477,1,0,0,0,479,478,1,0,0,0,480,483,1,0,0,0,481,479,1,0,
0,0,481,482,1,0,0,0,482,5,1,0,0,0,483,481,1,0,0,0,484,490,3,12,6,0,485,490,
3,20,10,0,486,487,5,108,0,0,487,490,5,137,0,0,488,490,3,8,4,0,489,484,1,
0,0,0,489,485,1,0,0,0,489,486,1,0,0,0,489,488,1,0,0,0,490,7,1,0,0,0,491,
492,5,129,0,0,492,495,3,10,5,0,493,494,5,132,0,0,494,496,3,10,5,0,495,493,
1,0,0,0,496,497,1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,499,1,0,0,0,
499,500,5,130,0,0,500,9,1,0,0,0,501,503,3,4,2,0,502,504,3,436,218,0,503,
502,1,0,0,0,503,504,1,0,0,0,504,11,1,0,0,0,505,508,3,14,7,0,506,508,5,18,
0,0,507,505,1,0,0,0,507,506,1,0,0,0,508,13,1,0,0,0,509,513,3,16,8,0,510,
513,3,18,9,0,511,513,5,29,0,0,512,509,1,0,0,0,512,510,1,0,0,0,512,511,1,
0,0,0,513,15,1,0,0,0,514,515,7,0,0,0,515,17,1,0,0,0,516,517,7,1,0,0,517,
19,1,0,0,0,518,523,3,2,1,0,519,523,5,68,0,0,520,523,5,35,0,0,521,523,5,91,
0,0,522,518,1,0,0,0,522,519,1,0,0,0,522,520,1,0,0,0,522,521,1,0,0,0,523,
21,1,0,0,0,524,525,5,146,0,0,525,530,3,4,2,0,526,527,5,132,0,0,527,529,3,
4,2,0,528,526,1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,
533,1,0,0,0,532,530,1,0,0,0,533,534,5,147,0,0,534,23,1,0,0,0,535,540,3,26,
13,0,536,537,5,132,0,0,537,539,3,26,13,0,538,536,1,0,0,0,539,542,1,0,0,0,
540,538,1,0,0,0,540,541,1,0,0,0,541,25,1,0,0,0,542,540,1,0,0,0,543,544,3,
436,218,0,544,545,5,133,0,0,545,547,1,0,0,0,546,543,1,0,0,0,546,547,1,0,
0,0,547,549,1,0,0,0,548,550,7,2,0,0,549,548,1,0,0,0,549,550,1,0,0,0,550,
557,1,0,0,0,551,558,3,28,14,0,552,555,5,106,0,0,553,555,3,4,2,0,554,552,
1,0,0,0,554,553,1,0,0,0,555,556,1,0,0,0,556,558,3,28,14,0,557,551,1,0,0,
0,557,554,1,0,0,0,558,27,1,0,0,0,559,564,3,32,16,0,560,564,3,30,15,0,561,
562,5,80,0,0,562,564,3,30,15,0,563,559,1,0,0,0,563,560,1,0,0,0,563,561,1,
0,0,0,564,29,1,0,0,0,565,569,3,120,60,0,566,569,3,132,66,0,567,569,3,36,
18,0,568,565,1,0,0,0,568,566,1,0,0,0,568,567,1,0,0,0,569,31,1,0,0,0,570,
571,3,68,34,0,571,572,3,34,17,0,572,573,3,28,14,0,573,579,1,0,0,0,574,575,
3,68,34,0,575,576,5,170,0,0,576,577,3,76,38,0,577,579,1,0,0,0,578,570,1,
0,0,0,578,574,1,0,0,0,579,33,1,0,0,0,580,592,5,145,0,0,581,592,5,160,0,0,
582,592,5,161,0,0,583,592,5,162,0,0,584,592,5,163,0,0,585,592,5,164,0,0,
586,592,5,165,0,0,587,592,5,166,0,0,588,592,5,167,0,0,589,592,5,169,0,0,
590,592,3,380,190,0,591,580,1,0,0,0,591,581,1,0,0,0,591,582,1,0,0,0,591,
583,1,0,0,0,591,584,1,0,0,0,591,585,1,0,0,0,591,586,1,0,0,0,591,587,1,0,
0,0,591,588,1,0,0,0,591,589,1,0,0,0,591,590,1,0,0,0,592,35,1,0,0,0,593,599,
3,38,19,0,594,595,5,148,0,0,595,596,3,76,38,0,596,597,5,133,0,0,597,598,
3,76,38,0,598,600,1,0,0,0,599,594,1,0,0,0,599,600,1,0,0,0,600,37,1,0,0,0,
601,607,3,40,20,0,602,605,5,150,0,0,603,606,3,38,19,0,604,606,3,78,39,0,
605,603,1,0,0,0,605,604,1,0,0,0,606,608,1,0,0,0,607,602,1,0,0,0,607,608,
1,0,0,0,608,39,1,0,0,0,609,614,3,42,21,0,610,611,5,154,0,0,611,613,3,42,
21,0,612,610,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,614,615,1,0,0,0,615,
41,1,0,0,0,616,614,1,0,0,0,617,622,3,44,22,0,618,619,5,153,0,0,619,621,3,
44,22,0,620,618,1,0,0,0,621,624,1,0,0,0,622,620,1,0,0,0,622,623,1,0,0,0,
623,43,1,0,0,0,624,622,1,0,0,0,625,630,3,46,23,0,626,627,5,141,0,0,627,629,
3,46,23,0,628,626,1,0,0,0,629,632,1,0,0,0,630,628,1,0,0,0,630,631,1,0,0,
0,631,45,1,0,0,0,632,630,1,0,0,0,633,638,3,48,24,0,634,635,5,142,0,0,635,
637,3,48,24,0,636,634,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,1,
0,0,0,639,47,1,0,0,0,640,638,1,0,0,0,641,646,3,50,25,0,642,643,5,140,0,0,
643,645,3,50,25,0,644,642,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,
1,0,0,0,647,49,1,0,0,0,648,646,1,0,0,0,649,654,3,52,26,0,650,651,7,3,0,0,
651,653,3,52,26,0,652,650,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,654,655,
1,0,0,0,655,51,1,0,0,0,656,654,1,0,0,0,657,666,3,54,27,0,658,659,7,4,0,0,
659,665,3,54,27,0,660,661,5,59,0,0,661,665,3,114,57,0,662,663,5,13,0,0,663,
665,3,4,2,0,664,658,1,0,0,0,664,660,1,0,0,0,664,662,1,0,0,0,665,668,1,0,
0,0,666,664,1,0,0,0,666,667,1,0,0,0,667,53,1,0,0,0,668,666,1,0,0,0,669,677,
3,56,28,0,670,673,5,168,0,0,671,673,3,378,189,0,672,670,1,0,0,0,672,671,
1,0,0,0,673,674,1,0,0,0,674,676,3,56,28,0,675,672,1,0,0,0,676,679,1,0,0,
0,677,675,1,0,0,0,677,678,1,0,0,0,678,55,1,0,0,0,679,677,1,0,0,0,680,685,
3,58,29,0,681,682,7,5,0,0,682,684,3,58,29,0,683,681,1,0,0,0,684,687,1,0,
0,0,685,683,1,0,0,0,685,686,1,0,0,0,686,57,1,0,0,0,687,685,1,0,0,0,688,693,
3,60,30,0,689,690,7,6,0,0,690,692,3,60,30,0,691,689,1,0,0,0,692,695,1,0,
0,0,693,691,1,0,0,0,693,694,1,0,0,0,694,59,1,0,0,0,695,693,1,0,0,0,696,706,
3,66,33,0,697,698,5,93,0,0,698,703,5,125,0,0,699,701,3,62,31,0,700,702,5,
132,0,0,701,700,1,0,0,0,701,702,1,0,0,0,702,704,1,0,0,0,703,699,1,0,0,0,
703,704,1,0,0,0,704,705,1,0,0,0,705,707,5,126,0,0,706,697,1,0,0,0,706,707,
1,0,0,0,707,61,1,0,0,0,708,713,3,64,32,0,709,710,5,132,0,0,710,712,3,64,
32,0,711,709,1,0,0,0,712,715,1,0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,
63,1,0,0,0,715,713,1,0,0,0,716,718,3,28,14,0,717,719,3,190,95,0,718,717,
1,0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,720,721,3,376,188,0,721,722,3,76,
38,0,722,65,1,0,0,0,723,732,3,68,34,0,724,726,3,68,34,0,725,724,1,0,0,0,
725,726,1,0,0,0,726,727,1,0,0,0,727,729,5,171,0,0,728,730,3,68,34,0,729,
728,1,0,0,0,729,730,1,0,0,0,730,732,1,0,0,0,731,723,1,0,0,0,731,725,1,0,
0,0,732,67,1,0,0,0,733,756,3,70,35,0,734,756,3,72,36,0,735,736,5,135,0,0,
736,756,3,68,34,0,737,738,5,136,0,0,738,756,3,68,34,0,739,740,5,143,0,0,
740,756,3,68,34,0,741,742,5,144,0,0,742,756,3,68,34,0,743,744,5,151,0,0,
744,756,3,68,34,0,745,746,5,152,0,0,746,756,3,68,34,0,747,748,5,16,0,0,748,
756,3,68,34,0,749,750,5,140,0,0,750,756,3,68,34,0,751,752,5,137,0,0,752,
756,3,68,34,0,753,754,5,142,0,0,754,756,3,68,34,0,755,733,1,0,0,0,755,734,
1,0,0,0,755,735,1,0,0,0,755,737,1,0,0,0,755,739,1,0,0,0,755,741,1,0,0,0,
755,743,1,0,0,0,755,745,1,0,0,0,755,747,1,0,0,0,755,749,1,0,0,0,755,751,
1,0,0,0,755,753,1,0,0,0,756,69,1,0,0,0,757,758,5,129,0,0,758,759,3,4,2,0,
759,760,5,130,0,0,760,761,3,68,34,0,761,71,1,0,0,0,762,764,3,74,37,0,763,
765,5,143,0,0,764,763,1,0,0,0,764,765,1,0,0,0,765,769,1,0,0,0,766,768,3,
82,41,0,767,766,1,0,0,0,768,771,1,0,0,0,769,767,1,0,0,0,769,770,1,0,0,0,
770,773,1,0,0,0,771,769,1,0,0,0,772,774,5,143,0,0,773,772,1,0,0,0,773,774,
1,0,0,0,774,797,1,0,0,0,775,782,3,80,40,0,776,782,3,432,216,0,777,782,5,
151,0,0,778,782,5,152,0,0,779,780,5,155,0,0,780,782,3,436,218,0,781,775,
1,0,0,0,781,776,1,0,0,0,781,777,1,0,0,0,781,778,1,0,0,0,781,779,1,0,0,0,
782,784,1,0,0,0,783,785,5,143,0,0,784,783,1,0,0,0,784,785,1,0,0,0,785,789,
1,0,0,0,786,788,3,82,41,0,787,786,1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,
0,789,790,1,0,0,0,790,793,1,0,0,0,791,789,1,0,0,0,792,794,5,143,0,0,793,
792,1,0,0,0,793,794,1,0,0,0,794,796,1,0,0,0,795,781,1,0,0,0,796,799,1,0,
0,0,797,795,1,0,0,0,797,798,1,0,0,0,798,73,1,0,0,0,799,797,1,0,0,0,800,922,
3,382,191,0,801,803,3,436,218,0,802,804,3,22,11,0,803,802,1,0,0,0,803,804,
1,0,0,0,804,922,1,0,0,0,805,806,5,129,0,0,806,807,3,28,14,0,807,808,5,130,
0,0,808,922,1,0,0,0,809,922,3,86,43,0,810,922,3,230,115,0,811,922,5,115,
0,0,812,922,5,94,0,0,813,823,5,17,0,0,814,815,5,131,0,0,815,817,3,436,218,
0,816,818,3,22,11,0,817,816,1,0,0,0,817,818,1,0,0,0,818,824,1,0,0,0,819,
820,5,127,0,0,820,821,3,88,44,0,821,822,5,128,0,0,822,824,1,0,0,0,823,814,
1,0,0,0,823,819,1,0,0,0,824,922,1,0,0,0,825,854,5,66,0,0,826,848,3,4,2,0,
827,849,3,434,217,0,828,849,3,90,45,0,829,830,5,127,0,0,830,831,3,88,44,
0,831,835,5,128,0,0,832,834,3,324,162,0,833,832,1,0,0,0,834,837,1,0,0,0,
835,833,1,0,0,0,835,836,1,0,0,0,836,839,1,0,0,0,837,835,1,0,0,0,838,840,
3,326,163,0,839,838,1,0,0,0,839,840,1,0,0,0,840,849,1,0,0,0,841,843,3,324,
162,0,842,841,1,0,0,0,843,844,1,0,0,0,844,842,1,0,0,0,844,845,1,0,0,0,845,
846,1,0,0,0,846,847,3,326,163,0,847,849,1,0,0,0,848,827,1,0,0,0,848,828,
1,0,0,0,848,829,1,0,0,0,848,842,1,0,0,0,849,855,1,0,0,0,850,855,3,104,52,
0,851,852,3,324,162,0,852,853,3,326,163,0,853,855,1,0,0,0,854,826,1,0,0,
0,854,850,1,0,0,0,854,851,1,0,0,0,855,922,1,0,0,0,856,857,5,129,0,0,857,
860,3,26,13,0,858,859,5,132,0,0,859,861,3,26,13,0,860,858,1,0,0,0,861,862,
1,0,0,0,862,860,1,0,0,0,862,863,1,0,0,0,863,864,1,0,0,0,864,865,5,130,0,
0,865,922,1,0,0,0,866,867,5,98,0,0,867,871,5,129,0,0,868,872,3,110,55,0,
869,872,3,4,2,0,870,872,5,108,0,0,871,868,1,0,0,0,871,869,1,0,0,0,871,870,
1,0,0,0,872,873,1,0,0,0,873,922,5,130,0,0,874,875,5,25,0,0,875,876,5,129,
0,0,876,877,3,28,14,0,877,878,5,130,0,0,878,922,1,0,0,0,879,880,5,101,0,
0,880,881,5,129,0,0,881,882,3,28,14,0,882,883,5,130,0,0,883,922,1,0,0,0,
884,889,5,30,0,0,885,886,5,129,0,0,886,887,3,4,2,0,887,888,5,130,0,0,888,
890,1,0,0,0,889,885,1,0,0,0,889,890,1,0,0,0,890,922,1,0,0,0,891,893,5,15,
0,0,892,891,1,0,0,0,892,893,1,0,0,0,893,894,1,0,0,0,894,900,5,31,0,0,895,
897,5,129,0,0,896,898,3,124,62,0,897,896,1,0,0,0,897,898,1,0,0,0,898,899,
1,0,0,0,899,901,5,130,0,0,900,895,1,0,0,0,900,901,1,0,0,0,901,902,1,0,0,
0,902,922,3,172,86,0,903,904,5,88,0,0,904,905,5,129,0,0,905,906,3,4,2,0,
906,907,5,130,0,0,907,922,1,0,0,0,908,909,5,64,0,0,909,915,5,129,0,0,910,
911,3,436,218,0,911,912,5,131,0,0,912,914,1,0,0,0,913,910,1,0,0,0,914,917,
1,0,0,0,915,913,1,0,0,0,915,916,1,0,0,0,916,918,1,0,0,0,917,915,1,0,0,0,
918,919,3,436,218,0,919,920,5,130,0,0,920,922,1,0,0,0,921,800,1,0,0,0,921,
801,1,0,0,0,921,805,1,0,0,0,921,809,1,0,0,0,921,810,1,0,0,0,921,811,1,0,
0,0,921,812,1,0,0,0,921,813,1,0,0,0,921,825,1,0,0,0,921,856,1,0,0,0,921,
866,1,0,0,0,921,874,1,0,0,0,921,879,1,0,0,0,921,884,1,0,0,0,921,892,1,0,
0,0,921,903,1,0,0,0,921,908,1,0,0,0,922,75,1,0,0,0,923,926,3,28,14,0,924,
926,3,78,39,0,925,923,1,0,0,0,925,924,1,0,0,0,926,77,1,0,0,0,927,928,5,95,
0,0,928,929,3,28,14,0,929,79,1,0,0,0,930,932,5,148,0,0,931,930,1,0,0,0,931,
932,1,0,0,0,932,933,1,0,0,0,933,934,5,131,0,0,934,936,3,436,218,0,935,937,
3,22,11,0,936,935,1,0,0,0,936,937,1,0,0,0,937,81,1,0,0,0,938,940,5,148,0,
0,939,938,1,0,0,0,939,940,1,0,0,0,940,941,1,0,0,0,941,942,5,127,0,0,942,
947,3,84,42,0,943,944,5,132,0,0,944,946,3,84,42,0,945,943,1,0,0,0,946,949,
1,0,0,0,947,945,1,0,0,0,947,948,1,0,0,0,948,950,1,0,0,0,949,947,1,0,0,0,
950,951,5,128,0,0,951,83,1,0,0,0,952,953,3,436,218,0,953,954,5,133,0,0,954,
956,1,0,0,0,955,952,1,0,0,0,955,956,1,0,0,0,956,957,1,0,0,0,957,958,3,28,
14,0,958,85,1,0,0,0,959,960,7,7,0,0,960,87,1,0,0,0,961,966,3,28,14,0,962,
963,5,132,0,0,963,965,3,28,14,0,964,962,1,0,0,0,965,968,1,0,0,0,966,964,
1,0,0,0,966,967,1,0,0,0,967,89,1,0,0,0,968,966,1,0,0,0,969,972,3,92,46,0,
970,972,3,100,50,0,971,969,1,0,0,0,971,970,1,0,0,0,972,91,1,0,0,0,973,978,
5,125,0,0,974,976,3,94,47,0,975,977,5,132,0,0,976,975,1,0,0,0,976,977,1,
0,0,0,977,979,1,0,0,0,978,974,1,0,0,0,978,979,1,0,0,0,979,980,1,0,0,0,980,
981,5,126,0,0,981,93,1,0,0,0,982,987,3,96,48,0,983,984,5,132,0,0,984,986,
3,96,48,0,985,983,1,0,0,0,986,989,1,0,0,0,987,985,1,0,0,0,987,988,1,0,0,
0,988,95,1,0,0,0,989,987,1,0,0,0,990,996,3,436,218,0,991,992,5,127,0,0,992,
993,3,28,14,0,993,994,5,128,0,0,994,996,1,0,0,0,995,990,1,0,0,0,995,991,
1,0,0,0,996,997,1,0,0,0,997,998,5,145,0,0,998,999,3,98,49,0,999,97,1,0,0,
0,1000,1003,3,28,14,0,1001,1003,3,90,45,0,1002,1000,1,0,0,0,1002,1001,1,
0,0,0,1003,99,1,0,0,0,1004,1005,5,125,0,0,1005,1010,3,102,51,0,1006,1007,
5,132,0,0,1007,1009,3,102,51,0,1008,1006,1,0,0,0,1009,1012,1,0,0,0,1010,
1008,1,0,0,0,1010,1011,1,0,0,0,1011,1014,1,0,0,0,1012,1010,1,0,0,0,1013,
1015,5,132,0,0,1014,1013,1,0,0,0,1014,1015,1,0,0,0,1015,1016,1,0,0,0,1016,
1017,5,126,0,0,1017,101,1,0,0,0,1018,1024,3,30,15,0,1019,1020,5,125,0,0,
1020,1021,3,88,44,0,1021,1022,5,126,0,0,1022,1024,1,0,0,0,1023,1018,1,0,
0,0,1023,1019,1,0,0,0,1024,103,1,0,0,0,1025,1030,5,125,0,0,1026,1028,3,106,
53,0,1027,1029,5,132,0,0,1028,1027,1,0,0,0,1028,1029,1,0,0,0,1029,1031,1,
0,0,0,1030,1026,1,0,0,0,1030,1031,1,0,0,0,1031,1032,1,0,0,0,1032,1033,5,
126,0,0,1033,105,1,0,0,0,1034,1039,3,108,54,0,1035,1036,5,132,0,0,1036,1038,
3,108,54,0,1037,1035,1,0,0,0,1038,1041,1,0,0,0,1039,1037,1,0,0,0,1039,1040,
1,0,0,0,1040,107,1,0,0,0,1041,1039,1,0,0,0,1042,1048,3,72,36,0,1043,1044,
3,436,218,0,1044,1045,5,145,0,0,1045,1046,3,28,14,0,1046,1048,1,0,0,0,1047,
1042,1,0,0,0,1047,1043,1,0,0,0,1048,109,1,0,0,0,1049,1058,3,436,218,0,1050,
1052,3,112,56,0,1051,1050,1,0,0,0,1051,1052,1,0,0,0,1052,1059,1,0,0,0,1053,
1054,5,149,0,0,1054,1056,3,436,218,0,1055,1057,3,112,56,0,1056,1055,1,0,
0,0,1056,1057,1,0,0,0,1057,1059,1,0,0,0,1058,1051,1,0,0,0,1058,1053,1,0,
0,0,1059,1067,1,0,0,0,1060,1061,5,131,0,0,1061,1063,3,436,218,0,1062,1064,
3,112,56,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,1066,1,0,0,0,1065,1060,
1,0,0,0,1066,1069,1,0,0,0,1067,1065,1,0,0,0,1067,1068,1,0,0,0,1068,111,1,
0,0,0,1069,1067,1,0,0,0,1070,1074,5,146,0,0,1071,1073,5,132,0,0,1072,1071,
1,0,0,0,1073,1076,1,0,0,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,1075,1077,
1,0,0,0,1076,1074,1,0,0,0,1077,1078,5,147,0,0,1078,113,1,0,0,0,1079,1084,
3,6,3,0,1080,1083,3,324,162,0,1081,1083,5,137,0,0,1082,1080,1,0,0,0,1082,
1081,1,0,0,0,1083,1086,1,0,0,0,1084,1082,1,0,0,0,1084,1085,1,0,0,0,1085,
1088,1,0,0,0,1086,1084,1,0,0,0,1087,1089,5,148,0,0,1088,1087,1,0,0,0,1088,
1089,1,0,0,0,1089,1091,1,0,0,0,1090,1092,3,116,58,0,1091,1090,1,0,0,0,1091,
1092,1,0,0,0,1092,1094,1,0,0,0,1093,1095,3,436,218,0,1094,1093,1,0,0,0,1094,
1095,1,0,0,0,1095,115,1,0,0,0,1096,1097,5,125,0,0,1097,1102,3,118,59,0,1098,
1099,5,132,0,0,1099,1101,3,118,59,0,1100,1098,1,0,0,0,1101,1104,1,0,0,0,
1102,1100,1,0,0,0,1102,1103,1,0,0,0,1103,1105,1,0,0,0,1104,1102,1,0,0,0,
1105,1106,5,126,0,0,1106,117,1,0,0,0,1107,1108,3,436,218,0,1108,1109,5,133,
0,0,1109,1110,3,28,14,0,1110,119,1,0,0,0,1111,1113,5,15,0,0,1112,1111,1,
0,0,0,1112,1113,1,0,0,0,1113,1114,1,0,0,0,1114,1115,3,122,61,0,1115,1116,
3,376,188,0,1116,1117,3,130,65,0,1117,121,1,0,0,0,1118,1119,5,129,0,0,1119,
1130,5,130,0,0,1120,1121,5,129,0,0,1121,1122,3,124,62,0,1122,1123,5,130,
0,0,1123,1130,1,0,0,0,1124,1125,5,129,0,0,1125,1126,3,128,64,0,1126,1127,
5,130,0,0,1127,1130,1,0,0,0,1128,1130,3,436,218,0,1129,1118,1,0,0,0,1129,
1120,1,0,0,0,1129,1124,1,0,0,0,1129,1128,1,0,0,0,1130,123,1,0,0,0,1131,1136,
3,126,63,0,1132,1133,5,132,0,0,1133,1135,3,126,63,0,1134,1132,1,0,0,0,1135,
1138,1,0,0,0,1136,1134,1,0,0,0,1136,1137,1,0,0,0,1137,125,1,0,0,0,1138,1136,
1,0,0,0,1139,1141,7,2,0,0,1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,1142,
1,0,0,0,1142,1143,3,4,2,0,1143,1144,3,436,218,0,1144,127,1,0,0,0,1145,1150,
3,436,218,0,1146,1147,5,132,0,0,1147,1149,3,436,218,0,1148,1146,1,0,0,0,
1149,1152,1,0,0,0,1150,1148,1,0,0,0,1150,1151,1,0,0,0,1151,129,1,0,0,0,1152,
1150,1,0,0,0,1153,1156,3,76,38,0,1154,1156,3,172,86,0,1155,1153,1,0,0,0,
1155,1154,1,0,0,0,1156,131,1,0,0,0,1157,1158,3,134,67,0,1158,1159,3,136,
68,0,1159,133,1,0,0,0,1160,1162,5,48,0,0,1161,1163,3,4,2,0,1162,1161,1,0,
0,0,1162,1163,1,0,0,0,1163,1164,1,0,0,0,1164,1165,3,436,218,0,1165,1166,
5,54,0,0,1166,1167,3,28,14,0,1167,135,1,0,0,0,1168,1170,3,138,69,0,1169,
1168,1,0,0,0,1170,1173,1,0,0,0,1171,1169,1,0,0,0,1171,1172,1,0,0,0,1172,
1174,1,0,0,0,1173,1171,1,0,0,0,1174,1176,3,150,75,0,1175,1177,3,152,76,0,
1176,1175,1,0,0,0,1176,1177,1,0,0,0,1177,137,1,0,0,0,1178,1184,3,134,67,
0,1179,1184,3,140,70,0,1180,1184,3,142,71,0,1181,1184,3,144,72,0,1182,1184,
3,146,73,0,1183,1178,1,0,0,0,1183,1179,1,0,0,0,1183,1180,1,0,0,0,1183,1181,
1,0,0,0,1183,1182,1,0,0,0,1184,139,1,0,0,0,1185,1186,5,61,0,0,1186,1187,
3,436,218,0,1187,1188,5,145,0,0,1188,1189,3,28,14,0,1189,141,1,0,0,0,1190,
1191,5,111,0,0,1191,1192,3,28,14,0,1192,143,1,0,0,0,1193,1195,5,60,0,0,1194,
1196,3,4,2,0,1195,1194,1,0,0,0,1195,1196,1,0,0,0,1196,1197,1,0,0,0,1197,
1198,3,436,218,0,1198,1199,5,54,0,0,1199,1200,3,28,14,0,1200,1201,5,69,0,
0,1201,1202,3,28,14,0,1202,1203,5,38,0,0,1203,1206,3,28,14,0,1204,1205,5,
58,0,0,1205,1207,3,436,218,0,1206,1204,1,0,0,0,1206,1207,1,0,0,0,1207,145,
1,0,0,0,1208,1209,5,71,0,0,1209,1214,3,148,74,0,1210,1211,5,132,0,0,1211,
1213,3,148,74,0,1212,1210,1,0,0,0,1213,1216,1,0,0,0,1214,1212,1,0,0,0,1214,
1215,1,0,0,0,1215,147,1,0,0,0,1216,1214,1,0,0,0,1217,1219,3,28,14,0,1218,
1220,7,8,0,0,1219,1218,1,0,0,0,1219,1220,1,0,0,0,1220,149,1,0,0,0,1221,1222,
5,85,0,0,1222,1229,3,28,14,0,1223,1224,5,51,0,0,1224,1225,3,28,14,0,1225,
1226,5,20,0,0,1226,1227,3,28,14,0,1227,1229,1,0,0,0,1228,1221,1,0,0,0,1228,
1223,1,0,0,0,1229,151,1,0,0,0,1230,1231,5,58,0,0,1231,1232,3,436,218,0,1232,
1233,3,136,68,0,1233,153,1,0,0,0,1234,1238,3,166,83,0,1235,1238,3,156,78,
0,1236,1238,3,168,84,0,1237,1234,1,0,0,0,1237,1235,1,0,0,0,1237,1236,1,0,
0,0,1238,155,1,0,0,0,1239,1240,3,174,87,0,1240,1241,5,134,0,0,1241,1247,
1,0,0,0,1242,1243,3,182,91,0,1243,1244,5,134,0,0,1244,1247,1,0,0,0,1245,
1247,3,158,79,0,1246,1239,1,0,0,0,1246,1242,1,0,0,0,1246,1245,1,0,0,0,1247,
157,1,0,0,0,1248,1249,3,160,80,0,1249,1250,3,164,82,0,1250,159,1,0,0,0,1251,
1253,3,162,81,0,1252,1251,1,0,0,0,1252,1253,1,0,0,0,1253,1254,1,0,0,0,1254,
1255,3,276,138,0,1255,1257,3,436,218,0,1256,1258,3,232,116,0,1257,1256,1,
0,0,0,1257,1258,1,0,0,0,1258,1259,1,0,0,0,1259,1261,5,129,0,0,1260,1262,
3,282,141,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,1265,
5,130,0,0,1264,1266,3,240,120,0,1265,1264,1,0,0,0,1265,1266,1,0,0,0,1266,
161,1,0,0,0,1267,1269,7,9,0,0,1268,1270,5,90,0,0,1269,1268,1,0,0,0,1269,
1270,1,0,0,0,1270,1274,1,0,0,0,1271,1272,5,90,0,0,1272,1274,7,9,0,0,1273,
1267,1,0,0,0,1273,1271,1,0,0,0,1274,163,1,0,0,0,1275,1281,3,172,86,0,1276,
1277,3,376,188,0,1277,1278,3,76,38,0,1278,1279,5,134,0,0,1279,1281,1,0,0,
0,1280,1275,1,0,0,0,1280,1276,1,0,0,0,1281,165,1,0,0,0,1282,1283,3,436,218,
0,1283,1284,5,133,0,0,1284,1285,3,154,77,0,1285,167,1,0,0,0,1286,1289,3,
172,86,0,1287,1289,3,170,85,0,1288,1286,1,0,0,0,1288,1287,1,0,0,0,1289,169,
1,0,0,0,1290,1421,5,134,0,0,1291,1292,3,28,14,0,1292,1293,5,134,0,0,1293,
1421,1,0,0,0,1294,1295,5,52,0,0,1295,1296,5,129,0,0,1296,1297,3,28,14,0,
1297,1298,5,130,0,0,1298,1301,3,184,92,0,1299,1300,5,36,0,0,1300,1302,3,
184,92,0,1301,1299,1,0,0,0,1301,1302,1,0,0,0,1302,1421,1,0,0,0,1303,1304,
5,93,0,0,1304,1305,5,129,0,0,1305,1306,3,28,14,0,1306,1307,5,130,0,0,1307,
1311,5,125,0,0,1308,1310,3,186,93,0,1309,1308,1,0,0,0,1310,1313,1,0,0,0,
1311,1309,1,0,0,0,1311,1312,1,0,0,0,1312,1314,1,0,0,0,1313,1311,1,0,0,0,
1314,1315,5,126,0,0,1315,1421,1,0,0,0,1316,1317,5,112,0,0,1317,1318,5,129,
0,0,1318,1319,3,28,14,0,1319,1320,5,130,0,0,1320,1321,3,168,84,0,1321,1421,
1,0,0,0,1322,1323,5,33,0,0,1323,1324,3,168,84,0,1324,1325,5,112,0,0,1325,
1326,5,129,0,0,1326,1327,3,28,14,0,1327,1328,5,130,0,0,1328,1329,5,134,0,
0,1329,1421,1,0,0,0,1330,1331,5,46,0,0,1331,1333,5,129,0,0,1332,1334,3,194,
97,0,1333,1332,1,0,0,0,1333,1334,1,0,0,0,1334,1335,1,0,0,0,1335,1337,5,134,
0,0,1336,1338,3,28,14,0,1337,1336,1,0,0,0,1337,1338,1,0,0,0,1338,1339,1,
0,0,0,1339,1341,5,134,0,0,1340,1342,3,196,98,0,1341,1340,1,0,0,0,1341,1342,
1,0,0,0,1342,1343,1,0,0,0,1343,1344,5,130,0,0,1344,1421,3,168,84,0,1345,
1347,5,16,0,0,1346,1345,1,0,0,0,1346,1347,1,0,0,0,1347,1348,1,0,0,0,1348,
1349,5,47,0,0,1349,1350,5,129,0,0,1350,1351,3,176,88,0,1351,1352,3,436,218,
0,1352,1353,5,54,0,0,1353,1354,3,28,14,0,1354,1355,5,130,0,0,1355,1356,3,
168,84,0,1356,1421,1,0,0,0,1357,1358,5,19,0,0,1358,1421,5,134,0,0,1359,1360,
5,28,0,0,1360,1421,5,134,0,0,1361,1366,5,50,0,0,1362,1367,3,436,218,0,1363,
1364,5,22,0,0,1364,1367,3,28,14,0,1365,1367,5,30,0,0,1366,1362,1,0,0,0,1366,
1363,1,0,0,0,1366,1365,1,0,0,0,1367,1368,1,0,0,0,1368,1421,5,134,0,0,1369,
1371,5,82,0,0,1370,1372,3,28,14,0,1371,1370,1,0,0,0,1371,1372,1,0,0,0,1372,
1373,1,0,0,0,1373,1421,5,134,0,0,1374,1376,5,95,0,0,1375,1377,3,28,14,0,
1376,1375,1,0,0,0,1376,1377,1,0,0,0,1377,1378,1,0,0,0,1378,1421,5,134,0,
0,1379,1380,5,97,0,0,1380,1386,3,172,86,0,1381,1383,3,198,99,0,1382,1384,
3,206,103,0,1383,1382,1,0,0,0,1383,1384,1,0,0,0,1384,1387,1,0,0,0,1385,1387,
3,206,103,0,1386,1381,1,0,0,0,1386,1385,1,0,0,0,1387,1421,1,0,0,0,1388,1389,
5,25,0,0,1389,1421,3,172,86,0,1390,1391,5,101,0,0,1391,1421,3,172,86,0,1392,
1393,5,62,0,0,1393,1394,5,129,0,0,1394,1395,3,28,14,0,1395,1396,5,130,0,
0,1396,1397,3,168,84,0,1397,1421,1,0,0,0,1398,1399,5,105,0,0,1399,1400,5,
129,0,0,1400,1401,3,208,104,0,1401,1402,5,130,0,0,1402,1403,3,168,84,0,1403,
1421,1,0,0,0,1404,1408,5,113,0,0,1405,1406,5,82,0,0,1406,1409,3,28,14,0,
1407,1409,5,19,0,0,1408,1405,1,0,0,0,1408,1407,1,0,0,0,1409,1410,1,0,0,0,
1410,1421,5,134,0,0,1411,1412,5,103,0,0,1412,1421,3,172,86,0,1413,1414,5,
44,0,0,1414,1415,5,129,0,0,1415,1416,3,364,182,0,1416,1417,3,366,183,0,1417,
1418,5,130,0,0,1418,1419,3,168,84,0,1419,1421,1,0,0,0,1420,1290,1,0,0,0,
1420,1291,1,0,0,0,1420,1294,1,0,0,0,1420,1303,1,0,0,0,1420,1316,1,0,0,0,
1420,1322,1,0,0,0,1420,1330,1,0,0,0,1420,1346,1,0,0,0,1420,1357,1,0,0,0,
1420,1359,1,0,0,0,1420,1361,1,0,0,0,1420,1369,1,0,0,0,1420,1374,1,0,0,0,
1420,1379,1,0,0,0,1420,1388,1,0,0,0,1420,1390,1,0,0,0,1420,1392,1,0,0,0,
1420,1398,1,0,0,0,1420,1404,1,0,0,0,1420,1411,1,0,0,0,1420,1413,1,0,0,0,
1421,171,1,0,0,0,1422,1424,5,125,0,0,1423,1425,3,192,96,0,1424,1423,1,0,
0,0,1424,1425,1,0,0,0,1425,1426,1,0,0,0,1426,1427,5,126,0,0,1427,173,1,0,
0,0,1428,1433,5,105,0,0,1429,1433,5,80,0,0,1430,1431,5,80,0,0,1431,1433,
5,79,0,0,1432,1428,1,0,0,0,1432,1429,1,0,0,0,1432,1430,1,0,0,0,1432,1433,
1,0,0,0,1433,1434,1,0,0,0,1434,1435,3,176,88,0,1435,1442,3,178,89,0,1436,
1437,5,132,0,0,1437,1438,3,178,89,0,1438,1439,4,87,0,0,1439,1441,1,0,0,0,
1440,1436,1,0,0,0,1441,1444,1,0,0,0,1442,1440,1,0,0,0,1442,1443,1,0,0,0,
1443,1450,1,0,0,0,1444,1442,1,0,0,0,1445,1446,5,44,0,0,1446,1447,3,364,182,
0,1447,1448,3,366,183,0,1448,1450,1,0,0,0,1449,1432,1,0,0,0,1449,1445,1,
0,0,0,1450,175,1,0,0,0,1451,1454,5,106,0,0,1452,1454,3,4,2,0,1453,1451,1,
0,0,0,1453,1452,1,0,0,0,1454,177,1,0,0,0,1455,1461,3,436,218,0,1456,1458,
5,145,0,0,1457,1459,5,80,0,0,1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,1460,
1,0,0,0,1460,1462,3,180,90,0,1461,1456,1,0,0,0,1461,1462,1,0,0,0,1462,179,
1,0,0,0,1463,1467,3,28,14,0,1464,1467,3,326,163,0,1465,1467,3,374,187,0,
1466,1463,1,0,0,0,1466,1464,1,0,0,0,1466,1465,1,0,0,0,1467,181,1,0,0,0,1468,
1469,5,27,0,0,1469,1470,3,4,2,0,1470,1471,3,266,133,0,1471,183,1,0,0,0,1472,
1475,3,172,86,0,1473,1475,3,170,85,0,1474,1472,1,0,0,0,1474,1473,1,0,0,0,
1475,185,1,0,0,0,1476,1478,3,188,94,0,1477,1476,1,0,0,0,1478,1479,1,0,0,
0,1479,1477,1,0,0,0,1479,1480,1,0,0,0,1480,1481,1,0,0,0,1481,1482,3,192,
96,0,1482,187,1,0,0,0,1483,1484,5,22,0,0,1484,1486,3,28,14,0,1485,1487,3,
190,95,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1488,1,0,0,0,1488,1489,
5,133,0,0,1489,1493,1,0,0,0,1490,1491,5,30,0,0,1491,1493,5,133,0,0,1492,
1483,1,0,0,0,1492,1490,1,0,0,0,1493,189,1,0,0,0,1494,1495,5,110,0,0,1495,
1496,3,28,14,0,1496,191,1,0,0,0,1497,1499,3,154,77,0,1498,1497,1,0,0,0,1499,
1500,1,0,0,0,1500,1498,1,0,0,0,1500,1501,1,0,0,0,1501,193,1,0,0,0,1502,1512,
3,174,87,0,1503,1508,3,28,14,0,1504,1505,5,132,0,0,1505,1507,3,28,14,0,1506,
1504,1,0,0,0,1507,1510,1,0,0,0,1508,1506,1,0,0,0,1508,1509,1,0,0,0,1509,
1512,1,0,0,0,1510,1508,1,0,0,0,1511,1502,1,0,0,0,1511,1503,1,0,0,0,1512,
195,1,0,0,0,1513,1518,3,28,14,0,1514,1515,5,132,0,0,1515,1517,3,28,14,0,
1516,1514,1,0,0,0,1517,1520,1,0,0,0,1518,1516,1,0,0,0,1518,1519,1,0,0,0,
1519,197,1,0,0,0,1520,1518,1,0,0,0,1521,1525,3,200,100,0,1522,1524,3,200,
100,0,1523,1522,1,0,0,0,1524,1527,1,0,0,0,1525,1523,1,0,0,0,1525,1526,1,
0,0,0,1526,1529,1,0,0,0,1527,1525,1,0,0,0,1528,1530,3,202,101,0,1529,1528,
1,0,0,0,1529,1530,1,0,0,0,1530,1533,1,0,0,0,1531,1533,3,202,101,0,1532,1521,
1,0,0,0,1532,1531,1,0,0,0,1533,199,1,0,0,0,1534,1535,5,23,0,0,1535,1536,
5,129,0,0,1536,1538,3,20,10,0,1537,1539,3,436,218,0,1538,1537,1,0,0,0,1538,
1539,1,0,0,0,1539,1540,1,0,0,0,1540,1542,5,130,0,0,1541,1543,3,204,102,0,
1542,1541,1,0,0,0,1542,1543,1,0,0,0,1543,1544,1,0,0,0,1544,1545,3,172,86,
0,1545,201,1,0,0,0,1546,1548,5,23,0,0,1547,1549,3,204,102,0,1548,1547,1,
0,0,0,1548,1549,1,0,0,0,1549,1550,1,0,0,0,1550,1551,3,172,86,0,1551,203,
1,0,0,0,1552,1553,5,110,0,0,1553,1554,5,129,0,0,1554,1555,3,28,14,0,1555,
1556,5,130,0,0,1556,205,1,0,0,0,1557,1558,5,43,0,0,1558,1559,3,172,86,0,
1559,207,1,0,0,0,1560,1563,3,174,87,0,1561,1563,3,28,14,0,1562,1560,1,0,
0,0,1562,1561,1,0,0,0,1563,209,1,0,0,0,1564,1565,5,65,0,0,1565,1566,3,212,
106,0,1566,1568,3,214,107,0,1567,1569,5,134,0,0,1568,1567,1,0,0,0,1568,1569,
1,0,0,0,1569,211,1,0,0,0,1570,1575,3,436,218,0,1571,1572,5,131,0,0,1572,
1574,3,436,218,0,1573,1571,1,0,0,0,1574,1577,1,0,0,0,1575,1573,1,0,0,0,1575,
1576,1,0,0,0,1576,213,1,0,0,0,1577,1575,1,0,0,0,1578,1580,5,125,0,0,1579,
1581,3,216,108,0,1580,1579,1,0,0,0,1580,1581,1,0,0,0,1581,1583,1,0,0,0,1582,
1584,3,220,110,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,1586,1,0,0,0,1585,
1587,3,224,112,0,1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,1588,1,0,0,0,1588,
1589,5,126,0,0,1589,215,1,0,0,0,1590,1592,3,218,109,0,1591,1590,1,0,0,0,
1592,1593,1,0,0,0,1593,1591,1,0,0,0,1593,1594,1,0,0,0,1594,217,1,0,0,0,1595,
1596,5,41,0,0,1596,1597,5,11,0,0,1597,1598,3,436,218,0,1598,1599,5,134,0,
0,1599,219,1,0,0,0,1600,1602,3,222,111,0,1601,1600,1,0,0,0,1602,1603,1,0,
0,0,1603,1601,1,0,0,0,1603,1604,1,0,0,0,1604,221,1,0,0,0,1605,1606,5,105,
0,0,1606,1607,3,436,218,0,1607,1608,5,145,0,0,1608,1609,3,2,1,0,1609,1610,
5,134,0,0,1610,1621,1,0,0,0,1611,1612,5,105,0,0,1612,1613,3,2,1,0,1613,1614,
5,134,0,0,1614,1621,1,0,0,0,1615,1616,5,105,0,0,1616,1617,5,90,0,0,1617,
1618,3,2,1,0,1618,1619,5,134,0,0,1619,1621,1,0,0,0,1620,1605,1,0,0,0,1620,
1611,1,0,0,0,1620,1615,1,0,0,0,1621,223,1,0,0,0,1622,1624,3,226,113,0,1623,
1622,1,0,0,0,1624,1625,1,0,0,0,1625,1623,1,0,0,0,1625,1626,1,0,0,0,1626,
225,1,0,0,0,1627,1630,3,210,105,0,1628,1630,3,228,114,0,1629,1627,1,0,0,
0,1629,1628,1,0,0,0,1630,227,1,0,0,0,1631,1633,3,352,176,0,1632,1631,1,0,
0,0,1632,1633,1,0,0,0,1633,1635,1,0,0,0,1634,1636,3,258,129,0,1635,1634,
1,0,0,0,1635,1636,1,0,0,0,1636,1642,1,0,0,0,1637,1643,3,400,200,0,1638,1643,
3,402,201,0,1639,1643,3,404,202,0,1640,1643,3,406,203,0,1641,1643,3,408,
204,0,1642,1637,1,0,0,0,1642,1638,1,0,0,0,1642,1639,1,0,0,0,1642,1640,1,
0,0,0,1642,1641,1,0,0,0,1643,229,1,0,0,0,1644,1645,3,436,218,0,1645,1646,
5,149,0,0,1646,1648,3,436,218,0,1647,1649,3,22,11,0,1648,1647,1,0,0,0,1648,
1649,1,0,0,0,1649,231,1,0,0,0,1650,1651,5,146,0,0,1651,1656,3,234,117,0,
1652,1653,5,132,0,0,1653,1655,3,234,117,0,1654,1652,1,0,0,0,1655,1658,1,
0,0,0,1656,1654,1,0,0,0,1656,1657,1,0,0,0,1657,1659,1,0,0,0,1658,1656,1,
0,0,0,1659,1660,5,147,0,0,1660,233,1,0,0,0,1661,1663,3,352,176,0,1662,1661,
1,0,0,0,1662,1663,1,0,0,0,1663,1664,1,0,0,0,1664,1665,3,436,218,0,1665,235,
1,0,0,0,1666,1667,5,133,0,0,1667,1672,3,20,10,0,1668,1669,5,132,0,0,1669,
1671,3,2,1,0,1670,1668,1,0,0,0,1671,1674,1,0,0,0,1672,1670,1,0,0,0,1672,
1673,1,0,0,0,1673,237,1,0,0,0,1674,1672,1,0,0,0,1675,1680,3,2,1,0,1676,1677,
5,132,0,0,1677,1679,3,2,1,0,1678,1676,1,0,0,0,1679,1682,1,0,0,0,1680,1678,
1,0,0,0,1680,1681,1,0,0,0,1681,239,1,0,0,0,1682,1680,1,0,0,0,1683,1685,3,
242,121,0,1684,1683,1,0,0,0,1685,1686,1,0,0,0,1686,1684,1,0,0,0,1686,1687,
1,0,0,0,1687,241,1,0,0,0,1688,1689,5,111,0,0,1689,1690,3,436,218,0,1690,
1691,5,133,0,0,1691,1692,3,244,122,0,1692,243,1,0,0,0,1693,1704,3,250,125,
0,1694,1697,3,246,123,0,1695,1696,5,132,0,0,1696,1698,3,248,124,0,1697,1695,
1,0,0,0,1697,1698,1,0,0,0,1698,1701,1,0,0,0,1699,1700,5,132,0,0,1700,1702,
3,250,125,0,1701,1699,1,0,0,0,1701,1702,1,0,0,0,1702,1704,1,0,0,0,1703,1693,
1,0,0,0,1703,1694,1,0,0,0,1704,245,1,0,0,0,1705,1713,3,20,10,0,1706,1708,
5,26,0,0,1707,1709,5,148,0,0,1708,1707,1,0,0,0,1708,1709,1,0,0,0,1709,1713,
1,0,0,0,1710,1713,5,92,0,0,1711,1713,5,102,0,0,1712,1705,1,0,0,0,1712,1706,
1,0,0,0,1712,1710,1,0,0,0,1712,1711,1,0,0,0,1713,247,1,0,0,0,1714,1719,3,
2,1,0,1715,1716,5,132,0,0,1716,1718,3,2,1,0,1717,1715,1,0,0,0,1718,1721,
1,0,0,0,1719,1717,1,0,0,0,1719,1720,1,0,0,0,1720,249,1,0,0,0,1721,1719,1,
0,0,0,1722,1723,5,66,0,0,1723,1724,5,129,0,0,1724,1725,5,130,0,0,1725,251,
1,0,0,0,1726,1728,5,125,0,0,1727,1729,3,254,127,0,1728,1727,1,0,0,0,1728,
1729,1,0,0,0,1729,1730,1,0,0,0,1730,1731,5,126,0,0,1731,253,1,0,0,0,1732,
1734,3,256,128,0,1733,1732,1,0,0,0,1734,1735,1,0,0,0,1735,1733,1,0,0,0,1735,
1736,1,0,0,0,1736,255,1,0,0,0,1737,1739,3,352,176,0,1738,1737,1,0,0,0,1738,
1739,1,0,0,0,1739,1741,1,0,0,0,1740,1742,3,258,129,0,1741,1740,1,0,0,0,1741,
1742,1,0,0,0,1742,1745,1,0,0,0,1743,1746,3,262,131,0,1744,1746,3,420,210,
0,1745,1743,1,0,0,0,1745,1744,1,0,0,0,1746,257,1,0,0,0,1747,1749,3,260,130,
0,1748,1747,1,0,0,0,1749,1750,1,0,0,0,1750,1748,1,0,0,0,1750,1751,1,0,0,
0,1751,259,1,0,0,0,1752,1753,7,10,0,0,1753,261,1,0,0,0,1754,1774,3,416,208,
0,1755,1774,3,264,132,0,1756,1774,3,410,205,0,1757,1763,3,310,155,0,1758,
1764,3,314,157,0,1759,1760,3,376,188,0,1760,1761,3,76,38,0,1761,1762,5,134,
0,0,1762,1764,1,0,0,0,1763,1758,1,0,0,0,1763,1759,1,0,0,0,1764,1774,1,0,
0,0,1765,1774,3,422,211,0,1766,1767,5,108,0,0,1767,1774,3,424,212,0,1768,
1774,3,400,200,0,1769,1774,3,402,201,0,1770,1774,3,404,202,0,1771,1774,3,
406,203,0,1772,1774,3,408,204,0,1773,1754,1,0,0,0,1773,1755,1,0,0,0,1773,
1756,1,0,0,0,1773,1757,1,0,0,0,1773,1765,1,0,0,0,1773,1766,1,0,0,0,1773,
1768,1,0,0,0,1773,1769,1,0,0,0,1773,1770,1,0,0,0,1773,1771,1,0,0,0,1773,
1772,1,0,0,0,1774,263,1,0,0,0,1775,1781,5,80,0,0,1776,1777,5,79,0,0,1777,
1781,5,80,0,0,1778,1779,5,80,0,0,1779,1781,5,79,0,0,1780,1775,1,0,0,0,1780,
1776,1,0,0,0,1780,1778,1,0,0,0,1780,1781,1,0,0,0,1781,1782,1,0,0,0,1782,
1792,3,4,2,0,1783,1784,3,2,1,0,1784,1785,5,131,0,0,1785,1786,3,418,209,0,
1786,1793,1,0,0,0,1787,1793,3,424,212,0,1788,1793,3,414,207,0,1789,1793,
3,418,209,0,1790,1793,3,428,214,0,1791,1793,3,412,206,0,1792,1783,1,0,0,
0,1792,1787,1,0,0,0,1792,1788,1,0,0,0,1792,1789,1,0,0,0,1792,1790,1,0,0,
0,1792,1791,1,0,0,0,1793,265,1,0,0,0,1794,1799,3,268,134,0,1795,1796,5,132,
0,0,1796,1798,3,268,134,0,1797,1795,1,0,0,0,1798,1801,1,0,0,0,1799,1797,
1,0,0,0,1799,1800,1,0,0,0,1800,267,1,0,0,0,1801,1799,1,0,0,0,1802,1803,3,
436,218,0,1803,1804,5,145,0,0,1804,1805,3,28,14,0,1805,269,1,0,0,0,1806,
1811,3,272,136,0,1807,1808,5,132,0,0,1808,1810,3,272,136,0,1809,1807,1,0,
0,0,1810,1813,1,0,0,0,1811,1809,1,0,0,0,1811,1812,1,0,0,0,1812,271,1,0,0,
0,1813,1811,1,0,0,0,1814,1817,3,436,218,0,1815,1816,5,145,0,0,1816,1818,
3,274,137,0,1817,1815,1,0,0,0,1817,1818,1,0,0,0,1818,273,1,0,0,0,1819,1822,
3,28,14,0,1820,1822,3,326,163,0,1821,1819,1,0,0,0,1821,1820,1,0,0,0,1822,
275,1,0,0,0,1823,1826,3,4,2,0,1824,1826,5,108,0,0,1825,1823,1,0,0,0,1825,
1824,1,0,0,0,1826,277,1,0,0,0,1827,1828,3,2,1,0,1828,279,1,0,0,0,1829,1832,
3,172,86,0,1830,1832,5,134,0,0,1831,1829,1,0,0,0,1831,1830,1,0,0,0,1832,
281,1,0,0,0,1833,1840,3,290,145,0,1834,1837,3,284,142,0,1835,1836,5,132,
0,0,1836,1838,3,290,145,0,1837,1835,1,0,0,0,1837,1838,1,0,0,0,1838,1840,
1,0,0,0,1839,1833,1,0,0,0,1839,1834,1,0,0,0,1840,283,1,0,0,0,1841,1846,3,
286,143,0,1842,1843,5,132,0,0,1843,1845,3,286,143,0,1844,1842,1,0,0,0,1845,
1848,1,0,0,0,1846,1844,1,0,0,0,1846,1847,1,0,0,0,1847,285,1,0,0,0,1848,1846,
1,0,0,0,1849,1851,3,352,176,0,1850,1849,1,0,0,0,1850,1851,1,0,0,0,1851,1853,
1,0,0,0,1852,1854,3,288,144,0,1853,1852,1,0,0,0,1853,1854,1,0,0,0,1854,1855,
1,0,0,0,1855,1858,3,430,215,0,1856,1858,5,12,0,0,1857,1850,1,0,0,0,1857,
1856,1,0,0,0,1858,287,1,0,0,0,1859,1868,5,80,0,0,1860,1868,5,72,0,0,1861,
1868,5,54,0,0,1862,1863,5,80,0,0,1863,1868,5,94,0,0,1864,1865,5,54,0,0,1865,
1868,5,94,0,0,1866,1868,5,94,0,0,1867,1859,1,0,0,0,1867,1860,1,0,0,0,1867,
1861,1,0,0,0,1867,1862,1,0,0,0,1867,1864,1,0,0,0,1867,1866,1,0,0,0,1868,
289,1,0,0,0,1869,1871,3,352,176,0,1870,1869,1,0,0,0,1870,1871,1,0,0,0,1871,
1872,1,0,0,0,1872,1873,5,74,0,0,1873,1874,3,322,161,0,1874,1875,3,436,218,
0,1875,291,1,0,0,0,1876,1878,3,352,176,0,1877,1876,1,0,0,0,1877,1878,1,0,
0,0,1878,1880,1,0,0,0,1879,1881,3,298,149,0,1880,1879,1,0,0,0,1880,1881,
1,0,0,0,1881,1892,1,0,0,0,1882,1883,5,49,0,0,1883,1885,3,300,150,0,1884,
1886,3,296,148,0,1885,1884,1,0,0,0,1885,1886,1,0,0,0,1886,1893,1,0,0,0,1887,
1888,5,86,0,0,1888,1890,3,300,150,0,1889,1891,3,294,147,0,1890,1889,1,0,
0,0,1890,1891,1,0,0,0,1891,1893,1,0,0,0,1892,1882,1,0,0,0,1892,1887,1,0,
0,0,1893,293,1,0,0,0,1894,1896,3,352,176,0,1895,1894,1,0,0,0,1895,1896,1,
0,0,0,1896,1898,1,0,0,0,1897,1899,3,298,149,0,1898,1897,1,0,0,0,1898,1899,
1,0,0,0,1899,1900,1,0,0,0,1900,1901,5,49,0,0,1901,1902,3,300,150,0,1902,
295,1,0,0,0,1903,1905,3,352,176,0,1904,1903,1,0,0,0,1904,1905,1,0,0,0,1905,
1907,1,0,0,0,1906,1908,3,298,149,0,1907,1906,1,0,0,0,1907,1908,1,0,0,0,1908,
1909,1,0,0,0,1909,1910,5,86,0,0,1910,1911,3,300,150,0,1911,297,1,0,0,0,1912,
1920,5,77,0,0,1913,1920,5,57,0,0,1914,1920,5,76,0,0,1915,1916,5,77,0,0,1916,
1920,5,57,0,0,1917,1918,5,57,0,0,1918,1920,5,77,0,0,1919,1912,1,0,0,0,1919,
1913,1,0,0,0,1919,1914,1,0,0,0,1919,1915,1,0,0,0,1919,1917,1,0,0,0,1920,
299,1,0,0,0,1921,1924,3,172,86,0,1922,1924,5,134,0,0,1923,1921,1,0,0,0,1923,
1922,1,0,0,0,1924,301,1,0,0,0,1925,1927,3,352,176,0,1926,1925,1,0,0,0,1926,
1927,1,0,0,0,1927,1936,1,0,0,0,1928,1929,5,10,0,0,1929,1930,3,172,86,0,1930,
1931,3,306,153,0,1931,1937,1,0,0,0,1932,1933,5,81,0,0,1933,1934,3,172,86,
0,1934,1935,3,304,152,0,1935,1937,1,0,0,0,1936,1928,1,0,0,0,1936,1932,1,
0,0,0,1937,303,1,0,0,0,1938,1940,3,352,176,0,1939,1938,1,0,0,0,1939,1940,
1,0,0,0,1940,1941,1,0,0,0,1941,1942,5,10,0,0,1942,1943,3,172,86,0,1943,305,
1,0,0,0,1944,1946,3,352,176,0,1945,1944,1,0,0,0,1945,1946,1,0,0,0,1946,1947,
1,0,0,0,1947,1948,5,81,0,0,1948,1949,3,172,86,0,1949,307,1,0,0,0,1950,1973,
5,135,0,0,1951,1973,5,136,0,0,1952,1973,5,143,0,0,1953,1973,5,144,0,0,1954,
1973,5,151,0,0,1955,1973,5,152,0,0,1956,1973,5,96,0,0,1957,1973,5,42,0,0,
1958,1973,5,137,0,0,1959,1973,5,138,0,0,1960,1973,5,139,0,0,1961,1973,5,
140,0,0,1962,1973,5,141,0,0,1963,1973,5,142,0,0,1964,1973,5,168,0,0,1965,
1973,3,378,189,0,1966,1973,5,156,0,0,1967,1973,5,157,0,0,1968,1973,5,147,
0,0,1969,1973,5,146,0,0,1970,1973,5,159,0,0,1971,1973,5,158,0,0,1972,1950,
1,0,0,0,1972,1951,1,0,0,0,1972,1952,1,0,0,0,1972,1953,1,0,0,0,1972,1954,
1,0,0,0,1972,1955,1,0,0,0,1972,1956,1,0,0,0,1972,1957,1,0,0,0,1972,1958,
1,0,0,0,1972,1959,1,0,0,0,1972,1960,1,0,0,0,1972,1961,1,0,0,0,1972,1962,
1,0,0,0,1972,1963,1,0,0,0,1972,1964,1,0,0,0,1972,1965,1,0,0,0,1972,1966,
1,0,0,0,1972,1967,1,0,0,0,1972,1968,1,0,0,0,1972,1969,1,0,0,0,1972,1970,
1,0,0,0,1972,1971,1,0,0,0,1973,309,1,0,0,0,1974,1975,7,11,0,0,1975,1976,
5,70,0,0,1976,1977,3,4,2,0,1977,1978,5,129,0,0,1978,1979,3,430,215,0,1979,
1980,5,130,0,0,1980,311,1,0,0,0,1981,1982,5,133,0,0,1982,1983,7,12,0,0,1983,
1985,5,129,0,0,1984,1986,3,24,12,0,1985,1984,1,0,0,0,1985,1986,1,0,0,0,1986,
1987,1,0,0,0,1987,1988,5,130,0,0,1988,313,1,0,0,0,1989,1992,3,172,86,0,1990,
1992,5,134,0,0,1991,1989,1,0,0,0,1991,1990,1,0,0,0,1992,315,1,0,0,0,1993,
1994,5,133,0,0,1994,1995,3,238,119,0,1995,317,1,0,0,0,1996,2000,5,125,0,
0,1997,1999,3,320,160,0,1998,1997,1,0,0,0,1999,2002,1,0,0,0,2000,1998,1,
0,0,0,2000,2001,1,0,0,0,2001,2003,1,0,0,0,2002,2000,1,0,0,0,2003,2004,5,
126,0,0,2004,319,1,0,0,0,2005,2007,3,352,176,0,2006,2005,1,0,0,0,2006,2007,
1,0,0,0,2007,2009,1,0,0,0,2008,2010,3,258,129,0,2009,2008,1,0,0,0,2009,2010,
1,0,0,0,2010,2021,1,0,0,0,2011,2022,3,262,131,0,2012,2013,5,44,0,0,2013,
2015,3,4,2,0,2014,2016,3,372,186,0,2015,2014,1,0,0,0,2016,2017,1,0,0,0,2017,
2015,1,0,0,0,2017,2018,1,0,0,0,2018,2019,1,0,0,0,2019,2020,5,134,0,0,2020,
2022,1,0,0,0,2021,2011,1,0,0,0,2021,2012,1,0,0,0,2022,321,1,0,0,0,2023,2031,
3,6,3,0,2024,2026,7,13,0,0,2025,2024,1,0,0,0,2026,2029,1,0,0,0,2027,2025,
1,0,0,0,2027,2028,1,0,0,0,2028,2030,1,0,0,0,2029,2027,1,0,0,0,2030,2032,
3,324,162,0,2031,2027,1,0,0,0,2032,2033,1,0,0,0,2033,2031,1,0,0,0,2033,2034,
1,0,0,0,2034,323,1,0,0,0,2035,2039,5,127,0,0,2036,2038,5,132,0,0,2037,2036,
1,0,0,0,2038,2041,1,0,0,0,2039,2037,1,0,0,0,2039,2040,1,0,0,0,2040,2042,
1,0,0,0,2041,2039,1,0,0,0,2042,2043,5,128,0,0,2043,325,1,0,0,0,2044,2056,
5,125,0,0,2045,2050,3,274,137,0,2046,2047,5,132,0,0,2047,2049,3,274,137,
0,2048,2046,1,0,0,0,2049,2052,1,0,0,0,2050,2048,1,0,0,0,2050,2051,1,0,0,
0,2051,2054,1,0,0,0,2052,2050,1,0,0,0,2053,2055,5,132,0,0,2054,2053,1,0,
0,0,2054,2055,1,0,0,0,2055,2057,1,0,0,0,2056,2045,1,0,0,0,2056,2057,1,0,
0,0,2057,2058,1,0,0,0,2058,2059,5,126,0,0,2059,327,1,0,0,0,2060,2061,5,146,
0,0,2061,2066,3,330,165,0,2062,2063,5,132,0,0,2063,2065,3,330,165,0,2064,
2062,1,0,0,0,2065,2068,1,0,0,0,2066,2064,1,0,0,0,2066,2067,1,0,0,0,2067,
2069,1,0,0,0,2068,2066,1,0,0,0,2069,2070,5,147,0,0,2070,329,1,0,0,0,2071,
2073,3,352,176,0,2072,2071,1,0,0,0,2072,2073,1,0,0,0,2073,2075,1,0,0,0,2074,
2076,3,332,166,0,2075,2074,1,0,0,0,2075,2076,1,0,0,0,2076,2077,1,0,0,0,2077,
2078,3,436,218,0,2078,331,1,0,0,0,2079,2080,7,14,0,0,2080,333,1,0,0,0,2081,
2082,5,133,0,0,2082,2083,3,238,119,0,2083,335,1,0,0,0,2084,2088,5,125,0,
0,2085,2087,3,338,169,0,2086,2085,1,0,0,0,2087,2090,1,0,0,0,2088,2086,1,
0,0,0,2088,2089,1,0,0,0,2089,2091,1,0,0,0,2090,2088,1,0,0,0,2091,2092,5,
126,0,0,2092,337,1,0,0,0,2093,2095,3,352,176,0,2094,2093,1,0,0,0,2094,2095,
1,0,0,0,2095,2097,1,0,0,0,2096,2098,5,66,0,0,2097,2096,1,0,0,0,2097,2098,
1,0,0,0,2098,2162,1,0,0,0,2099,2101,5,103,0,0,2100,2099,1,0,0,0,2100,2101,
1,0,0,0,2101,2107,1,0,0,0,2102,2108,5,80,0,0,2103,2104,5,80,0,0,2104,2108,
5,79,0,0,2105,2106,5,79,0,0,2106,2108,5,80,0,0,2107,2102,1,0,0,0,2107,2103,
1,0,0,0,2107,2105,1,0,0,0,2107,2108,1,0,0,0,2108,2109,1,0,0,0,2109,2137,
3,4,2,0,2110,2112,3,436,218,0,2111,2113,3,232,116,0,2112,2111,1,0,0,0,2112,
2113,1,0,0,0,2113,2114,1,0,0,0,2114,2116,5,129,0,0,2115,2117,3,282,141,0,
2116,2115,1,0,0,0,2116,2117,1,0,0,0,2117,2118,1,0,0,0,2118,2120,5,130,0,
0,2119,2121,3,240,120,0,2120,2119,1,0,0,0,2120,2121,1,0,0,0,2121,2122,1,
0,0,0,2122,2123,5,134,0,0,2123,2138,1,0,0,0,2124,2125,3,436,218,0,2125,2126,
5,125,0,0,2126,2127,3,340,170,0,2127,2128,5,126,0,0,2128,2138,1,0,0,0,2129,
2130,5,94,0,0,2130,2131,5,127,0,0,2131,2132,3,282,141,0,2132,2133,5,128,
0,0,2133,2134,5,125,0,0,2134,2135,3,340,170,0,2135,2136,5,126,0,0,2136,2138,
1,0,0,0,2137,2110,1,0,0,0,2137,2124,1,0,0,0,2137,2129,1,0,0,0,2138,2163,
1,0,0,0,2139,2141,5,103,0,0,2140,2139,1,0,0,0,2140,2141,1,0,0,0,2141,2142,
1,0,0,0,2142,2143,5,108,0,0,2143,2145,3,436,218,0,2144,2146,3,232,116,0,
2145,2144,1,0,0,0,2145,2146,1,0,0,0,2146,2147,1,0,0,0,2147,2149,5,129,0,
0,2148,2150,3,282,141,0,2149,2148,1,0,0,0,2149,2150,1,0,0,0,2150,2151,1,
0,0,0,2151,2153,5,130,0,0,2152,2154,3,240,120,0,2153,2152,1,0,0,0,2153,2154,
1,0,0,0,2154,2155,1,0,0,0,2155,2156,5,134,0,0,2156,2163,1,0,0,0,2157,2158,
5,39,0,0,2158,2159,3,4,2,0,2159,2160,3,436,218,0,2160,2161,5,134,0,0,2161,
2163,1,0,0,0,2162,2100,1,0,0,0,2162,2140,1,0,0,0,2162,2157,1,0,0,0,2163,
339,1,0,0,0,2164,2166,3,352,176,0,2165,2164,1,0,0,0,2165,2166,1,0,0,0,2166,
2185,1,0,0,0,2167,2168,5,49,0,0,2168,2174,5,134,0,0,2169,2171,3,352,176,
0,2170,2169,1,0,0,0,2170,2171,1,0,0,0,2171,2172,1,0,0,0,2172,2173,5,86,0,
0,2173,2175,5,134,0,0,2174,2170,1,0,0,0,2174,2175,1,0,0,0,2175,2186,1,0,
0,0,2176,2177,5,86,0,0,2177,2183,5,134,0,0,2178,2180,3,352,176,0,2179,2178,
1,0,0,0,2179,2180,1,0,0,0,2180,2181,1,0,0,0,2181,2182,5,49,0,0,2182,2184,
5,134,0,0,2183,2179,1,0,0,0,2183,2184,1,0,0,0,2184,2186,1,0,0,0,2185,2167,
1,0,0,0,2185,2176,1,0,0,0,2186,341,1,0,0,0,2187,2188,5,133,0,0,2188,2189,
3,4,2,0,2189,343,1,0,0,0,2190,2202,5,125,0,0,2191,2196,3,346,173,0,2192,
2193,5,132,0,0,2193,2195,3,346,173,0,2194,2192,1,0,0,0,2195,2198,1,0,0,0,
2196,2194,1,0,0,0,2196,2197,1,0,0,0,2197,2200,1,0,0,0,2198,2196,1,0,0,0,
2199,2201,5,132,0,0,2200,2199,1,0,0,0,2200,2201,1,0,0,0,2201,2203,1,0,0,
0,2202,2191,1,0,0,0,2202,2203,1,0,0,0,2203,2204,1,0,0,0,2204,2205,5,126,
0,0,2205,345,1,0,0,0,2206,2208,3,352,176,0,2207,2206,1,0,0,0,2207,2208,1,
0,0,0,2208,2209,1,0,0,0,2209,2212,3,436,218,0,2210,2211,5,145,0,0,2211,2213,
3,28,14,0,2212,2210,1,0,0,0,2212,2213,1,0,0,0,2213,347,1,0,0,0,2214,2215,
5,127,0,0,2215,2216,3,350,175,0,2216,2217,5,133,0,0,2217,2219,3,358,179,
0,2218,2220,5,132,0,0,2219,2218,1,0,0,0,2219,2220,1,0,0,0,2220,2221,1,0,
0,0,2221,2222,5,128,0,0,2222,349,1,0,0,0,2223,2226,3,398,199,0,2224,2226,
3,436,218,0,2225,2223,1,0,0,0,2225,2224,1,0,0,0,2226,351,1,0,0,0,2227,2229,
3,354,177,0,2228,2227,1,0,0,0,2229,2230,1,0,0,0,2230,2228,1,0,0,0,2230,2231,
1,0,0,0,2231,353,1,0,0,0,2232,2236,5,127,0,0,2233,2234,3,356,178,0,2234,
2235,5,133,0,0,2235,2237,1,0,0,0,2236,2233,1,0,0,0,2236,2237,1,0,0,0,2237,
2238,1,0,0,0,2238,2240,3,358,179,0,2239,2241,5,132,0,0,2240,2239,1,0,0,0,
2240,2241,1,0,0,0,2241,2242,1,0,0,0,2242,2243,5,128,0,0,2243,355,1,0,0,0,
2244,2247,3,398,199,0,2245,2247,3,436,218,0,2246,2244,1,0,0,0,2246,2245,
1,0,0,0,2247,357,1,0,0,0,2248,2253,3,360,180,0,2249,2250,5,132,0,0,2250,
2252,3,360,180,0,2251,2249,1,0,0,0,2252,2255,1,0,0,0,2253,2251,1,0,0,0,2253,
2254,1,0,0,0,2254,359,1,0,0,0,2255,2253,1,0,0,0,2256,2269,3,2,1,0,2257,2266,
5,129,0,0,2258,2263,3,362,181,0,2259,2260,5,132,0,0,2260,2262,3,362,181,
0,2261,2259,1,0,0,0,2262,2265,1,0,0,0,2263,2261,1,0,0,0,2263,2264,1,0,0,
0,2264,2267,1,0,0,0,2265,2263,1,0,0,0,2266,2258,1,0,0,0,2266,2267,1,0,0,
0,2267,2268,1,0,0,0,2268,2270,5,130,0,0,2269,2257,1,0,0,0,2269,2270,1,0,
0,0,2270,361,1,0,0,0,2271,2272,3,436,218,0,2272,2273,5,133,0,0,2273,2275,
1,0,0,0,2274,2271,1,0,0,0,2274,2275,1,0,0,0,2275,2276,1,0,0,0,2276,2277,
3,28,14,0,2277,363,1,0,0,0,2278,2281,3,12,6,0,2279,2281,3,20,10,0,2280,2278,
1,0,0,0,2280,2279,1,0,0,0,2281,2286,1,0,0,0,2282,2285,3,324,162,0,2283,2285,
5,148,0,0,2284,2282,1,0,0,0,2284,2283,1,0,0,0,2285,2288,1,0,0,0,2286,2284,
1,0,0,0,2286,2287,1,0,0,0,2287,2289,1,0,0,0,2288,2286,1,0,0,0,2289,2290,
5,137,0,0,2290,2294,1,0,0,0,2291,2292,5,108,0,0,2292,2294,5,137,0,0,2293,
2280,1,0,0,0,2293,2291,1,0,0,0,2294,365,1,0,0,0,2295,2300,3,368,184,0,2296,
2297,5,132,0,0,2297,2299,3,368,184,0,2298,2296,1,0,0,0,2299,2302,1,0,0,0,
2300,2298,1,0,0,0,2300,2301,1,0,0,0,2301,367,1,0,0,0,2302,2300,1,0,0,0,2303,
2304,3,436,218,0,2304,2305,5,145,0,0,2305,2306,3,370,185,0,2306,369,1,0,
0,0,2307,2309,5,140,0,0,2308,2307,1,0,0,0,2308,2309,1,0,0,0,2309,2310,1,
0,0,0,2310,2313,3,28,14,0,2311,2313,3,374,187,0,2312,2308,1,0,0,0,2312,2311,
1,0,0,0,2313,371,1,0,0,0,2314,2315,3,436,218,0,2315,2316,5,127,0,0,2316,
2317,3,28,14,0,2317,2318,5,128,0,0,2318,373,1,0,0,0,2319,2320,5,89,0,0,2320,
2321,3,4,2,0,2321,2322,5,127,0,0,2322,2323,3,28,14,0,2323,2324,5,128,0,0,
2324,2349,1,0,0,0,2325,2327,5,89,0,0,2326,2328,3,4,2,0,2327,2326,1,0,0,0,
2327,2328,1,0,0,0,2328,2329,1,0,0,0,2329,2331,5,127,0,0,2330,2332,3,28,14,
0,2331,2330,1,0,0,0,2331,2332,1,0,0,0,2332,2333,1,0,0,0,2333,2334,5,128,
0,0,2334,2335,5,125,0,0,2335,2340,3,28,14,0,2336,2337,5,132,0,0,2337,2339,
3,28,14,0,2338,2336,1,0,0,0,2339,2342,1,0,0,0,2340,2338,1,0,0,0,2340,2341,
1,0,0,0,2341,2344,1,0,0,0,2342,2340,1,0,0,0,2343,2345,5,132,0,0,2344,2343,
1,0,0,0,2344,2345,1,0,0,0,2345,2346,1,0,0,0,2346,2347,5,126,0,0,2347,2349,
1,0,0,0,2348,2319,1,0,0,0,2348,2325,1,0,0,0,2349,375,1,0,0,0,2350,2351,5,
145,0,0,2351,2352,5,147,0,0,2352,2353,4,188,1,1,2353,377,1,0,0,0,2354,2355,
5,147,0,0,2355,2356,5,147,0,0,2356,2357,4,189,2,1,2357,379,1,0,0,0,2358,
2359,5,147,0,0,2359,2360,5,159,0,0,2360,2361,4,190,3,1,2361,381,1,0,0,0,
2362,2371,3,384,192,0,2363,2371,3,386,193,0,2364,2371,5,116,0,0,2365,2371,
5,117,0,0,2366,2371,5,118,0,0,2367,2371,5,119,0,0,2368,2371,5,120,0,0,2369,
2371,5,67,0,0,2370,2362,1,0,0,0,2370,2363,1,0,0,0,2370,2364,1,0,0,0,2370,
2365,1,0,0,0,2370,2366,1,0,0,0,2370,2367,1,0,0,0,2370,2368,1,0,0,0,2370,
2369,1,0,0,0,2371,383,1,0,0,0,2372,2373,7,15,0,0,2373,385,1,0,0,0,2374,2379,
3,388,194,0,2375,2379,3,390,195,0,2376,2379,5,121,0,0,2377,2379,5,122,0,
0,2378,2374,1,0,0,0,2378,2375,1,0,0,0,2378,2376,1,0,0,0,2378,2377,1,0,0,
0,2379,387,1,0,0,0,2380,2384,5,123,0,0,2381,2383,3,392,196,0,2382,2381,1,
0,0,0,2383,2386,1,0,0,0,2384,2382,1,0,0,0,2384,2385,1,0,0,0,2385,2387,1,
0,0,0,2386,2384,1,0,0,0,2387,2388,5,176,0,0,2388,389,1,0,0,0,2389,2393,5,
124,0,0,2390,2392,3,394,197,0,2391,2390,1,0,0,0,2392,2395,1,0,0,0,2393,2391,
1,0,0,0,2393,2394,1,0,0,0,2394,2396,1,0,0,0,2395,2393,1,0,0,0,2396,2397,
5,176,0,0,2397,391,1,0,0,0,2398,2403,3,396,198,0,2399,2403,5,172,0,0,2400,
2403,5,174,0,0,2401,2403,5,177,0,0,2402,2398,1,0,0,0,2402,2399,1,0,0,0,2402,
2400,1,0,0,0,2402,2401,1,0,0,0,2403,393,1,0,0,0,2404,2409,3,396,198,0,2405,
2409,5,172,0,0,2406,2409,5,175,0,0,2407,2409,5,178,0,0,2408,2404,1,0,0,0,
2408,2405,1,0,0,0,2408,2406,1,0,0,0,2408,2407,1,0,0,0,2409,395,1,0,0,0,2410,
2415,3,28,14,0,2411,2412,5,132,0,0,2412,2414,3,28,14,0,2413,2411,1,0,0,0,
2414,2417,1,0,0,0,2415,2413,1,0,0,0,2415,2416,1,0,0,0,2416,2424,1,0,0,0,
2417,2415,1,0,0,0,2418,2420,5,133,0,0,2419,2421,5,180,0,0,2420,2419,1,0,
0,0,2421,2422,1,0,0,0,2422,2420,1,0,0,0,2422,2423,1,0,0,0,2423,2425,1,0,
0,0,2424,2418,1,0,0,0,2424,2425,1,0,0,0,2425,397,1,0,0,0,2426,2427,7,16,
0,0,2427,399,1,0,0,0,2428,2429,5,26,0,0,2429,2431,3,436,218,0,2430,2432,
3,232,116,0,2431,2430,1,0,0,0,2431,2432,1,0,0,0,2432,2434,1,0,0,0,2433,2435,
3,236,118,0,2434,2433,1,0,0,0,2434,2435,1,0,0,0,2435,2437,1,0,0,0,2436,2438,
3,240,120,0,2437,2436,1,0,0,0,2437,2438,1,0,0,0,2438,2439,1,0,0,0,2439,2441,
3,252,126,0,2440,2442,5,134,0,0,2441,2440,1,0,0,0,2441,2442,1,0,0,0,2442,
401,1,0,0,0,2443,2445,7,17,0,0,2444,2443,1,0,0,0,2444,2445,1,0,0,0,2445,
2446,1,0,0,0,2446,2447,5,92,0,0,2447,2449,3,436,218,0,2448,2450,3,232,116,
0,2449,2448,1,0,0,0,2449,2450,1,0,0,0,2450,2452,1,0,0,0,2451,2453,3,316,
158,0,2452,2451,1,0,0,0,2452,2453,1,0,0,0,2453,2455,1,0,0,0,2454,2456,3,
240,120,0,2455,2454,1,0,0,0,2455,2456,1,0,0,0,2456,2457,1,0,0,0,2457,2459,
3,318,159,0,2458,2460,5,134,0,0,2459,2458,1,0,0,0,2459,2460,1,0,0,0,2460,
403,1,0,0,0,2461,2462,5,56,0,0,2462,2464,3,436,218,0,2463,2465,3,328,164,
0,2464,2463,1,0,0,0,2464,2465,1,0,0,0,2465,2467,1,0,0,0,2466,2468,3,334,
167,0,2467,2466,1,0,0,0,2467,2468,1,0,0,0,2468,2470,1,0,0,0,2469,2471,3,
240,120,0,2470,2469,1,0,0,0,2470,2471,1,0,0,0,2471,2472,1,0,0,0,2472,2474,
3,252,126,0,2473,2475,5,134,0,0,2474,2473,1,0,0,0,2474,2475,1,0,0,0,2475,
405,1,0,0,0,2476,2477,5,37,0,0,2477,2479,3,436,218,0,2478,2480,3,342,171,
0,2479,2478,1,0,0,0,2479,2480,1,0,0,0,2480,2481,1,0,0,0,2481,2483,3,344,
172,0,2482,2484,5,134,0,0,2483,2482,1,0,0,0,2483,2484,1,0,0,0,2484,407,1,
0,0,0,2485,2486,5,31,0,0,2486,2487,3,276,138,0,2487,2489,3,436,218,0,2488,
2490,3,328,164,0,2489,2488,1,0,0,0,2489,2490,1,0,0,0,2490,2491,1,0,0,0,2491,
2493,5,129,0,0,2492,2494,3,282,141,0,2493,2492,1,0,0,0,2493,2494,1,0,0,0,
2494,2495,1,0,0,0,2495,2497,5,130,0,0,2496,2498,3,240,120,0,2497,2496,1,
0,0,0,2497,2498,1,0,0,0,2498,2499,1,0,0,0,2499,2500,5,134,0,0,2500,409,1,
0,0,0,2501,2502,5,39,0,0,2502,2511,3,4,2,0,2503,2504,3,270,135,0,2504,2505,
5,134,0,0,2505,2512,1,0,0,0,2506,2507,3,278,139,0,2507,2508,5,125,0,0,2508,
2509,3,302,151,0,2509,2510,5,126,0,0,2510,2512,1,0,0,0,2511,2503,1,0,0,0,
2511,2506,1,0,0,0,2512,411,1,0,0,0,2513,2514,3,270,135,0,2514,2515,5,134,
0,0,2515,413,1,0,0,0,2516,2530,3,278,139,0,2517,2518,5,125,0,0,2518,2519,
3,292,146,0,2519,2524,5,126,0,0,2520,2521,5,145,0,0,2521,2522,3,274,137,
0,2522,2523,5,134,0,0,2523,2525,1,0,0,0,2524,2520,1,0,0,0,2524,2525,1,0,
0,0,2525,2531,1,0,0,0,2526,2527,3,376,188,0,2527,2528,3,76,38,0,2528,2529,
5,134,0,0,2529,2531,1,0,0,0,2530,2517,1,0,0,0,2530,2526,1,0,0,0,2531,415,
1,0,0,0,2532,2533,5,27,0,0,2533,2534,3,4,2,0,2534,2535,3,266,133,0,2535,
2536,5,134,0,0,2536,417,1,0,0,0,2537,2538,5,94,0,0,2538,2539,5,127,0,0,2539,
2540,3,282,141,0,2540,2549,5,128,0,0,2541,2542,5,125,0,0,2542,2543,3,292,
146,0,2543,2544,5,126,0,0,2544,2550,1,0,0,0,2545,2546,3,376,188,0,2546,2547,
3,76,38,0,2547,2548,5,134,0,0,2548,2550,1,0,0,0,2549,2541,1,0,0,0,2549,2545,
1,0,0,0,2550,419,1,0,0,0,2551,2552,5,144,0,0,2552,2553,3,436,218,0,2553,
2554,5,129,0,0,2554,2555,5,130,0,0,2555,2556,3,314,157,0,2556,421,1,0,0,
0,2557,2558,3,436,218,0,2558,2560,5,129,0,0,2559,2561,3,282,141,0,2560,2559,
1,0,0,0,2560,2561,1,0,0,0,2561,2562,1,0,0,0,2562,2564,5,130,0,0,2563,2565,
3,312,156,0,2564,2563,1,0,0,0,2564,2565,1,0,0,0,2565,2566,1,0,0,0,2566,2567,
3,314,157,0,2567,423,1,0,0,0,2568,2570,3,426,213,0,2569,2571,3,232,116,0,
2570,2569,1,0,0,0,2570,2571,1,0,0,0,2571,2572,1,0,0,0,2572,2574,5,129,0,
0,2573,2575,3,282,141,0,2574,2573,1,0,0,0,2574,2575,1,0,0,0,2575,2576,1,
0,0,0,2576,2578,5,130,0,0,2577,2579,3,240,120,0,2578,2577,1,0,0,0,2578,2579,
1,0,0,0,2579,2585,1,0,0,0,2580,2586,3,280,140,0,2581,2582,3,376,188,0,2582,
2583,3,76,38,0,2583,2584,5,134,0,0,2584,2586,1,0,0,0,2585,2580,1,0,0,0,2585,
2581,1,0,0,0,2586,425,1,0,0,0,2587,2593,3,436,218,0,2588,2589,3,436,218,
0,2589,2590,5,149,0,0,2590,2591,3,436,218,0,2591,2593,1,0,0,0,2592,2587,
1,0,0,0,2592,2588,1,0,0,0,2593,2601,1,0,0,0,2594,2596,3,22,11,0,2595,2594,
1,0,0,0,2595,2596,1,0,0,0,2596,2597,1,0,0,0,2597,2598,5,131,0,0,2598,2600,
3,436,218,0,2599,2595,1,0,0,0,2600,2603,1,0,0,0,2601,2599,1,0,0,0,2601,2602,
1,0,0,0,2602,427,1,0,0,0,2603,2601,1,0,0,0,2604,2605,5,70,0,0,2605,2606,
3,308,154,0,2606,2608,5,129,0,0,2607,2609,5,54,0,0,2608,2607,1,0,0,0,2608,
2609,1,0,0,0,2609,2610,1,0,0,0,2610,2616,3,430,215,0,2611,2613,5,132,0,0,
2612,2614,5,54,0,0,2613,2612,1,0,0,0,2613,2614,1,0,0,0,2614,2615,1,0,0,0,
2615,2617,3,430,215,0,2616,2611,1,0,0,0,2616,2617,1,0,0,0,2617,2618,1,0,
0,0,2618,2624,5,130,0,0,2619,2625,3,314,157,0,2620,2621,3,376,188,0,2621,
2622,3,76,38,0,2622,2623,5,134,0,0,2623,2625,1,0,0,0,2624,2619,1,0,0,0,2624,
2620,1,0,0,0,2625,429,1,0,0,0,2626,2627,3,4,2,0,2627,2630,3,436,218,0,2628,
2629,5,145,0,0,2629,2631,3,28,14,0,2630,2628,1,0,0,0,2630,2631,1,0,0,0,2631,
431,1,0,0,0,2632,2634,5,129,0,0,2633,2635,3,24,12,0,2634,2633,1,0,0,0,2634,
2635,1,0,0,0,2635,2636,1,0,0,0,2636,2637,5,130,0,0,2637,433,1,0,0,0,2638,
2640,5,129,0,0,2639,2641,3,24,12,0,2640,2639,1,0,0,0,2640,2641,1,0,0,0,2641,
2642,1,0,0,0,2642,2644,5,130,0,0,2643,2645,3,90,45,0,2644,2643,1,0,0,0,2644,
2645,1,0,0,0,2645,435,1,0,0,0,2646,2647,7,18,0,0,2647,437,1,0,0,0,345,439,
442,445,450,454,460,463,468,472,479,481,489,497,503,507,512,522,530,540,
546,549,554,557,563,568,578,591,599,605,607,614,622,630,638,646,654,664,
666,672,677,685,693,701,703,706,713,718,725,729,731,755,764,769,773,781,
784,789,793,797,803,817,823,835,839,844,848,854,862,871,889,892,897,900,
915,921,925,931,936,939,947,955,966,971,976,978,987,995,1002,1010,1014,1023,
1028,1030,1039,1047,1051,1056,1058,1063,1067,1074,1082,1084,1088,1091,1094,
1102,1112,1129,1136,1140,1150,1155,1162,1171,1176,1183,1195,1206,1214,1219,
1228,1237,1246,1252,1257,1261,1265,1269,1273,1280,1288,1301,1311,1333,1337,
1341,1346,1366,1371,1376,1383,1386,1408,1420,1424,1432,1442,1449,1453,1458,
1461,1466,1474,1479,1486,1492,1500,1508,1511,1518,1525,1529,1532,1538,1542,
1548,1562,1568,1575,1580,1583,1586,1593,1603,1620,1625,1629,1632,1635,1642,
1648,1656,1662,1672,1680,1686,1697,1701,1703,1708,1712,1719,1728,1735,1738,
1741,1745,1750,1763,1773,1780,1792,1799,1811,1817,1821,1825,1831,1837,1839,
1846,1850,1853,1857,1867,1870,1877,1880,1885,1890,1892,1895,1898,1904,1907,
1919,1923,1926,1936,1939,1945,1972,1985,1991,2000,2006,2009,2017,2021,2027,
2033,2039,2050,2054,2056,2066,2072,2075,2088,2094,2097,2100,2107,2112,2116,
2120,2137,2140,2145,2149,2153,2162,2165,2170,2174,2179,2183,2185,2196,2200,
2202,2207,2212,2219,2225,2230,2236,2240,2246,2253,2263,2266,2269,2274,2280,
2284,2286,2293,2300,2308,2312,2327,2331,2340,2344,2348,2370,2378,2384,2393,
2402,2408,2415,2422,2424,2431,2434,2437,2441,2444,2449,2452,2455,2459,2464,
2467,2470,2474,2479,2483,2489,2493,2497,2511,2524,2530,2549,2560,2564,2570,
2574,2578,2585,2592,2595,2601,2608,2613,2616,2624,2630,2634,2640,2644];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class CSharpParser extends Parser {

    static grammarFileName = "CSharpParser.g4";
    static literalNames = [ null, "'\\u00EF\\u00BB\\u00BF'", null, "'/***/'", 
                            null, null, null, null, "'#'", "'abstract'", 
                            "'add'", "'alias'", "'__arglist'", "'as'", "'ascending'", 
                            "'async'", "'await'", "'base'", "'bool'", "'break'", 
                            "'by'", "'byte'", "'case'", "'catch'", "'char'", 
                            "'checked'", "'class'", "'const'", "'continue'", 
                            "'decimal'", "'default'", "'delegate'", "'descending'", 
                            "'do'", "'double'", "'dynamic'", "'else'", "'enum'", 
                            "'equals'", "'event'", "'explicit'", "'extern'", 
                            "'false'", "'finally'", "'fixed'", "'float'", 
                            "'for'", "'foreach'", "'from'", "'get'", "'goto'", 
                            "'group'", "'if'", "'implicit'", "'in'", "'int'", 
                            "'interface'", "'internal'", "'into'", "'is'", 
                            "'join'", "'let'", "'lock'", "'long'", "'nameof'", 
                            "'namespace'", "'new'", "'null'", "'object'", 
                            "'on'", "'operator'", "'orderby'", "'out'", 
                            "'override'", "'params'", "'partial'", "'private'", 
                            "'protected'", "'public'", "'readonly'", "'ref'", 
                            "'remove'", "'return'", "'sbyte'", "'sealed'", 
                            "'select'", "'set'", "'short'", "'sizeof'", 
                            "'stackalloc'", "'static'", "'string'", "'struct'", 
                            "'switch'", "'this'", "'throw'", "'true'", "'try'", 
                            "'typeof'", "'uint'", "'ulong'", "'unchecked'", 
                            "'unmanaged'", "'unsafe'", "'ushort'", "'using'", 
                            "'var'", "'virtual'", "'void'", "'volatile'", 
                            "'when'", "'where'", "'while'", "'yield'", null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, "'{'", "'}'", "'['", "']'", "'('", 
                            "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", 
                            "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'!'", 
                            "'~'", "'='", "'<'", "'>'", "'?'", "'::'", "'??'", 
                            "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", 
                            "'!='", "'<='", "'>='", "'+='", "'-='", "'*='", 
                            "'/='", "'%='", "'&='", "'|='", "'^='", "'<<'", 
                            "'<<='", "'??='", "'..'", "'{{'", null, null, 
                            null, null, null, null, null, null, null, null, 
                            "'define'", "'undef'", "'elif'", "'endif'", 
                            "'line'", null, null, null, null, null, null, 
                            "'hidden'", null, null, null, "'}}'" ];
    static symbolicNames = [ null, "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", 
                             "EMPTY_DELIMITED_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
                             "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", 
                             "WHITESPACES", "SHARP", "ABSTRACT", "ADD", 
                             "ALIAS", "ARGLIST", "AS", "ASCENDING", "ASYNC", 
                             "AWAIT", "BASE", "BOOL", "BREAK", "BY", "BYTE", 
                             "CASE", "CATCH", "CHAR", "CHECKED", "CLASS", 
                             "CONST", "CONTINUE", "DECIMAL", "DEFAULT", 
                             "DELEGATE", "DESCENDING", "DO", "DOUBLE", "DYNAMIC", 
                             "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", 
                             "EXTERN", "FALSE", "FINALLY", "FIXED", "FLOAT", 
                             "FOR", "FOREACH", "FROM", "GET", "GOTO", "GROUP", 
                             "IF", "IMPLICIT", "IN", "INT", "INTERFACE", 
                             "INTERNAL", "INTO", "IS", "JOIN", "LET", "LOCK", 
                             "LONG", "NAMEOF", "NAMESPACE", "NEW", "NULL_", 
                             "OBJECT", "ON", "OPERATOR", "ORDERBY", "OUT", 
                             "OVERRIDE", "PARAMS", "PARTIAL", "PRIVATE", 
                             "PROTECTED", "PUBLIC", "READONLY", "REF", "REMOVE", 
                             "RETURN", "SBYTE", "SEALED", "SELECT", "SET", 
                             "SHORT", "SIZEOF", "STACKALLOC", "STATIC", 
                             "STRING", "STRUCT", "SWITCH", "THIS", "THROW", 
                             "TRUE", "TRY", "TYPEOF", "UINT", "ULONG", "UNCHECKED", 
                             "UNMANAGED", "UNSAFE", "USHORT", "USING", "VAR", 
                             "VIRTUAL", "VOID", "VOLATILE", "WHEN", "WHERE", 
                             "WHILE", "YIELD", "IDENTIFIER", "LITERAL_ACCESS", 
                             "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "BIN_INTEGER_LITERAL", 
                             "REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", 
                             "VERBATIUM_STRING", "INTERPOLATED_REGULAR_STRING_START", 
                             "INTERPOLATED_VERBATIUM_STRING_START", "OPEN_BRACE", 
                             "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
                             "OPEN_PARENS", "CLOSE_PARENS", "DOT", "COMMA", 
                             "COLON", "SEMICOLON", "PLUS", "MINUS", "STAR", 
                             "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", 
                             "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", 
                             "INTERR", "DOUBLE_COLON", "OP_COALESCING", 
                             "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", 
                             "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", 
                             "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", 
                             "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", 
                             "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", 
                             "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
                             "OP_RANGE", "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", 
                             "REGULAR_CHAR_INSIDE", "VERBATIUM_DOUBLE_QUOTE_INSIDE", 
                             "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", 
                             "VERBATIUM_INSIDE_STRING", "CLOSE_BRACE_INSIDE", 
                             "FORMAT_STRING", "DIRECTIVE_WHITESPACES", "DIGITS", 
                             "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", 
                             "ERROR", "WARNING", "REGION", "ENDREGION", 
                             "PRAGMA", "NULLABLE", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", 
                             "DIRECTIVE_NEW_LINE", "TEXT", "DOUBLE_CURLY_CLOSE_INSIDE" ];
    static ruleNames = [ "compilation_unit", "namespace_or_type_name", "type_", 
                         "base_type", "tuple_type", "tuple_element", "simple_type", 
                         "numeric_type", "integral_type", "floating_point_type", 
                         "class_type", "type_argument_list", "argument_list", 
                         "argument", "expression", "non_assignment_expression", 
                         "assignment", "assignment_operator", "conditional_expression", 
                         "null_coalescing_expression", "conditional_or_expression", 
                         "conditional_and_expression", "inclusive_or_expression", 
                         "exclusive_or_expression", "and_expression", "equality_expression", 
                         "relational_expression", "shift_expression", "additive_expression", 
                         "multiplicative_expression", "switch_expression", 
                         "switch_expression_arms", "switch_expression_arm", 
                         "range_expression", "unary_expression", "cast_expression", 
                         "primary_expression", "primary_expression_start", 
                         "throwable_expression", "throw_expression", "member_access", 
                         "bracket_expression", "indexer_argument", "predefined_type", 
                         "expression_list", "object_or_collection_initializer", 
                         "object_initializer", "member_initializer_list", 
                         "member_initializer", "initializer_value", "collection_initializer", 
                         "element_initializer", "anonymous_object_initializer", 
                         "member_declarator_list", "member_declarator", 
                         "unbound_type_name", "generic_dimension_specifier", 
                         "isType", "isTypePatternArms", "isTypePatternArm", 
                         "lambda_expression", "anonymous_function_signature", 
                         "explicit_anonymous_function_parameter_list", "explicit_anonymous_function_parameter", 
                         "implicit_anonymous_function_parameter_list", "anonymous_function_body", 
                         "query_expression", "from_clause", "query_body", 
                         "query_body_clause", "let_clause", "where_clause", 
                         "combined_join_clause", "orderby_clause", "ordering", 
                         "select_or_group_clause", "query_continuation", 
                         "statement", "declarationStatement", "local_function_declaration", 
                         "local_function_header", "local_function_modifiers", 
                         "local_function_body", "labeled_Statement", "embedded_statement", 
                         "simple_embedded_statement", "block", "local_variable_declaration", 
                         "local_variable_type", "local_variable_declarator", 
                         "local_variable_initializer", "local_constant_declaration", 
                         "if_body", "switch_section", "switch_label", "case_guard", 
                         "statement_list", "for_initializer", "for_iterator", 
                         "catch_clauses", "specific_catch_clause", "general_catch_clause", 
                         "exception_filter", "finally_clause", "resource_acquisition", 
                         "namespace_declaration", "qualified_identifier", 
                         "namespace_body", "extern_alias_directives", "extern_alias_directive", 
                         "using_directives", "using_directive", "namespace_member_declarations", 
                         "namespace_member_declaration", "type_declaration", 
                         "qualified_alias_member", "type_parameter_list", 
                         "type_parameter", "class_base", "interface_type_list", 
                         "type_parameter_constraints_clauses", "type_parameter_constraints_clause", 
                         "type_parameter_constraints", "primary_constraint", 
                         "secondary_constraints", "constructor_constraint", 
                         "class_body", "class_member_declarations", "class_member_declaration", 
                         "all_member_modifiers", "all_member_modifier", 
                         "common_member_declaration", "typed_member_declaration", 
                         "constant_declarators", "constant_declarator", 
                         "variable_declarators", "variable_declarator", 
                         "variable_initializer", "return_type", "member_name", 
                         "method_body", "formal_parameter_list", "fixed_parameters", 
                         "fixed_parameter", "parameter_modifier", "parameter_array", 
                         "accessor_declarations", "get_accessor_declaration", 
                         "set_accessor_declaration", "accessor_modifier", 
                         "accessor_body", "event_accessor_declarations", 
                         "add_accessor_declaration", "remove_accessor_declaration", 
                         "overloadable_operator", "conversion_operator_declarator", 
                         "constructor_initializer", "body", "struct_interfaces", 
                         "struct_body", "struct_member_declaration", "array_type", 
                         "rank_specifier", "array_initializer", "variant_type_parameter_list", 
                         "variant_type_parameter", "variance_annotation", 
                         "interface_base", "interface_body", "interface_member_declaration", 
                         "interface_accessors", "enum_base", "enum_body", 
                         "enum_member_declaration", "global_attribute_section", 
                         "global_attribute_target", "attributes", "attribute_section", 
                         "attribute_target", "attribute_list", "attribute", 
                         "attribute_argument", "pointer_type", "fixed_pointer_declarators", 
                         "fixed_pointer_declarator", "fixed_pointer_initializer", 
                         "fixed_size_buffer_declarator", "stackalloc_initializer", 
                         "right_arrow", "right_shift", "right_shift_assignment", 
                         "literal", "boolean_literal", "string_literal", 
                         "interpolated_regular_string", "interpolated_verbatium_string", 
                         "interpolated_regular_string_part", "interpolated_verbatium_string_part", 
                         "interpolated_string_expression", "keyword", "class_definition", 
                         "struct_definition", "interface_definition", "enum_definition", 
                         "delegate_definition", "event_declaration", "field_declaration", 
                         "property_declaration", "constant_declaration", 
                         "indexer_declaration", "destructor_definition", 
                         "constructor_declaration", "method_declaration", 
                         "method_member_name", "operator_declaration", "arg_declaration", 
                         "method_invocation", "object_creation_expression", 
                         "identifier" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CSharpParser.ruleNames;
        this.literalNames = CSharpParser.literalNames;
        this.symbolicNames = CSharpParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 87:
    	    		return this.local_variable_declaration_sempred(localctx, predIndex);
    	case 188:
    	    		return this.right_arrow_sempred(localctx, predIndex);
    	case 189:
    	    		return this.right_shift_sempred(localctx, predIndex);
    	case 190:
    	    		return this.right_shift_assignment_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    local_variable_declaration_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return  this.IsLocalVariableDeclaration() ;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    right_arrow_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return (localctx.first == null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second == null ? 0 : localctx.second.tokenIndex);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    right_shift_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return (localctx.first == null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second == null ? 0 : localctx.second.tokenIndex);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    right_shift_assignment_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return (localctx.first == null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second == null ? 0 : localctx.second.tokenIndex);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	compilation_unit() {
	    let localctx = new Compilation_unitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CSharpParser.RULE_compilation_unit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 439;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 438;
	            this.match(CSharpParser.BYTE_ORDER_MARK);
	        }

	        this.state = 442;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        if(la_===1) {
	            this.state = 441;
	            this.extern_alias_directives();

	        }
	        this.state = 445;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===105) {
	            this.state = 444;
	            this.using_directives();
	        }

	        this.state = 450;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 447;
	                this.global_attribute_section(); 
	            }
	            this.state = 452;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
	        }

	        this.state = 454;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2214625792) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 806879249) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 1074399485) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 1048581) !== 0)) {
	            this.state = 453;
	            this.namespace_member_declarations();
	        }

	        this.state = 456;
	        this.match(CSharpParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace_or_type_name() {
	    let localctx = new Namespace_or_type_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CSharpParser.RULE_namespace_or_type_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 463;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 458;
	            this.identifier();
	            this.state = 460;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	            if(la_===1) {
	                this.state = 459;
	                this.type_argument_list();

	            }
	            break;

	        case 2:
	            this.state = 462;
	            this.qualified_alias_member();
	            break;

	        }
	        this.state = 472;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 465;
	                this.match(CSharpParser.DOT);
	                this.state = 466;
	                this.identifier();
	                this.state = 468;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	                if(la_===1) {
	                    this.state = 467;
	                    this.type_argument_list();

	                } 
	            }
	            this.state = 474;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CSharpParser.RULE_type_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 475;
	        this.base_type();
	        this.state = 481;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 479;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 148:
	                    this.state = 476;
	                    this.match(CSharpParser.INTERR);
	                    break;
	                case 127:
	                    this.state = 477;
	                    this.rank_specifier();
	                    break;
	                case 137:
	                    this.state = 478;
	                    this.match(CSharpParser.STAR);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 483;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	base_type() {
	    let localctx = new Base_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CSharpParser.RULE_base_type);
	    try {
	        this.state = 489;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	        case 21:
	        case 24:
	        case 29:
	        case 34:
	        case 45:
	        case 55:
	        case 63:
	        case 83:
	        case 87:
	        case 99:
	        case 100:
	        case 104:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 484;
	            this.simple_type();
	            break;
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 20:
	        case 32:
	        case 35:
	        case 38:
	        case 48:
	        case 49:
	        case 51:
	        case 58:
	        case 60:
	        case 61:
	        case 64:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 81:
	        case 85:
	        case 86:
	        case 91:
	        case 102:
	        case 106:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 485;
	            this.class_type();
	            break;
	        case 108:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 486;
	            this.match(CSharpParser.VOID);
	            this.state = 487;
	            this.match(CSharpParser.STAR);
	            break;
	        case 129:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 488;
	            this.tuple_type();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_type() {
	    let localctx = new Tuple_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CSharpParser.RULE_tuple_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 491;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 492;
	        this.tuple_element();
	        this.state = 495; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 493;
	            this.match(CSharpParser.COMMA);
	            this.state = 494;
	            this.tuple_element();
	            this.state = 497; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===132);
	        this.state = 499;
	        this.match(CSharpParser.CLOSE_PARENS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_element() {
	    let localctx = new Tuple_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, CSharpParser.RULE_tuple_element);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 501;
	        this.type_();
	        this.state = 503;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1170432) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 873136201) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 6424737) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 6929) !== 0)) {
	            this.state = 502;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_type() {
	    let localctx = new Simple_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CSharpParser.RULE_simple_type);
	    try {
	        this.state = 507;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 21:
	        case 24:
	        case 29:
	        case 34:
	        case 45:
	        case 55:
	        case 63:
	        case 83:
	        case 87:
	        case 99:
	        case 100:
	        case 104:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 505;
	            this.numeric_type();
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 506;
	            this.match(CSharpParser.BOOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numeric_type() {
	    let localctx = new Numeric_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CSharpParser.RULE_numeric_type);
	    try {
	        this.state = 512;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 21:
	        case 24:
	        case 55:
	        case 63:
	        case 83:
	        case 87:
	        case 99:
	        case 100:
	        case 104:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 509;
	            this.integral_type();
	            break;
	        case 34:
	        case 45:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 510;
	            this.floating_point_type();
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 511;
	            this.match(CSharpParser.DECIMAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integral_type() {
	    let localctx = new Integral_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CSharpParser.RULE_integral_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 514;
	        _la = this._input.LA(1);
	        if(!(_la===21 || _la===24 || ((((_la - 55)) & ~0x1f) === 0 && ((1 << (_la - 55)) & 268435713) !== 0) || ((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 143361) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floating_point_type() {
	    let localctx = new Floating_point_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CSharpParser.RULE_floating_point_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 516;
	        _la = this._input.LA(1);
	        if(!(_la===34 || _la===45)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_type() {
	    let localctx = new Class_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CSharpParser.RULE_class_type);
	    try {
	        this.state = 522;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 518;
	            this.namespace_or_type_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 519;
	            this.match(CSharpParser.OBJECT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 520;
	            this.match(CSharpParser.DYNAMIC);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 521;
	            this.match(CSharpParser.STRING);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_argument_list() {
	    let localctx = new Type_argument_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CSharpParser.RULE_type_argument_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 524;
	        this.match(CSharpParser.LT);
	        this.state = 525;
	        this.type_();
	        this.state = 530;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 526;
	            this.match(CSharpParser.COMMA);
	            this.state = 527;
	            this.type_();
	            this.state = 532;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 533;
	        this.match(CSharpParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument_list() {
	    let localctx = new Argument_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CSharpParser.RULE_argument_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 535;
	        this.argument();
	        this.state = 540;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 536;
	            this.match(CSharpParser.COMMA);
	            this.state = 537;
	            this.argument();
	            this.state = 542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CSharpParser.RULE_argument);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 546;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        if(la_===1) {
	            this.state = 543;
	            this.identifier();
	            this.state = 544;
	            this.match(CSharpParser.COLON);

	        }
	        this.state = 549;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        if(la_===1) {
	            this.state = 548;
	            localctx.refout = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 67371009) !== 0))) {
	                localctx.refout = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 557;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 551;
	            this.expression();
	            break;

	        case 2:
	            this.state = 554;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 552;
	                this.match(CSharpParser.VAR);
	                break;

	            case 2:
	                this.state = 553;
	                this.type_();
	                break;

	            }
	            this.state = 556;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CSharpParser.RULE_expression);
	    try {
	        this.state = 563;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 559;
	            this.assignment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 560;
	            this.non_assignment_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 561;
	            this.match(CSharpParser.REF);
	            this.state = 562;
	            this.non_assignment_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	non_assignment_expression() {
	    let localctx = new Non_assignment_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, CSharpParser.RULE_non_assignment_expression);
	    try {
	        this.state = 568;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 565;
	            this.lambda_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 566;
	            this.query_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 567;
	            this.conditional_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CSharpParser.RULE_assignment);
	    try {
	        this.state = 578;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 570;
	            this.unary_expression();
	            this.state = 571;
	            this.assignment_operator();
	            this.state = 572;
	            this.expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 574;
	            this.unary_expression();
	            this.state = 575;
	            this.match(CSharpParser.OP_COALESCING_ASSIGNMENT);
	            this.state = 576;
	            this.throwable_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment_operator() {
	    let localctx = new Assignment_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CSharpParser.RULE_assignment_operator);
	    try {
	        this.state = 591;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 145:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 580;
	            this.match(CSharpParser.ASSIGNMENT);
	            break;
	        case 160:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 581;
	            this.match(CSharpParser.OP_ADD_ASSIGNMENT);
	            break;
	        case 161:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 582;
	            this.match(CSharpParser.OP_SUB_ASSIGNMENT);
	            break;
	        case 162:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 583;
	            this.match(CSharpParser.OP_MULT_ASSIGNMENT);
	            break;
	        case 163:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 584;
	            this.match(CSharpParser.OP_DIV_ASSIGNMENT);
	            break;
	        case 164:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 585;
	            this.match(CSharpParser.OP_MOD_ASSIGNMENT);
	            break;
	        case 165:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 586;
	            this.match(CSharpParser.OP_AND_ASSIGNMENT);
	            break;
	        case 166:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 587;
	            this.match(CSharpParser.OP_OR_ASSIGNMENT);
	            break;
	        case 167:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 588;
	            this.match(CSharpParser.OP_XOR_ASSIGNMENT);
	            break;
	        case 169:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 589;
	            this.match(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT);
	            break;
	        case 147:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 590;
	            this.right_shift_assignment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_expression() {
	    let localctx = new Conditional_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CSharpParser.RULE_conditional_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 593;
	        this.null_coalescing_expression();
	        this.state = 599;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        if(la_===1) {
	            this.state = 594;
	            this.match(CSharpParser.INTERR);
	            this.state = 595;
	            this.throwable_expression();
	            this.state = 596;
	            this.match(CSharpParser.COLON);
	            this.state = 597;
	            this.throwable_expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	null_coalescing_expression() {
	    let localctx = new Null_coalescing_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CSharpParser.RULE_null_coalescing_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 601;
	        this.conditional_or_expression();
	        this.state = 607;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        if(la_===1) {
	            this.state = 602;
	            this.match(CSharpParser.OP_COALESCING);
	            this.state = 605;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 10:
	            case 11:
	            case 12:
	            case 14:
	            case 15:
	            case 16:
	            case 17:
	            case 18:
	            case 20:
	            case 21:
	            case 24:
	            case 25:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 34:
	            case 35:
	            case 38:
	            case 42:
	            case 45:
	            case 48:
	            case 49:
	            case 51:
	            case 55:
	            case 58:
	            case 60:
	            case 61:
	            case 63:
	            case 64:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 71:
	            case 75:
	            case 81:
	            case 83:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 91:
	            case 94:
	            case 96:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 104:
	            case 106:
	            case 110:
	            case 111:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 129:
	            case 135:
	            case 136:
	            case 137:
	            case 140:
	            case 142:
	            case 143:
	            case 144:
	            case 151:
	            case 152:
	            case 171:
	                this.state = 603;
	                this.null_coalescing_expression();
	                break;
	            case 95:
	                this.state = 604;
	                this.throw_expression();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_or_expression() {
	    let localctx = new Conditional_or_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CSharpParser.RULE_conditional_or_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 609;
	        this.conditional_and_expression();
	        this.state = 614;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 610;
	                this.match(CSharpParser.OP_OR);
	                this.state = 611;
	                this.conditional_and_expression(); 
	            }
	            this.state = 616;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_and_expression() {
	    let localctx = new Conditional_and_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CSharpParser.RULE_conditional_and_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 617;
	        this.inclusive_or_expression();
	        this.state = 622;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 618;
	                this.match(CSharpParser.OP_AND);
	                this.state = 619;
	                this.inclusive_or_expression(); 
	            }
	            this.state = 624;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inclusive_or_expression() {
	    let localctx = new Inclusive_or_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CSharpParser.RULE_inclusive_or_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 625;
	        this.exclusive_or_expression();
	        this.state = 630;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,32,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 626;
	                this.match(CSharpParser.BITWISE_OR);
	                this.state = 627;
	                this.exclusive_or_expression(); 
	            }
	            this.state = 632;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,32,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exclusive_or_expression() {
	    let localctx = new Exclusive_or_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CSharpParser.RULE_exclusive_or_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 633;
	        this.and_expression();
	        this.state = 638;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 634;
	                this.match(CSharpParser.CARET);
	                this.state = 635;
	                this.and_expression(); 
	            }
	            this.state = 640;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	and_expression() {
	    let localctx = new And_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CSharpParser.RULE_and_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 641;
	        this.equality_expression();
	        this.state = 646;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 642;
	                this.match(CSharpParser.AMP);
	                this.state = 643;
	                this.equality_expression(); 
	            }
	            this.state = 648;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equality_expression() {
	    let localctx = new Equality_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, CSharpParser.RULE_equality_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 649;
	        this.relational_expression();
	        this.state = 654;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 650;
	                _la = this._input.LA(1);
	                if(!(_la===156 || _la===157)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 651;
	                this.relational_expression(); 
	            }
	            this.state = 656;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relational_expression() {
	    let localctx = new Relational_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CSharpParser.RULE_relational_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 657;
	        this.shift_expression();
	        this.state = 666;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 664;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 146:
	                case 147:
	                case 158:
	                case 159:
	                    this.state = 658;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 146)) & ~0x1f) === 0 && ((1 << (_la - 146)) & 12291) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 659;
	                    this.shift_expression();
	                    break;
	                case 59:
	                    this.state = 660;
	                    this.match(CSharpParser.IS);
	                    this.state = 661;
	                    this.isType();
	                    break;
	                case 13:
	                    this.state = 662;
	                    this.match(CSharpParser.AS);
	                    this.state = 663;
	                    this.type_();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 668;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shift_expression() {
	    let localctx = new Shift_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CSharpParser.RULE_shift_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 669;
	        this.additive_expression();
	        this.state = 677;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 672;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 168:
	                    this.state = 670;
	                    this.match(CSharpParser.OP_LEFT_SHIFT);
	                    break;
	                case 147:
	                    this.state = 671;
	                    this.right_shift();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 674;
	                this.additive_expression(); 
	            }
	            this.state = 679;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additive_expression() {
	    let localctx = new Additive_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CSharpParser.RULE_additive_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 680;
	        this.multiplicative_expression();
	        this.state = 685;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 681;
	                _la = this._input.LA(1);
	                if(!(_la===135 || _la===136)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 682;
	                this.multiplicative_expression(); 
	            }
	            this.state = 687;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicative_expression() {
	    let localctx = new Multiplicative_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CSharpParser.RULE_multiplicative_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 688;
	        this.switch_expression();
	        this.state = 693;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 689;
	                _la = this._input.LA(1);
	                if(!(((((_la - 137)) & ~0x1f) === 0 && ((1 << (_la - 137)) & 7) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 690;
	                this.switch_expression(); 
	            }
	            this.state = 695;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_expression() {
	    let localctx = new Switch_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CSharpParser.RULE_switch_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 696;
	        this.range_expression();
	        this.state = 706;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        if(la_===1) {
	            this.state = 697;
	            this.match(CSharpParser.SWITCH);
	            this.state = 698;
	            this.match(CSharpParser.OPEN_BRACE);
	            this.state = 703;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 326684151) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 795681481) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 2947104097) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 1309179899) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 536872455) !== 0)) {
	                this.state = 699;
	                this.switch_expression_arms();
	                this.state = 701;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===132) {
	                    this.state = 700;
	                    this.match(CSharpParser.COMMA);
	                }

	            }

	            this.state = 705;
	            this.match(CSharpParser.CLOSE_BRACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_expression_arms() {
	    let localctx = new Switch_expression_armsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CSharpParser.RULE_switch_expression_arms);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 708;
	        this.switch_expression_arm();
	        this.state = 713;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 709;
	                this.match(CSharpParser.COMMA);
	                this.state = 710;
	                this.switch_expression_arm(); 
	            }
	            this.state = 715;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_expression_arm() {
	    let localctx = new Switch_expression_armContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CSharpParser.RULE_switch_expression_arm);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 716;
	        this.expression();
	        this.state = 718;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===110) {
	            this.state = 717;
	            this.case_guard();
	        }

	        this.state = 720;
	        this.right_arrow();
	        this.state = 721;
	        this.throwable_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	range_expression() {
	    let localctx = new Range_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CSharpParser.RULE_range_expression);
	    var _la = 0;
	    try {
	        this.state = 731;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 723;
	            this.unary_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 725;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3812088832) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3029017677) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 1240074429) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 536790397) !== 0) || ((((_la - 129)) & ~0x1f) === 0 && ((1 << (_la - 129)) & 12642753) !== 0)) {
	                this.state = 724;
	                this.unary_expression();
	            }

	            this.state = 727;
	            this.match(CSharpParser.OP_RANGE);
	            this.state = 729;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	            if(la_===1) {
	                this.state = 728;
	                this.unary_expression();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_expression() {
	    let localctx = new Unary_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CSharpParser.RULE_unary_expression);
	    try {
	        this.state = 755;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 733;
	            this.cast_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 734;
	            this.primary_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 735;
	            this.match(CSharpParser.PLUS);
	            this.state = 736;
	            this.unary_expression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 737;
	            this.match(CSharpParser.MINUS);
	            this.state = 738;
	            this.unary_expression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 739;
	            this.match(CSharpParser.BANG);
	            this.state = 740;
	            this.unary_expression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 741;
	            this.match(CSharpParser.TILDE);
	            this.state = 742;
	            this.unary_expression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 743;
	            this.match(CSharpParser.OP_INC);
	            this.state = 744;
	            this.unary_expression();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 745;
	            this.match(CSharpParser.OP_DEC);
	            this.state = 746;
	            this.unary_expression();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 747;
	            this.match(CSharpParser.AWAIT);
	            this.state = 748;
	            this.unary_expression();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 749;
	            this.match(CSharpParser.AMP);
	            this.state = 750;
	            this.unary_expression();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 751;
	            this.match(CSharpParser.STAR);
	            this.state = 752;
	            this.unary_expression();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 753;
	            this.match(CSharpParser.CARET);
	            this.state = 754;
	            this.unary_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cast_expression() {
	    let localctx = new Cast_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CSharpParser.RULE_cast_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 757;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 758;
	        this.type_();
	        this.state = 759;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 760;
	        this.unary_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary_expression() {
	    let localctx = new Primary_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CSharpParser.RULE_primary_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 762;
	        localctx.pe = this.primary_expression_start();
	        this.state = 764;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        if(la_===1) {
	            this.state = 763;
	            this.match(CSharpParser.BANG);

	        }
	        this.state = 769;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 766;
	                this.bracket_expression(); 
	            }
	            this.state = 771;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
	        }

	        this.state = 773;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        if(la_===1) {
	            this.state = 772;
	            this.match(CSharpParser.BANG);

	        }
	        this.state = 797;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 781;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 131:
	                case 148:
	                    this.state = 775;
	                    this.member_access();
	                    break;
	                case 129:
	                    this.state = 776;
	                    this.method_invocation();
	                    break;
	                case 151:
	                    this.state = 777;
	                    this.match(CSharpParser.OP_INC);
	                    break;
	                case 152:
	                    this.state = 778;
	                    this.match(CSharpParser.OP_DEC);
	                    break;
	                case 155:
	                    this.state = 779;
	                    this.match(CSharpParser.OP_PTR);
	                    this.state = 780;
	                    this.identifier();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 784;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	                if(la_===1) {
	                    this.state = 783;
	                    this.match(CSharpParser.BANG);

	                }
	                this.state = 789;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 786;
	                        this.bracket_expression(); 
	                    }
	                    this.state = 791;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
	                }

	                this.state = 793;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	                if(la_===1) {
	                    this.state = 792;
	                    this.match(CSharpParser.BANG);

	                } 
	            }
	            this.state = 799;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary_expression_start() {
	    let localctx = new Primary_expression_startContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CSharpParser.RULE_primary_expression_start);
	    var _la = 0;
	    try {
	        this.state = 921;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new LiteralExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 800;
	            this.literal();
	            break;

	        case 2:
	            localctx = new SimpleNameExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 801;
	            this.identifier();
	            this.state = 803;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	            if(la_===1) {
	                this.state = 802;
	                this.type_argument_list();

	            }
	            break;

	        case 3:
	            localctx = new ParenthesisExpressionsContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 805;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 806;
	            this.expression();
	            this.state = 807;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 4:
	            localctx = new MemberAccessExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 809;
	            this.predefined_type();
	            break;

	        case 5:
	            localctx = new MemberAccessExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 810;
	            this.qualified_alias_member();
	            break;

	        case 6:
	            localctx = new LiteralAccessExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 811;
	            this.match(CSharpParser.LITERAL_ACCESS);
	            break;

	        case 7:
	            localctx = new ThisReferenceExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 812;
	            this.match(CSharpParser.THIS);
	            break;

	        case 8:
	            localctx = new BaseAccessExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 813;
	            this.match(CSharpParser.BASE);
	            this.state = 823;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 131:
	                this.state = 814;
	                this.match(CSharpParser.DOT);
	                this.state = 815;
	                this.identifier();
	                this.state = 817;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	                if(la_===1) {
	                    this.state = 816;
	                    this.type_argument_list();

	                }
	                break;
	            case 127:
	                this.state = 819;
	                this.match(CSharpParser.OPEN_BRACKET);
	                this.state = 820;
	                this.expression_list();
	                this.state = 821;
	                this.match(CSharpParser.CLOSE_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 9:
	            localctx = new ObjectCreationExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 825;
	            this.match(CSharpParser.NEW);
	            this.state = 854;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 10:
	            case 11:
	            case 12:
	            case 14:
	            case 15:
	            case 16:
	            case 18:
	            case 20:
	            case 21:
	            case 24:
	            case 29:
	            case 32:
	            case 34:
	            case 35:
	            case 38:
	            case 45:
	            case 48:
	            case 49:
	            case 51:
	            case 55:
	            case 58:
	            case 60:
	            case 61:
	            case 63:
	            case 64:
	            case 68:
	            case 69:
	            case 71:
	            case 75:
	            case 81:
	            case 83:
	            case 85:
	            case 86:
	            case 87:
	            case 91:
	            case 99:
	            case 100:
	            case 102:
	            case 104:
	            case 106:
	            case 108:
	            case 110:
	            case 111:
	            case 113:
	            case 114:
	            case 129:
	                this.state = 826;
	                this.type_();
	                this.state = 848;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 827;
	                    this.object_creation_expression();
	                    break;

	                case 2:
	                    this.state = 828;
	                    this.object_or_collection_initializer();
	                    break;

	                case 3:
	                    this.state = 829;
	                    this.match(CSharpParser.OPEN_BRACKET);
	                    this.state = 830;
	                    this.expression_list();
	                    this.state = 831;
	                    this.match(CSharpParser.CLOSE_BRACKET);
	                    this.state = 835;
	                    this._errHandler.sync(this);
	                    var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
	                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                        if(_alt===1) {
	                            this.state = 832;
	                            this.rank_specifier(); 
	                        }
	                        this.state = 837;
	                        this._errHandler.sync(this);
	                        _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
	                    }

	                    this.state = 839;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	                    if(la_===1) {
	                        this.state = 838;
	                        this.array_initializer();

	                    }
	                    break;

	                case 4:
	                    this.state = 842; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    do {
	                        this.state = 841;
	                        this.rank_specifier();
	                        this.state = 844; 
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    } while(_la===127);
	                    this.state = 846;
	                    this.array_initializer();
	                    break;

	                }
	                break;
	            case 125:
	                this.state = 850;
	                this.anonymous_object_initializer();
	                break;
	            case 127:
	                this.state = 851;
	                this.rank_specifier();
	                this.state = 852;
	                this.array_initializer();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 10:
	            localctx = new TupleExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 856;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 857;
	            this.argument();
	            this.state = 860; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 858;
	                this.match(CSharpParser.COMMA);
	                this.state = 859;
	                this.argument();
	                this.state = 862; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===132);
	            this.state = 864;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 11:
	            localctx = new TypeofExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 866;
	            this.match(CSharpParser.TYPEOF);
	            this.state = 867;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 871;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 868;
	                this.unbound_type_name();
	                break;

	            case 2:
	                this.state = 869;
	                this.type_();
	                break;

	            case 3:
	                this.state = 870;
	                this.match(CSharpParser.VOID);
	                break;

	            }
	            this.state = 873;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 12:
	            localctx = new CheckedExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 874;
	            this.match(CSharpParser.CHECKED);
	            this.state = 875;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 876;
	            this.expression();
	            this.state = 877;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 13:
	            localctx = new UncheckedExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 879;
	            this.match(CSharpParser.UNCHECKED);
	            this.state = 880;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 881;
	            this.expression();
	            this.state = 882;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 14:
	            localctx = new DefaultValueExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 884;
	            this.match(CSharpParser.DEFAULT);
	            this.state = 889;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	            if(la_===1) {
	                this.state = 885;
	                this.match(CSharpParser.OPEN_PARENS);
	                this.state = 886;
	                this.type_();
	                this.state = 887;
	                this.match(CSharpParser.CLOSE_PARENS);

	            }
	            break;

	        case 15:
	            localctx = new AnonymousMethodExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 892;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===15) {
	                this.state = 891;
	                this.match(CSharpParser.ASYNC);
	            }

	            this.state = 894;
	            this.match(CSharpParser.DELEGATE);
	            this.state = 900;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===129) {
	                this.state = 895;
	                this.match(CSharpParser.OPEN_PARENS);
	                this.state = 897;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 557177856) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3033210957) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 149621169) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 1073797803) !== 0)) {
	                    this.state = 896;
	                    this.explicit_anonymous_function_parameter_list();
	                }

	                this.state = 899;
	                this.match(CSharpParser.CLOSE_PARENS);
	            }

	            this.state = 902;
	            this.block();
	            break;

	        case 16:
	            localctx = new SizeofExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 903;
	            this.match(CSharpParser.SIZEOF);
	            this.state = 904;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 905;
	            this.type_();
	            this.state = 906;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 17:
	            localctx = new NameofExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 908;
	            this.match(CSharpParser.NAMEOF);
	            this.state = 909;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 915;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 910;
	                    this.identifier();
	                    this.state = 911;
	                    this.match(CSharpParser.DOT); 
	                }
	                this.state = 917;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
	            }

	            this.state = 918;
	            this.identifier();
	            this.state = 919;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwable_expression() {
	    let localctx = new Throwable_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CSharpParser.RULE_throwable_expression);
	    try {
	        this.state = 925;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 20:
	        case 21:
	        case 24:
	        case 25:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 38:
	        case 42:
	        case 45:
	        case 48:
	        case 49:
	        case 51:
	        case 55:
	        case 58:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 80:
	        case 81:
	        case 83:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 91:
	        case 94:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 104:
	        case 106:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 129:
	        case 135:
	        case 136:
	        case 137:
	        case 140:
	        case 142:
	        case 143:
	        case 144:
	        case 151:
	        case 152:
	        case 171:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 923;
	            this.expression();
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 924;
	            this.throw_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throw_expression() {
	    let localctx = new Throw_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CSharpParser.RULE_throw_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 927;
	        this.match(CSharpParser.THROW);
	        this.state = 928;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_access() {
	    let localctx = new Member_accessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CSharpParser.RULE_member_access);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 931;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148) {
	            this.state = 930;
	            this.match(CSharpParser.INTERR);
	        }

	        this.state = 933;
	        this.match(CSharpParser.DOT);
	        this.state = 934;
	        this.identifier();
	        this.state = 936;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        if(la_===1) {
	            this.state = 935;
	            this.type_argument_list();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bracket_expression() {
	    let localctx = new Bracket_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CSharpParser.RULE_bracket_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 939;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148) {
	            this.state = 938;
	            this.match(CSharpParser.INTERR);
	        }

	        this.state = 941;
	        this.match(CSharpParser.OPEN_BRACKET);
	        this.state = 942;
	        this.indexer_argument();
	        this.state = 947;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 943;
	            this.match(CSharpParser.COMMA);
	            this.state = 944;
	            this.indexer_argument();
	            this.state = 949;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 950;
	        this.match(CSharpParser.CLOSE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexer_argument() {
	    let localctx = new Indexer_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CSharpParser.RULE_indexer_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 955;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        if(la_===1) {
	            this.state = 952;
	            this.identifier();
	            this.state = 953;
	            this.match(CSharpParser.COLON);

	        }
	        this.state = 957;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefined_type() {
	    let localctx = new Predefined_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CSharpParser.RULE_predefined_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 959;
	        _la = this._input.LA(1);
	        if(!(((((_la - 18)) & ~0x1f) === 0 && ((1 << (_la - 18)) & 134285385) !== 0) || ((((_la - 55)) & ~0x1f) === 0 && ((1 << (_la - 55)) & 268443905) !== 0) || ((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 143377) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression_list() {
	    let localctx = new Expression_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CSharpParser.RULE_expression_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 961;
	        this.expression();
	        this.state = 966;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 962;
	            this.match(CSharpParser.COMMA);
	            this.state = 963;
	            this.expression();
	            this.state = 968;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_or_collection_initializer() {
	    let localctx = new Object_or_collection_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CSharpParser.RULE_object_or_collection_initializer);
	    try {
	        this.state = 971;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 969;
	            this.object_initializer();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 970;
	            this.collection_initializer();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_initializer() {
	    let localctx = new Object_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CSharpParser.RULE_object_initializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 973;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 978;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1170432) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 873136201) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 6424737) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 33561361) !== 0)) {
	            this.state = 974;
	            this.member_initializer_list();
	            this.state = 976;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 975;
	                this.match(CSharpParser.COMMA);
	            }

	        }

	        this.state = 980;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_initializer_list() {
	    let localctx = new Member_initializer_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CSharpParser.RULE_member_initializer_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 982;
	        this.member_initializer();
	        this.state = 987;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 983;
	                this.match(CSharpParser.COMMA);
	                this.state = 984;
	                this.member_initializer(); 
	            }
	            this.state = 989;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_initializer() {
	    let localctx = new Member_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, CSharpParser.RULE_member_initializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 995;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 20:
	        case 32:
	        case 35:
	        case 38:
	        case 48:
	        case 49:
	        case 51:
	        case 58:
	        case 60:
	        case 61:
	        case 64:
	        case 69:
	        case 71:
	        case 75:
	        case 81:
	        case 85:
	        case 86:
	        case 102:
	        case 106:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	            this.state = 990;
	            this.identifier();
	            break;
	        case 127:
	            this.state = 991;
	            this.match(CSharpParser.OPEN_BRACKET);
	            this.state = 992;
	            this.expression();
	            this.state = 993;
	            this.match(CSharpParser.CLOSE_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 997;
	        this.match(CSharpParser.ASSIGNMENT);
	        this.state = 998;
	        this.initializer_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializer_value() {
	    let localctx = new Initializer_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CSharpParser.RULE_initializer_value);
	    try {
	        this.state = 1002;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 20:
	        case 21:
	        case 24:
	        case 25:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 38:
	        case 42:
	        case 45:
	        case 48:
	        case 49:
	        case 51:
	        case 55:
	        case 58:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 80:
	        case 81:
	        case 83:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 91:
	        case 94:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 104:
	        case 106:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 129:
	        case 135:
	        case 136:
	        case 137:
	        case 140:
	        case 142:
	        case 143:
	        case 144:
	        case 151:
	        case 152:
	        case 171:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1000;
	            this.expression();
	            break;
	        case 125:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1001;
	            this.object_or_collection_initializer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collection_initializer() {
	    let localctx = new Collection_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CSharpParser.RULE_collection_initializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1004;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 1005;
	        this.element_initializer();
	        this.state = 1010;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1006;
	                this.match(CSharpParser.COMMA);
	                this.state = 1007;
	                this.element_initializer(); 
	            }
	            this.state = 1012;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
	        }

	        this.state = 1014;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===132) {
	            this.state = 1013;
	            this.match(CSharpParser.COMMA);
	        }

	        this.state = 1016;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_initializer() {
	    let localctx = new Element_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CSharpParser.RULE_element_initializer);
	    try {
	        this.state = 1023;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 20:
	        case 21:
	        case 24:
	        case 25:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 38:
	        case 42:
	        case 45:
	        case 48:
	        case 49:
	        case 51:
	        case 55:
	        case 58:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 81:
	        case 83:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 91:
	        case 94:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 104:
	        case 106:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 129:
	        case 135:
	        case 136:
	        case 137:
	        case 140:
	        case 142:
	        case 143:
	        case 144:
	        case 151:
	        case 152:
	        case 171:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1018;
	            this.non_assignment_expression();
	            break;
	        case 125:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1019;
	            this.match(CSharpParser.OPEN_BRACE);
	            this.state = 1020;
	            this.expression_list();
	            this.state = 1021;
	            this.match(CSharpParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anonymous_object_initializer() {
	    let localctx = new Anonymous_object_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CSharpParser.RULE_anonymous_object_initializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1025;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 1030;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 326684151) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 795681481) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 2947104065) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 557051) !== 0)) {
	            this.state = 1026;
	            this.member_declarator_list();
	            this.state = 1028;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 1027;
	                this.match(CSharpParser.COMMA);
	            }

	        }

	        this.state = 1032;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_declarator_list() {
	    let localctx = new Member_declarator_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CSharpParser.RULE_member_declarator_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1034;
	        this.member_declarator();
	        this.state = 1039;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1035;
	                this.match(CSharpParser.COMMA);
	                this.state = 1036;
	                this.member_declarator(); 
	            }
	            this.state = 1041;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_declarator() {
	    let localctx = new Member_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CSharpParser.RULE_member_declarator);
	    try {
	        this.state = 1047;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1042;
	            this.primary_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1043;
	            this.identifier();
	            this.state = 1044;
	            this.match(CSharpParser.ASSIGNMENT);
	            this.state = 1045;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbound_type_name() {
	    let localctx = new Unbound_type_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CSharpParser.RULE_unbound_type_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1049;
	        this.identifier();
	        this.state = 1058;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 130:
	        case 131:
	        case 146:
	            this.state = 1051;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===146) {
	                this.state = 1050;
	                this.generic_dimension_specifier();
	            }

	            break;
	        case 149:
	            this.state = 1053;
	            this.match(CSharpParser.DOUBLE_COLON);
	            this.state = 1054;
	            this.identifier();
	            this.state = 1056;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===146) {
	                this.state = 1055;
	                this.generic_dimension_specifier();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1067;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===131) {
	            this.state = 1060;
	            this.match(CSharpParser.DOT);
	            this.state = 1061;
	            this.identifier();
	            this.state = 1063;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===146) {
	                this.state = 1062;
	                this.generic_dimension_specifier();
	            }

	            this.state = 1069;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_dimension_specifier() {
	    let localctx = new Generic_dimension_specifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CSharpParser.RULE_generic_dimension_specifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1070;
	        this.match(CSharpParser.LT);
	        this.state = 1074;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 1071;
	            this.match(CSharpParser.COMMA);
	            this.state = 1076;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1077;
	        this.match(CSharpParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isType() {
	    let localctx = new IsTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CSharpParser.RULE_isType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1079;
	        this.base_type();
	        this.state = 1084;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1082;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 127:
	                    this.state = 1080;
	                    this.rank_specifier();
	                    break;
	                case 137:
	                    this.state = 1081;
	                    this.match(CSharpParser.STAR);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1086;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
	        }

	        this.state = 1088;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        if(la_===1) {
	            this.state = 1087;
	            this.match(CSharpParser.INTERR);

	        }
	        this.state = 1091;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        if(la_===1) {
	            this.state = 1090;
	            this.isTypePatternArms();

	        }
	        this.state = 1094;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        if(la_===1) {
	            this.state = 1093;
	            this.identifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isTypePatternArms() {
	    let localctx = new IsTypePatternArmsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CSharpParser.RULE_isTypePatternArms);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1096;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 1097;
	        this.isTypePatternArm();
	        this.state = 1102;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 1098;
	            this.match(CSharpParser.COMMA);
	            this.state = 1099;
	            this.isTypePatternArm();
	            this.state = 1104;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1105;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isTypePatternArm() {
	    let localctx = new IsTypePatternArmContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CSharpParser.RULE_isTypePatternArm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1107;
	        this.identifier();
	        this.state = 1108;
	        this.match(CSharpParser.COLON);
	        this.state = 1109;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_expression() {
	    let localctx = new Lambda_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CSharpParser.RULE_lambda_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1112;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        if(la_===1) {
	            this.state = 1111;
	            this.match(CSharpParser.ASYNC);

	        }
	        this.state = 1114;
	        this.anonymous_function_signature();
	        this.state = 1115;
	        this.right_arrow();
	        this.state = 1116;
	        this.anonymous_function_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anonymous_function_signature() {
	    let localctx = new Anonymous_function_signatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CSharpParser.RULE_anonymous_function_signature);
	    try {
	        this.state = 1129;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1118;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1119;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1120;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1121;
	            this.explicit_anonymous_function_parameter_list();
	            this.state = 1122;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1124;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1125;
	            this.implicit_anonymous_function_parameter_list();
	            this.state = 1126;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1128;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicit_anonymous_function_parameter_list() {
	    let localctx = new Explicit_anonymous_function_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, CSharpParser.RULE_explicit_anonymous_function_parameter_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1131;
	        this.explicit_anonymous_function_parameter();
	        this.state = 1136;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 1132;
	            this.match(CSharpParser.COMMA);
	            this.state = 1133;
	            this.explicit_anonymous_function_parameter();
	            this.state = 1138;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicit_anonymous_function_parameter() {
	    let localctx = new Explicit_anonymous_function_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, CSharpParser.RULE_explicit_anonymous_function_parameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1140;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 67371009) !== 0)) {
	            this.state = 1139;
	            localctx.refout = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 67371009) !== 0))) {
	                localctx.refout = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1142;
	        this.type_();
	        this.state = 1143;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicit_anonymous_function_parameter_list() {
	    let localctx = new Implicit_anonymous_function_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CSharpParser.RULE_implicit_anonymous_function_parameter_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1145;
	        this.identifier();
	        this.state = 1150;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 1146;
	            this.match(CSharpParser.COMMA);
	            this.state = 1147;
	            this.identifier();
	            this.state = 1152;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anonymous_function_body() {
	    let localctx = new Anonymous_function_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CSharpParser.RULE_anonymous_function_body);
	    try {
	        this.state = 1155;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 20:
	        case 21:
	        case 24:
	        case 25:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 38:
	        case 42:
	        case 45:
	        case 48:
	        case 49:
	        case 51:
	        case 55:
	        case 58:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 80:
	        case 81:
	        case 83:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 91:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 104:
	        case 106:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 129:
	        case 135:
	        case 136:
	        case 137:
	        case 140:
	        case 142:
	        case 143:
	        case 144:
	        case 151:
	        case 152:
	        case 171:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1153;
	            this.throwable_expression();
	            break;
	        case 125:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1154;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query_expression() {
	    let localctx = new Query_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CSharpParser.RULE_query_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1157;
	        this.from_clause();
	        this.state = 1158;
	        this.query_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	from_clause() {
	    let localctx = new From_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CSharpParser.RULE_from_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1160;
	        this.match(CSharpParser.FROM);
	        this.state = 1162;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        if(la_===1) {
	            this.state = 1161;
	            this.type_();

	        }
	        this.state = 1164;
	        this.identifier();
	        this.state = 1165;
	        this.match(CSharpParser.IN);
	        this.state = 1166;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query_body() {
	    let localctx = new Query_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CSharpParser.RULE_query_body);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1171;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 48)) & ~0x1f) === 0 && ((1 << (_la - 48)) & 8400897) !== 0) || _la===111) {
	            this.state = 1168;
	            this.query_body_clause();
	            this.state = 1173;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1174;
	        this.select_or_group_clause();
	        this.state = 1176;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        if(la_===1) {
	            this.state = 1175;
	            this.query_continuation();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query_body_clause() {
	    let localctx = new Query_body_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CSharpParser.RULE_query_body_clause);
	    try {
	        this.state = 1183;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 48:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1178;
	            this.from_clause();
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1179;
	            this.let_clause();
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1180;
	            this.where_clause();
	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1181;
	            this.combined_join_clause();
	            break;
	        case 71:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1182;
	            this.orderby_clause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	let_clause() {
	    let localctx = new Let_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CSharpParser.RULE_let_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1185;
	        this.match(CSharpParser.LET);
	        this.state = 1186;
	        this.identifier();
	        this.state = 1187;
	        this.match(CSharpParser.ASSIGNMENT);
	        this.state = 1188;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	where_clause() {
	    let localctx = new Where_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CSharpParser.RULE_where_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1190;
	        this.match(CSharpParser.WHERE);
	        this.state = 1191;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	combined_join_clause() {
	    let localctx = new Combined_join_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CSharpParser.RULE_combined_join_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1193;
	        this.match(CSharpParser.JOIN);
	        this.state = 1195;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        if(la_===1) {
	            this.state = 1194;
	            this.type_();

	        }
	        this.state = 1197;
	        this.identifier();
	        this.state = 1198;
	        this.match(CSharpParser.IN);
	        this.state = 1199;
	        this.expression();
	        this.state = 1200;
	        this.match(CSharpParser.ON);
	        this.state = 1201;
	        this.expression();
	        this.state = 1202;
	        this.match(CSharpParser.EQUALS);
	        this.state = 1203;
	        this.expression();
	        this.state = 1206;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 1204;
	            this.match(CSharpParser.INTO);
	            this.state = 1205;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderby_clause() {
	    let localctx = new Orderby_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CSharpParser.RULE_orderby_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1208;
	        this.match(CSharpParser.ORDERBY);
	        this.state = 1209;
	        this.ordering();
	        this.state = 1214;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 1210;
	            this.match(CSharpParser.COMMA);
	            this.state = 1211;
	            this.ordering();
	            this.state = 1216;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordering() {
	    let localctx = new OrderingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CSharpParser.RULE_ordering);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1217;
	        this.expression();
	        this.state = 1219;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===14 || _la===32) {
	            this.state = 1218;
	            localctx.dir = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===14 || _la===32)) {
	                localctx.dir = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_or_group_clause() {
	    let localctx = new Select_or_group_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CSharpParser.RULE_select_or_group_clause);
	    try {
	        this.state = 1228;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 85:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1221;
	            this.match(CSharpParser.SELECT);
	            this.state = 1222;
	            this.expression();
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1223;
	            this.match(CSharpParser.GROUP);
	            this.state = 1224;
	            this.expression();
	            this.state = 1225;
	            this.match(CSharpParser.BY);
	            this.state = 1226;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query_continuation() {
	    let localctx = new Query_continuationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CSharpParser.RULE_query_continuation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1230;
	        this.match(CSharpParser.INTO);
	        this.state = 1231;
	        this.identifier();
	        this.state = 1232;
	        this.query_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CSharpParser.RULE_statement);
	    try {
	        this.state = 1237;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1234;
	            this.labeled_Statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1235;
	            this.declarationStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1236;
	            this.embedded_statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationStatement() {
	    let localctx = new DeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CSharpParser.RULE_declarationStatement);
	    try {
	        this.state = 1246;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1239;
	            this.local_variable_declaration();
	            this.state = 1240;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1242;
	            this.local_constant_declaration();
	            this.state = 1243;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1245;
	            this.local_function_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_function_declaration() {
	    let localctx = new Local_function_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CSharpParser.RULE_local_function_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1248;
	        this.local_function_header();
	        this.state = 1249;
	        this.local_function_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_function_header() {
	    let localctx = new Local_function_headerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CSharpParser.RULE_local_function_header);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1252;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        if(la_===1) {
	            this.state = 1251;
	            this.local_function_modifiers();

	        }
	        this.state = 1254;
	        this.return_type();
	        this.state = 1255;
	        this.identifier();
	        this.state = 1257;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 1256;
	            this.type_parameter_list();
	        }

	        this.state = 1259;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 1261;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 557177856) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3033210957) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 1223364017) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 1342233259) !== 0)) {
	            this.state = 1260;
	            this.formal_parameter_list();
	        }

	        this.state = 1263;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 1265;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===111) {
	            this.state = 1264;
	            this.type_parameter_constraints_clauses();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_function_modifiers() {
	    let localctx = new Local_function_modifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CSharpParser.RULE_local_function_modifiers);
	    var _la = 0;
	    try {
	        this.state = 1273;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1267;
	            _la = this._input.LA(1);
	            if(!(_la===15 || _la===103)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1269;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 1268;
	                this.match(CSharpParser.STATIC);
	            }

	            break;
	        case 90:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1271;
	            this.match(CSharpParser.STATIC);
	            this.state = 1272;
	            _la = this._input.LA(1);
	            if(!(_la===15 || _la===103)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_function_body() {
	    let localctx = new Local_function_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CSharpParser.RULE_local_function_body);
	    try {
	        this.state = 1280;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 125:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1275;
	            this.block();
	            break;
	        case 145:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1276;
	            this.right_arrow();
	            this.state = 1277;
	            this.throwable_expression();
	            this.state = 1278;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeled_Statement() {
	    let localctx = new Labeled_StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CSharpParser.RULE_labeled_Statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1282;
	        this.identifier();
	        this.state = 1283;
	        this.match(CSharpParser.COLON);
	        this.state = 1284;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	embedded_statement() {
	    let localctx = new Embedded_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CSharpParser.RULE_embedded_statement);
	    try {
	        this.state = 1288;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 125:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1286;
	            this.block();
	            break;
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 24:
	        case 25:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 38:
	        case 42:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 55:
	        case 58:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 91:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 129:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 140:
	        case 142:
	        case 143:
	        case 144:
	        case 151:
	        case 152:
	        case 171:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1287;
	            this.simple_embedded_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_embedded_statement() {
	    let localctx = new Simple_embedded_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, CSharpParser.RULE_simple_embedded_statement);
	    var _la = 0;
	    try {
	        this.state = 1420;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TheEmptyStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1290;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 2:
	            localctx = new ExpressionStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1291;
	            this.expression();
	            this.state = 1292;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 3:
	            localctx = new IfStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1294;
	            this.match(CSharpParser.IF);
	            this.state = 1295;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1296;
	            this.expression();
	            this.state = 1297;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1298;
	            this.if_body();
	            this.state = 1301;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	            if(la_===1) {
	                this.state = 1299;
	                this.match(CSharpParser.ELSE);
	                this.state = 1300;
	                this.if_body();

	            }
	            break;

	        case 4:
	            localctx = new SwitchStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1303;
	            this.match(CSharpParser.SWITCH);
	            this.state = 1304;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1305;
	            this.expression();
	            this.state = 1306;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1307;
	            this.match(CSharpParser.OPEN_BRACE);
	            this.state = 1311;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===22 || _la===30) {
	                this.state = 1308;
	                this.switch_section();
	                this.state = 1313;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1314;
	            this.match(CSharpParser.CLOSE_BRACE);
	            break;

	        case 5:
	            localctx = new WhileStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1316;
	            this.match(CSharpParser.WHILE);
	            this.state = 1317;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1318;
	            this.expression();
	            this.state = 1319;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1320;
	            this.embedded_statement();
	            break;

	        case 6:
	            localctx = new DoStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1322;
	            this.match(CSharpParser.DO);
	            this.state = 1323;
	            this.embedded_statement();
	            this.state = 1324;
	            this.match(CSharpParser.WHILE);
	            this.state = 1325;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1326;
	            this.expression();
	            this.state = 1327;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1328;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 7:
	            localctx = new ForStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1330;
	            this.match(CSharpParser.FOR);
	            this.state = 1331;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1333;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 326684151) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 795681485) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 4020845921) !== 0) || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 941752301) !== 0) || ((((_la - 140)) & ~0x1f) === 0 && ((1 << (_la - 140)) & 2147489821) !== 0)) {
	                this.state = 1332;
	                this.for_initializer();
	            }

	            this.state = 1335;
	            this.match(CSharpParser.SEMICOLON);
	            this.state = 1337;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 326684151) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 795681481) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 2947104097) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 1309179899) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 536872455) !== 0)) {
	                this.state = 1336;
	                this.expression();
	            }

	            this.state = 1339;
	            this.match(CSharpParser.SEMICOLON);
	            this.state = 1341;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 326684151) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 795681481) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 2947104097) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 1309179899) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 536872455) !== 0)) {
	                this.state = 1340;
	                this.for_iterator();
	            }

	            this.state = 1343;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1344;
	            this.embedded_statement();
	            break;

	        case 8:
	            localctx = new ForeachStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1346;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 1345;
	                this.match(CSharpParser.AWAIT);
	            }

	            this.state = 1348;
	            this.match(CSharpParser.FOREACH);
	            this.state = 1349;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1350;
	            this.local_variable_type();
	            this.state = 1351;
	            this.identifier();
	            this.state = 1352;
	            this.match(CSharpParser.IN);
	            this.state = 1353;
	            this.expression();
	            this.state = 1354;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1355;
	            this.embedded_statement();
	            break;

	        case 9:
	            localctx = new BreakStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1357;
	            this.match(CSharpParser.BREAK);
	            this.state = 1358;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 10:
	            localctx = new ContinueStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1359;
	            this.match(CSharpParser.CONTINUE);
	            this.state = 1360;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 11:
	            localctx = new GotoStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1361;
	            this.match(CSharpParser.GOTO);
	            this.state = 1366;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 10:
	            case 11:
	            case 12:
	            case 14:
	            case 15:
	            case 16:
	            case 20:
	            case 32:
	            case 35:
	            case 38:
	            case 48:
	            case 49:
	            case 51:
	            case 58:
	            case 60:
	            case 61:
	            case 64:
	            case 69:
	            case 71:
	            case 75:
	            case 81:
	            case 85:
	            case 86:
	            case 102:
	            case 106:
	            case 110:
	            case 111:
	            case 113:
	            case 114:
	                this.state = 1362;
	                this.identifier();
	                break;
	            case 22:
	                this.state = 1363;
	                this.match(CSharpParser.CASE);
	                this.state = 1364;
	                this.expression();
	                break;
	            case 30:
	                this.state = 1365;
	                this.match(CSharpParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1368;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 12:
	            localctx = new ReturnStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1369;
	            this.match(CSharpParser.RETURN);
	            this.state = 1371;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 326684151) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 795681481) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 2947104097) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 1309179899) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 536872455) !== 0)) {
	                this.state = 1370;
	                this.expression();
	            }

	            this.state = 1373;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 13:
	            localctx = new ThrowStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1374;
	            this.match(CSharpParser.THROW);
	            this.state = 1376;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 326684151) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 795681481) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 2947104097) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 1309179899) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 536872455) !== 0)) {
	                this.state = 1375;
	                this.expression();
	            }

	            this.state = 1378;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 14:
	            localctx = new TryStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1379;
	            this.match(CSharpParser.TRY);
	            this.state = 1380;
	            this.block();
	            this.state = 1386;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 23:
	                this.state = 1381;
	                this.catch_clauses();
	                this.state = 1383;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===43) {
	                    this.state = 1382;
	                    this.finally_clause();
	                }

	                break;
	            case 43:
	                this.state = 1385;
	                this.finally_clause();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 15:
	            localctx = new CheckedStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1388;
	            this.match(CSharpParser.CHECKED);
	            this.state = 1389;
	            this.block();
	            break;

	        case 16:
	            localctx = new UncheckedStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1390;
	            this.match(CSharpParser.UNCHECKED);
	            this.state = 1391;
	            this.block();
	            break;

	        case 17:
	            localctx = new LockStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1392;
	            this.match(CSharpParser.LOCK);
	            this.state = 1393;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1394;
	            this.expression();
	            this.state = 1395;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1396;
	            this.embedded_statement();
	            break;

	        case 18:
	            localctx = new UsingStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1398;
	            this.match(CSharpParser.USING);
	            this.state = 1399;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1400;
	            this.resource_acquisition();
	            this.state = 1401;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1402;
	            this.embedded_statement();
	            break;

	        case 19:
	            localctx = new YieldStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1404;
	            this.match(CSharpParser.YIELD);
	            this.state = 1408;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 82:
	                this.state = 1405;
	                this.match(CSharpParser.RETURN);
	                this.state = 1406;
	                this.expression();
	                break;
	            case 19:
	                this.state = 1407;
	                this.match(CSharpParser.BREAK);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1410;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 20:
	            localctx = new UnsafeStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1411;
	            this.match(CSharpParser.UNSAFE);
	            this.state = 1412;
	            this.block();
	            break;

	        case 21:
	            localctx = new FixedStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1413;
	            this.match(CSharpParser.FIXED);
	            this.state = 1414;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1415;
	            this.pointer_type();
	            this.state = 1416;
	            this.fixed_pointer_declarators();
	            this.state = 1417;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1418;
	            this.embedded_statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, CSharpParser.RULE_block);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1422;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 1424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 335466487) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 796731389) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 4294819297) !== 0) || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 1008992253) !== 0) || ((((_la - 140)) & ~0x1f) === 0 && ((1 << (_la - 140)) & 2147489821) !== 0)) {
	            this.state = 1423;
	            this.statement_list();
	        }

	        this.state = 1426;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_variable_declaration() {
	    let localctx = new Local_variable_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, CSharpParser.RULE_local_variable_declaration);
	    var _la = 0;
	    try {
	        this.state = 1449;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 18:
	        case 20:
	        case 21:
	        case 24:
	        case 29:
	        case 32:
	        case 34:
	        case 35:
	        case 38:
	        case 45:
	        case 48:
	        case 49:
	        case 51:
	        case 55:
	        case 58:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 80:
	        case 81:
	        case 83:
	        case 85:
	        case 86:
	        case 87:
	        case 91:
	        case 99:
	        case 100:
	        case 102:
	        case 104:
	        case 105:
	        case 106:
	        case 108:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	        case 129:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1432;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	            if(la_===1) {
	                this.state = 1428;
	                this.match(CSharpParser.USING);

	            } else if(la_===2) {
	                this.state = 1429;
	                this.match(CSharpParser.REF);

	            } else if(la_===3) {
	                this.state = 1430;
	                this.match(CSharpParser.REF);
	                this.state = 1431;
	                this.match(CSharpParser.READONLY);

	            }
	            this.state = 1434;
	            this.local_variable_type();
	            this.state = 1435;
	            this.local_variable_declarator();
	            this.state = 1442;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===132) {
	                this.state = 1436;
	                this.match(CSharpParser.COMMA);
	                this.state = 1437;
	                this.local_variable_declarator();
	                this.state = 1438;
	                if (!(  this.IsLocalVariableDeclaration() )) {
	                    throw new antlr4.error.FailedPredicateException(this, " this.IsLocalVariableDeclaration() ");
	                }
	                this.state = 1444;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1445;
	            this.match(CSharpParser.FIXED);
	            this.state = 1446;
	            this.pointer_type();
	            this.state = 1447;
	            this.fixed_pointer_declarators();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_variable_type() {
	    let localctx = new Local_variable_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, CSharpParser.RULE_local_variable_type);
	    try {
	        this.state = 1453;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1451;
	            this.match(CSharpParser.VAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1452;
	            this.type_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_variable_declarator() {
	    let localctx = new Local_variable_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, CSharpParser.RULE_local_variable_declarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1455;
	        this.identifier();
	        this.state = 1461;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
	        if(la_===1) {
	            this.state = 1456;
	            this.match(CSharpParser.ASSIGNMENT);
	            this.state = 1458;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	            if(la_===1) {
	                this.state = 1457;
	                this.match(CSharpParser.REF);

	            }
	            this.state = 1460;
	            this.local_variable_initializer();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_variable_initializer() {
	    let localctx = new Local_variable_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, CSharpParser.RULE_local_variable_initializer);
	    try {
	        this.state = 1466;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 20:
	        case 21:
	        case 24:
	        case 25:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 38:
	        case 42:
	        case 45:
	        case 48:
	        case 49:
	        case 51:
	        case 55:
	        case 58:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 80:
	        case 81:
	        case 83:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 91:
	        case 94:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 104:
	        case 106:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 129:
	        case 135:
	        case 136:
	        case 137:
	        case 140:
	        case 142:
	        case 143:
	        case 144:
	        case 151:
	        case 152:
	        case 171:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1463;
	            this.expression();
	            break;
	        case 125:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1464;
	            this.array_initializer();
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1465;
	            this.stackalloc_initializer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_constant_declaration() {
	    let localctx = new Local_constant_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, CSharpParser.RULE_local_constant_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1468;
	        this.match(CSharpParser.CONST);
	        this.state = 1469;
	        this.type_();
	        this.state = 1470;
	        this.constant_declarators();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_body() {
	    let localctx = new If_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, CSharpParser.RULE_if_body);
	    try {
	        this.state = 1474;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 125:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1472;
	            this.block();
	            break;
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 24:
	        case 25:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 38:
	        case 42:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 55:
	        case 58:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 91:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 129:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 140:
	        case 142:
	        case 143:
	        case 144:
	        case 151:
	        case 152:
	        case 171:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1473;
	            this.simple_embedded_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_section() {
	    let localctx = new Switch_sectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, CSharpParser.RULE_switch_section);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1477; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1476;
	        		this.switch_label();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1479; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,154, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1481;
	        this.statement_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_label() {
	    let localctx = new Switch_labelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, CSharpParser.RULE_switch_label);
	    var _la = 0;
	    try {
	        this.state = 1492;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 22:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1483;
	            this.match(CSharpParser.CASE);
	            this.state = 1484;
	            this.expression();
	            this.state = 1486;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===110) {
	                this.state = 1485;
	                this.case_guard();
	            }

	            this.state = 1488;
	            this.match(CSharpParser.COLON);
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1490;
	            this.match(CSharpParser.DEFAULT);
	            this.state = 1491;
	            this.match(CSharpParser.COLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_guard() {
	    let localctx = new Case_guardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, CSharpParser.RULE_case_guard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1494;
	        this.match(CSharpParser.WHEN);
	        this.state = 1495;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement_list() {
	    let localctx = new Statement_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, CSharpParser.RULE_statement_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1498; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1497;
	        		this.statement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1500; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,157, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_initializer() {
	    let localctx = new For_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, CSharpParser.RULE_for_initializer);
	    var _la = 0;
	    try {
	        this.state = 1511;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1502;
	            this.local_variable_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1503;
	            this.expression();
	            this.state = 1508;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===132) {
	                this.state = 1504;
	                this.match(CSharpParser.COMMA);
	                this.state = 1505;
	                this.expression();
	                this.state = 1510;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_iterator() {
	    let localctx = new For_iteratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, CSharpParser.RULE_for_iterator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1513;
	        this.expression();
	        this.state = 1518;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 1514;
	            this.match(CSharpParser.COMMA);
	            this.state = 1515;
	            this.expression();
	            this.state = 1520;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catch_clauses() {
	    let localctx = new Catch_clausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, CSharpParser.RULE_catch_clauses);
	    var _la = 0;
	    try {
	        this.state = 1532;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1521;
	            this.specific_catch_clause();
	            this.state = 1525;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1522;
	                    this.specific_catch_clause(); 
	                }
	                this.state = 1527;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
	            }

	            this.state = 1529;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23) {
	                this.state = 1528;
	                this.general_catch_clause();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1531;
	            this.general_catch_clause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specific_catch_clause() {
	    let localctx = new Specific_catch_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, CSharpParser.RULE_specific_catch_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1534;
	        this.match(CSharpParser.CATCH);
	        this.state = 1535;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 1536;
	        this.class_type();
	        this.state = 1538;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1170432) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 873136201) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 6424737) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 6929) !== 0)) {
	            this.state = 1537;
	            this.identifier();
	        }

	        this.state = 1540;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 1542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===110) {
	            this.state = 1541;
	            this.exception_filter();
	        }

	        this.state = 1544;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_catch_clause() {
	    let localctx = new General_catch_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, CSharpParser.RULE_general_catch_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1546;
	        this.match(CSharpParser.CATCH);
	        this.state = 1548;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===110) {
	            this.state = 1547;
	            this.exception_filter();
	        }

	        this.state = 1550;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exception_filter() {
	    let localctx = new Exception_filterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, CSharpParser.RULE_exception_filter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1552;
	        this.match(CSharpParser.WHEN);
	        this.state = 1553;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 1554;
	        this.expression();
	        this.state = 1555;
	        this.match(CSharpParser.CLOSE_PARENS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finally_clause() {
	    let localctx = new Finally_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, CSharpParser.RULE_finally_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1557;
	        this.match(CSharpParser.FINALLY);
	        this.state = 1558;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource_acquisition() {
	    let localctx = new Resource_acquisitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, CSharpParser.RULE_resource_acquisition);
	    try {
	        this.state = 1562;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1560;
	            this.local_variable_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1561;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace_declaration() {
	    let localctx = new Namespace_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, CSharpParser.RULE_namespace_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1564;
	        this.match(CSharpParser.NAMESPACE);
	        this.state = 1565;
	        localctx.qi = this.qualified_identifier();
	        this.state = 1566;
	        this.namespace_body();
	        this.state = 1568;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 1567;
	            this.match(CSharpParser.SEMICOLON);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualified_identifier() {
	    let localctx = new Qualified_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, CSharpParser.RULE_qualified_identifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1570;
	        this.identifier();
	        this.state = 1575;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===131) {
	            this.state = 1571;
	            this.match(CSharpParser.DOT);
	            this.state = 1572;
	            this.identifier();
	            this.state = 1577;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace_body() {
	    let localctx = new Namespace_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, CSharpParser.RULE_namespace_body);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1578;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 1580;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	        if(la_===1) {
	            this.state = 1579;
	            this.extern_alias_directives();

	        }
	        this.state = 1583;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===105) {
	            this.state = 1582;
	            this.using_directives();
	        }

	        this.state = 1586;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2214625792) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 806879249) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 1074399485) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 1048581) !== 0)) {
	            this.state = 1585;
	            this.namespace_member_declarations();
	        }

	        this.state = 1588;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extern_alias_directives() {
	    let localctx = new Extern_alias_directivesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, CSharpParser.RULE_extern_alias_directives);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1591; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1590;
	        		this.extern_alias_directive();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1593; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,173, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extern_alias_directive() {
	    let localctx = new Extern_alias_directiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, CSharpParser.RULE_extern_alias_directive);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1595;
	        this.match(CSharpParser.EXTERN);
	        this.state = 1596;
	        this.match(CSharpParser.ALIAS);
	        this.state = 1597;
	        this.identifier();
	        this.state = 1598;
	        this.match(CSharpParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	using_directives() {
	    let localctx = new Using_directivesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, CSharpParser.RULE_using_directives);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1601; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1600;
	            this.using_directive();
	            this.state = 1603; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===105);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	using_directive() {
	    let localctx = new Using_directiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, CSharpParser.RULE_using_directive);
	    try {
	        this.state = 1620;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new UsingAliasDirectiveContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1605;
	            this.match(CSharpParser.USING);
	            this.state = 1606;
	            this.identifier();
	            this.state = 1607;
	            this.match(CSharpParser.ASSIGNMENT);
	            this.state = 1608;
	            this.namespace_or_type_name();
	            this.state = 1609;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 2:
	            localctx = new UsingNamespaceDirectiveContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1611;
	            this.match(CSharpParser.USING);
	            this.state = 1612;
	            this.namespace_or_type_name();
	            this.state = 1613;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 3:
	            localctx = new UsingStaticDirectiveContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1615;
	            this.match(CSharpParser.USING);
	            this.state = 1616;
	            this.match(CSharpParser.STATIC);
	            this.state = 1617;
	            this.namespace_or_type_name();
	            this.state = 1618;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace_member_declarations() {
	    let localctx = new Namespace_member_declarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, CSharpParser.RULE_namespace_member_declarations);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1623; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1622;
	            this.namespace_member_declaration();
	            this.state = 1625; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2214625792) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 806879249) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 1074399485) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 1048581) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace_member_declaration() {
	    let localctx = new Namespace_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, CSharpParser.RULE_namespace_member_declaration);
	    try {
	        this.state = 1629;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1627;
	            this.namespace_declaration();
	            break;
	        case 9:
	        case 15:
	        case 26:
	        case 31:
	        case 37:
	        case 41:
	        case 56:
	        case 57:
	        case 66:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 84:
	        case 90:
	        case 92:
	        case 103:
	        case 107:
	        case 109:
	        case 127:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1628;
	            this.type_declaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_declaration() {
	    let localctx = new Type_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, CSharpParser.RULE_type_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1632;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 1631;
	            this.attributes();
	        }

	        this.state = 1635;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	        if(la_===1) {
	            this.state = 1634;
	            this.all_member_modifiers();

	        }
	        this.state = 1642;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 26:
	            this.state = 1637;
	            this.class_definition();
	            break;
	        case 79:
	        case 80:
	        case 92:
	            this.state = 1638;
	            this.struct_definition();
	            break;
	        case 56:
	            this.state = 1639;
	            this.interface_definition();
	            break;
	        case 37:
	            this.state = 1640;
	            this.enum_definition();
	            break;
	        case 31:
	            this.state = 1641;
	            this.delegate_definition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualified_alias_member() {
	    let localctx = new Qualified_alias_memberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, CSharpParser.RULE_qualified_alias_member);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1644;
	        this.identifier();
	        this.state = 1645;
	        this.match(CSharpParser.DOUBLE_COLON);
	        this.state = 1646;
	        this.identifier();
	        this.state = 1648;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
	        if(la_===1) {
	            this.state = 1647;
	            this.type_argument_list();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_parameter_list() {
	    let localctx = new Type_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, CSharpParser.RULE_type_parameter_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1650;
	        this.match(CSharpParser.LT);
	        this.state = 1651;
	        this.type_parameter();
	        this.state = 1656;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 1652;
	            this.match(CSharpParser.COMMA);
	            this.state = 1653;
	            this.type_parameter();
	            this.state = 1658;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1659;
	        this.match(CSharpParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_parameter() {
	    let localctx = new Type_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, CSharpParser.RULE_type_parameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1662;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 1661;
	            this.attributes();
	        }

	        this.state = 1664;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_base() {
	    let localctx = new Class_baseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, CSharpParser.RULE_class_base);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1666;
	        this.match(CSharpParser.COLON);
	        this.state = 1667;
	        this.class_type();
	        this.state = 1672;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 1668;
	            this.match(CSharpParser.COMMA);
	            this.state = 1669;
	            this.namespace_or_type_name();
	            this.state = 1674;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_type_list() {
	    let localctx = new Interface_type_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, CSharpParser.RULE_interface_type_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1675;
	        this.namespace_or_type_name();
	        this.state = 1680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 1676;
	            this.match(CSharpParser.COMMA);
	            this.state = 1677;
	            this.namespace_or_type_name();
	            this.state = 1682;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_parameter_constraints_clauses() {
	    let localctx = new Type_parameter_constraints_clausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, CSharpParser.RULE_type_parameter_constraints_clauses);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1684; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1683;
	            this.type_parameter_constraints_clause();
	            this.state = 1686; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===111);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_parameter_constraints_clause() {
	    let localctx = new Type_parameter_constraints_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, CSharpParser.RULE_type_parameter_constraints_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1688;
	        this.match(CSharpParser.WHERE);
	        this.state = 1689;
	        this.identifier();
	        this.state = 1690;
	        this.match(CSharpParser.COLON);
	        this.state = 1691;
	        this.type_parameter_constraints();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_parameter_constraints() {
	    let localctx = new Type_parameter_constraintsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, CSharpParser.RULE_type_parameter_constraints);
	    var _la = 0;
	    try {
	        this.state = 1703;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 66:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1693;
	            this.constructor_constraint();
	            break;
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 20:
	        case 26:
	        case 32:
	        case 35:
	        case 38:
	        case 48:
	        case 49:
	        case 51:
	        case 58:
	        case 60:
	        case 61:
	        case 64:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 81:
	        case 85:
	        case 86:
	        case 91:
	        case 92:
	        case 102:
	        case 106:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1694;
	            this.primary_constraint();
	            this.state = 1697;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
	            if(la_===1) {
	                this.state = 1695;
	                this.match(CSharpParser.COMMA);
	                this.state = 1696;
	                this.secondary_constraints();

	            }
	            this.state = 1701;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 1699;
	                this.match(CSharpParser.COMMA);
	                this.state = 1700;
	                this.constructor_constraint();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary_constraint() {
	    let localctx = new Primary_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, CSharpParser.RULE_primary_constraint);
	    var _la = 0;
	    try {
	        this.state = 1712;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1705;
	            this.class_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1706;
	            this.match(CSharpParser.CLASS);
	            this.state = 1708;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===148) {
	                this.state = 1707;
	                this.match(CSharpParser.INTERR);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1710;
	            this.match(CSharpParser.STRUCT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1711;
	            this.match(CSharpParser.UNMANAGED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	secondary_constraints() {
	    let localctx = new Secondary_constraintsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, CSharpParser.RULE_secondary_constraints);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1714;
	        this.namespace_or_type_name();
	        this.state = 1719;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,192,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1715;
	                this.match(CSharpParser.COMMA);
	                this.state = 1716;
	                this.namespace_or_type_name(); 
	            }
	            this.state = 1721;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,192,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructor_constraint() {
	    let localctx = new Constructor_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, CSharpParser.RULE_constructor_constraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1722;
	        this.match(CSharpParser.NEW);
	        this.state = 1723;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 1724;
	        this.match(CSharpParser.CLOSE_PARENS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_body() {
	    let localctx = new Class_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, CSharpParser.RULE_class_body);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1726;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 1728;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2905988608) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3081446381) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 486275765) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 1342234555) !== 0) || _la===144) {
	            this.state = 1727;
	            this.class_member_declarations();
	        }

	        this.state = 1730;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_member_declarations() {
	    let localctx = new Class_member_declarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, CSharpParser.RULE_class_member_declarations);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1733; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1732;
	            this.class_member_declaration();
	            this.state = 1735; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2905988608) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3081446381) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 486275765) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 1342234555) !== 0) || _la===144);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_member_declaration() {
	    let localctx = new Class_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, CSharpParser.RULE_class_member_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1738;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 1737;
	            this.attributes();
	        }

	        this.state = 1741;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
	        if(la_===1) {
	            this.state = 1740;
	            this.all_member_modifiers();

	        }
	        this.state = 1745;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 18:
	        case 20:
	        case 21:
	        case 24:
	        case 26:
	        case 27:
	        case 29:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 45:
	        case 48:
	        case 49:
	        case 51:
	        case 53:
	        case 55:
	        case 56:
	        case 58:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 85:
	        case 86:
	        case 87:
	        case 91:
	        case 92:
	        case 99:
	        case 100:
	        case 102:
	        case 104:
	        case 106:
	        case 108:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	        case 129:
	            this.state = 1743;
	            this.common_member_declaration();
	            break;
	        case 144:
	            this.state = 1744;
	            this.destructor_definition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	all_member_modifiers() {
	    let localctx = new All_member_modifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, CSharpParser.RULE_all_member_modifiers);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1748; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1747;
	        		this.all_member_modifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1750; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,198, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	all_member_modifier() {
	    let localctx = new All_member_modifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, CSharpParser.RULE_all_member_modifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1752;
	        _la = this._input.LA(1);
	        if(!(_la===9 || _la===15 || ((((_la - 41)) & ~0x1f) === 0 && ((1 << (_la - 41)) & 33619969) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 1073875069) !== 0) || _la===107 || _la===109)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	common_member_declaration() {
	    let localctx = new Common_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, CSharpParser.RULE_common_member_declaration);
	    try {
	        this.state = 1773;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1754;
	            this.constant_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1755;
	            this.typed_member_declaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1756;
	            this.event_declaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1757;
	            this.conversion_operator_declarator();
	            this.state = 1763;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 125:
	            case 134:
	                this.state = 1758;
	                this.body();
	                break;
	            case 145:
	                this.state = 1759;
	                this.right_arrow();
	                this.state = 1760;
	                this.throwable_expression();
	                this.state = 1761;
	                this.match(CSharpParser.SEMICOLON);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1765;
	            this.constructor_declaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1766;
	            this.match(CSharpParser.VOID);
	            this.state = 1767;
	            this.method_declaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1768;
	            this.class_definition();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1769;
	            this.struct_definition();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1770;
	            this.interface_definition();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1771;
	            this.enum_definition();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1772;
	            this.delegate_definition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typed_member_declaration() {
	    let localctx = new Typed_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, CSharpParser.RULE_typed_member_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1780;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	        if(la_===1) {
	            this.state = 1775;
	            this.match(CSharpParser.REF);

	        } else if(la_===2) {
	            this.state = 1776;
	            this.match(CSharpParser.READONLY);
	            this.state = 1777;
	            this.match(CSharpParser.REF);

	        } else if(la_===3) {
	            this.state = 1778;
	            this.match(CSharpParser.REF);
	            this.state = 1779;
	            this.match(CSharpParser.READONLY);

	        }
	        this.state = 1782;
	        this.type_();
	        this.state = 1792;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1783;
	            this.namespace_or_type_name();
	            this.state = 1784;
	            this.match(CSharpParser.DOT);
	            this.state = 1785;
	            this.indexer_declaration();
	            break;

	        case 2:
	            this.state = 1787;
	            this.method_declaration();
	            break;

	        case 3:
	            this.state = 1788;
	            this.property_declaration();
	            break;

	        case 4:
	            this.state = 1789;
	            this.indexer_declaration();
	            break;

	        case 5:
	            this.state = 1790;
	            this.operator_declaration();
	            break;

	        case 6:
	            this.state = 1791;
	            this.field_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant_declarators() {
	    let localctx = new Constant_declaratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, CSharpParser.RULE_constant_declarators);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1794;
	        this.constant_declarator();
	        this.state = 1799;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 1795;
	            this.match(CSharpParser.COMMA);
	            this.state = 1796;
	            this.constant_declarator();
	            this.state = 1801;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant_declarator() {
	    let localctx = new Constant_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, CSharpParser.RULE_constant_declarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1802;
	        this.identifier();
	        this.state = 1803;
	        this.match(CSharpParser.ASSIGNMENT);
	        this.state = 1804;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_declarators() {
	    let localctx = new Variable_declaratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, CSharpParser.RULE_variable_declarators);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1806;
	        this.variable_declarator();
	        this.state = 1811;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 1807;
	            this.match(CSharpParser.COMMA);
	            this.state = 1808;
	            this.variable_declarator();
	            this.state = 1813;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_declarator() {
	    let localctx = new Variable_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, CSharpParser.RULE_variable_declarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1814;
	        this.identifier();
	        this.state = 1817;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===145) {
	            this.state = 1815;
	            this.match(CSharpParser.ASSIGNMENT);
	            this.state = 1816;
	            this.variable_initializer();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_initializer() {
	    let localctx = new Variable_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, CSharpParser.RULE_variable_initializer);
	    try {
	        this.state = 1821;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 20:
	        case 21:
	        case 24:
	        case 25:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 38:
	        case 42:
	        case 45:
	        case 48:
	        case 49:
	        case 51:
	        case 55:
	        case 58:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 80:
	        case 81:
	        case 83:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 91:
	        case 94:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 104:
	        case 106:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 129:
	        case 135:
	        case 136:
	        case 137:
	        case 140:
	        case 142:
	        case 143:
	        case 144:
	        case 151:
	        case 152:
	        case 171:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1819;
	            this.expression();
	            break;
	        case 125:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1820;
	            this.array_initializer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	return_type() {
	    let localctx = new Return_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, CSharpParser.RULE_return_type);
	    try {
	        this.state = 1825;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1823;
	            this.type_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1824;
	            this.match(CSharpParser.VOID);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_name() {
	    let localctx = new Member_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, CSharpParser.RULE_member_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1827;
	        this.namespace_or_type_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_body() {
	    let localctx = new Method_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, CSharpParser.RULE_method_body);
	    try {
	        this.state = 1831;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 125:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1829;
	            this.block();
	            break;
	        case 134:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1830;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formal_parameter_list() {
	    let localctx = new Formal_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, CSharpParser.RULE_formal_parameter_list);
	    var _la = 0;
	    try {
	        this.state = 1839;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1833;
	            this.parameter_array();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1834;
	            this.fixed_parameters();
	            this.state = 1837;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 1835;
	                this.match(CSharpParser.COMMA);
	                this.state = 1836;
	                this.parameter_array();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixed_parameters() {
	    let localctx = new Fixed_parametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, CSharpParser.RULE_fixed_parameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1841;
	        this.fixed_parameter();
	        this.state = 1846;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,211,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1842;
	                this.match(CSharpParser.COMMA);
	                this.state = 1843;
	                this.fixed_parameter(); 
	            }
	            this.state = 1848;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,211,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixed_parameter() {
	    let localctx = new Fixed_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, CSharpParser.RULE_fixed_parameter);
	    var _la = 0;
	    try {
	        this.state = 1857;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1850;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===127) {
	                this.state = 1849;
	                this.attributes();
	            }

	            this.state = 1853;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 67371009) !== 0) || _la===94) {
	                this.state = 1852;
	                this.parameter_modifier();
	            }

	            this.state = 1855;
	            this.arg_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1856;
	            this.match(CSharpParser.ARGLIST);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter_modifier() {
	    let localctx = new Parameter_modifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, CSharpParser.RULE_parameter_modifier);
	    try {
	        this.state = 1867;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1859;
	            this.match(CSharpParser.REF);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1860;
	            this.match(CSharpParser.OUT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1861;
	            this.match(CSharpParser.IN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1862;
	            this.match(CSharpParser.REF);
	            this.state = 1863;
	            this.match(CSharpParser.THIS);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1864;
	            this.match(CSharpParser.IN);
	            this.state = 1865;
	            this.match(CSharpParser.THIS);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1866;
	            this.match(CSharpParser.THIS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter_array() {
	    let localctx = new Parameter_arrayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, CSharpParser.RULE_parameter_array);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1870;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 1869;
	            this.attributes();
	        }

	        this.state = 1872;
	        this.match(CSharpParser.PARAMS);
	        this.state = 1873;
	        this.array_type();
	        this.state = 1874;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accessor_declarations() {
	    let localctx = new Accessor_declarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, CSharpParser.RULE_accessor_declarations);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1877;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 1876;
	            localctx.attrs = this.attributes();
	        }

	        this.state = 1880;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 1572865) !== 0)) {
	            this.state = 1879;
	            localctx.mods = this.accessor_modifier();
	        }

	        this.state = 1892;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 49:
	            this.state = 1882;
	            this.match(CSharpParser.GET);
	            this.state = 1883;
	            this.accessor_body();
	            this.state = 1885;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 538443777) !== 0) || _la===127) {
	                this.state = 1884;
	                this.set_accessor_declaration();
	            }

	            break;
	        case 86:
	            this.state = 1887;
	            this.match(CSharpParser.SET);
	            this.state = 1888;
	            this.accessor_body();
	            this.state = 1890;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 49)) & ~0x1f) === 0 && ((1 << (_la - 49)) & 402653441) !== 0) || _la===127) {
	                this.state = 1889;
	                this.get_accessor_declaration();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	get_accessor_declaration() {
	    let localctx = new Get_accessor_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, CSharpParser.RULE_get_accessor_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1895;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 1894;
	            this.attributes();
	        }

	        this.state = 1898;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 1572865) !== 0)) {
	            this.state = 1897;
	            this.accessor_modifier();
	        }

	        this.state = 1900;
	        this.match(CSharpParser.GET);
	        this.state = 1901;
	        this.accessor_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_accessor_declaration() {
	    let localctx = new Set_accessor_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, CSharpParser.RULE_set_accessor_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1904;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 1903;
	            this.attributes();
	        }

	        this.state = 1907;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 1572865) !== 0)) {
	            this.state = 1906;
	            this.accessor_modifier();
	        }

	        this.state = 1909;
	        this.match(CSharpParser.SET);
	        this.state = 1910;
	        this.accessor_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accessor_modifier() {
	    let localctx = new Accessor_modifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, CSharpParser.RULE_accessor_modifier);
	    try {
	        this.state = 1919;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1912;
	            this.match(CSharpParser.PROTECTED);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1913;
	            this.match(CSharpParser.INTERNAL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1914;
	            this.match(CSharpParser.PRIVATE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1915;
	            this.match(CSharpParser.PROTECTED);
	            this.state = 1916;
	            this.match(CSharpParser.INTERNAL);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1917;
	            this.match(CSharpParser.INTERNAL);
	            this.state = 1918;
	            this.match(CSharpParser.PROTECTED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accessor_body() {
	    let localctx = new Accessor_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, CSharpParser.RULE_accessor_body);
	    try {
	        this.state = 1923;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 125:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1921;
	            this.block();
	            break;
	        case 134:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1922;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_accessor_declarations() {
	    let localctx = new Event_accessor_declarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, CSharpParser.RULE_event_accessor_declarations);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1926;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 1925;
	            this.attributes();
	        }

	        this.state = 1936;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	            this.state = 1928;
	            this.match(CSharpParser.ADD);
	            this.state = 1929;
	            this.block();
	            this.state = 1930;
	            this.remove_accessor_declaration();
	            break;
	        case 81:
	            this.state = 1932;
	            this.match(CSharpParser.REMOVE);
	            this.state = 1933;
	            this.block();
	            this.state = 1934;
	            this.add_accessor_declaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	add_accessor_declaration() {
	    let localctx = new Add_accessor_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, CSharpParser.RULE_add_accessor_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1939;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 1938;
	            this.attributes();
	        }

	        this.state = 1941;
	        this.match(CSharpParser.ADD);
	        this.state = 1942;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	remove_accessor_declaration() {
	    let localctx = new Remove_accessor_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, CSharpParser.RULE_remove_accessor_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1945;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 1944;
	            this.attributes();
	        }

	        this.state = 1947;
	        this.match(CSharpParser.REMOVE);
	        this.state = 1948;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	overloadable_operator() {
	    let localctx = new Overloadable_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, CSharpParser.RULE_overloadable_operator);
	    try {
	        this.state = 1972;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1950;
	            this.match(CSharpParser.PLUS);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1951;
	            this.match(CSharpParser.MINUS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1952;
	            this.match(CSharpParser.BANG);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1953;
	            this.match(CSharpParser.TILDE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1954;
	            this.match(CSharpParser.OP_INC);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1955;
	            this.match(CSharpParser.OP_DEC);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1956;
	            this.match(CSharpParser.TRUE);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1957;
	            this.match(CSharpParser.FALSE);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1958;
	            this.match(CSharpParser.STAR);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1959;
	            this.match(CSharpParser.DIV);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1960;
	            this.match(CSharpParser.PERCENT);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1961;
	            this.match(CSharpParser.AMP);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1962;
	            this.match(CSharpParser.BITWISE_OR);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1963;
	            this.match(CSharpParser.CARET);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1964;
	            this.match(CSharpParser.OP_LEFT_SHIFT);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1965;
	            this.right_shift();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1966;
	            this.match(CSharpParser.OP_EQ);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1967;
	            this.match(CSharpParser.OP_NE);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1968;
	            this.match(CSharpParser.GT);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1969;
	            this.match(CSharpParser.LT);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1970;
	            this.match(CSharpParser.OP_GE);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1971;
	            this.match(CSharpParser.OP_LE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conversion_operator_declarator() {
	    let localctx = new Conversion_operator_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, CSharpParser.RULE_conversion_operator_declarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1974;
	        _la = this._input.LA(1);
	        if(!(_la===40 || _la===53)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1975;
	        this.match(CSharpParser.OPERATOR);
	        this.state = 1976;
	        this.type_();
	        this.state = 1977;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 1978;
	        this.arg_declaration();
	        this.state = 1979;
	        this.match(CSharpParser.CLOSE_PARENS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructor_initializer() {
	    let localctx = new Constructor_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, CSharpParser.RULE_constructor_initializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1981;
	        this.match(CSharpParser.COLON);
	        this.state = 1982;
	        _la = this._input.LA(1);
	        if(!(_la===17 || _la===94)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1983;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 1985;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 326684151) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 1869427401) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 2947104097) !== 0) || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 941752301) !== 0) || ((((_la - 140)) & ~0x1f) === 0 && ((1 << (_la - 140)) & 2147489821) !== 0)) {
	            this.state = 1984;
	            this.argument_list();
	        }

	        this.state = 1987;
	        this.match(CSharpParser.CLOSE_PARENS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	body() {
	    let localctx = new BodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, CSharpParser.RULE_body);
	    try {
	        this.state = 1991;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 125:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1989;
	            this.block();
	            break;
	        case 134:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1990;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_interfaces() {
	    let localctx = new Struct_interfacesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, CSharpParser.RULE_struct_interfaces);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1993;
	        this.match(CSharpParser.COLON);
	        this.state = 1994;
	        this.interface_type_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_body() {
	    let localctx = new Struct_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, CSharpParser.RULE_struct_body);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1996;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 2000;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2905988608) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3081450477) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 486275765) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 1342234555) !== 0)) {
	            this.state = 1997;
	            this.struct_member_declaration();
	            this.state = 2002;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2003;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_member_declaration() {
	    let localctx = new Struct_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, CSharpParser.RULE_struct_member_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2006;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 2005;
	            this.attributes();
	        }

	        this.state = 2009;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
	        if(la_===1) {
	            this.state = 2008;
	            this.all_member_modifiers();

	        }
	        this.state = 2021;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 18:
	        case 20:
	        case 21:
	        case 24:
	        case 26:
	        case 27:
	        case 29:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 45:
	        case 48:
	        case 49:
	        case 51:
	        case 53:
	        case 55:
	        case 56:
	        case 58:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 85:
	        case 86:
	        case 87:
	        case 91:
	        case 92:
	        case 99:
	        case 100:
	        case 102:
	        case 104:
	        case 106:
	        case 108:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	        case 129:
	            this.state = 2011;
	            this.common_member_declaration();
	            break;
	        case 44:
	            this.state = 2012;
	            this.match(CSharpParser.FIXED);
	            this.state = 2013;
	            this.type_();
	            this.state = 2015; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2014;
	                this.fixed_size_buffer_declarator();
	                this.state = 2017; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 1170432) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 873136201) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 6424737) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 6929) !== 0));
	            this.state = 2019;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_type() {
	    let localctx = new Array_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, CSharpParser.RULE_array_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2023;
	        this.base_type();
	        this.state = 2031; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2027;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===137 || _la===148) {
	                this.state = 2024;
	                _la = this._input.LA(1);
	                if(!(_la===137 || _la===148)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2029;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2030;
	            this.rank_specifier();
	            this.state = 2033; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 127)) & ~0x1f) === 0 && ((1 << (_la - 127)) & 2098177) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rank_specifier() {
	    let localctx = new Rank_specifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, CSharpParser.RULE_rank_specifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2035;
	        this.match(CSharpParser.OPEN_BRACKET);
	        this.state = 2039;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 2036;
	            this.match(CSharpParser.COMMA);
	            this.state = 2041;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2042;
	        this.match(CSharpParser.CLOSE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_initializer() {
	    let localctx = new Array_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, CSharpParser.RULE_array_initializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2044;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 2056;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 326684151) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 795681481) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 2947104097) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 1309212667) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 536872455) !== 0)) {
	            this.state = 2045;
	            this.variable_initializer();
	            this.state = 2050;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,243,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2046;
	                    this.match(CSharpParser.COMMA);
	                    this.state = 2047;
	                    this.variable_initializer(); 
	                }
	                this.state = 2052;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,243,this._ctx);
	            }

	            this.state = 2054;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 2053;
	                this.match(CSharpParser.COMMA);
	            }

	        }

	        this.state = 2058;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variant_type_parameter_list() {
	    let localctx = new Variant_type_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, CSharpParser.RULE_variant_type_parameter_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2060;
	        this.match(CSharpParser.LT);
	        this.state = 2061;
	        this.variant_type_parameter();
	        this.state = 2066;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 2062;
	            this.match(CSharpParser.COMMA);
	            this.state = 2063;
	            this.variant_type_parameter();
	            this.state = 2068;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2069;
	        this.match(CSharpParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variant_type_parameter() {
	    let localctx = new Variant_type_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, CSharpParser.RULE_variant_type_parameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2072;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 2071;
	            this.attributes();
	        }

	        this.state = 2075;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===54 || _la===72) {
	            this.state = 2074;
	            this.variance_annotation();
	        }

	        this.state = 2077;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variance_annotation() {
	    let localctx = new Variance_annotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, CSharpParser.RULE_variance_annotation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2079;
	        _la = this._input.LA(1);
	        if(!(_la===54 || _la===72)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_base() {
	    let localctx = new Interface_baseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, CSharpParser.RULE_interface_base);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2081;
	        this.match(CSharpParser.COLON);
	        this.state = 2082;
	        this.interface_type_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_body() {
	    let localctx = new Interface_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, CSharpParser.RULE_interface_body);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2084;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 2088;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 557177856) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3029016781) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 149653685) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 1342233275) !== 0)) {
	            this.state = 2085;
	            this.interface_member_declaration();
	            this.state = 2090;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2091;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_member_declaration() {
	    let localctx = new Interface_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, CSharpParser.RULE_interface_member_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2094;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 2093;
	            this.attributes();
	        }

	        this.state = 2097;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66) {
	            this.state = 2096;
	            this.match(CSharpParser.NEW);
	        }

	        this.state = 2162;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2100;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===103) {
	                this.state = 2099;
	                this.match(CSharpParser.UNSAFE);
	            }

	            this.state = 2107;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,253,this._ctx);
	            if(la_===1) {
	                this.state = 2102;
	                this.match(CSharpParser.REF);

	            } else if(la_===2) {
	                this.state = 2103;
	                this.match(CSharpParser.REF);
	                this.state = 2104;
	                this.match(CSharpParser.READONLY);

	            } else if(la_===3) {
	                this.state = 2105;
	                this.match(CSharpParser.READONLY);
	                this.state = 2106;
	                this.match(CSharpParser.REF);

	            }
	            this.state = 2109;
	            this.type_();
	            this.state = 2137;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2110;
	                this.identifier();
	                this.state = 2112;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===146) {
	                    this.state = 2111;
	                    this.type_parameter_list();
	                }

	                this.state = 2114;
	                this.match(CSharpParser.OPEN_PARENS);
	                this.state = 2116;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 557177856) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3033210957) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 1223364017) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 1342233259) !== 0)) {
	                    this.state = 2115;
	                    this.formal_parameter_list();
	                }

	                this.state = 2118;
	                this.match(CSharpParser.CLOSE_PARENS);
	                this.state = 2120;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===111) {
	                    this.state = 2119;
	                    this.type_parameter_constraints_clauses();
	                }

	                this.state = 2122;
	                this.match(CSharpParser.SEMICOLON);
	                break;

	            case 2:
	                this.state = 2124;
	                this.identifier();
	                this.state = 2125;
	                this.match(CSharpParser.OPEN_BRACE);
	                this.state = 2126;
	                this.interface_accessors();
	                this.state = 2127;
	                this.match(CSharpParser.CLOSE_BRACE);
	                break;

	            case 3:
	                this.state = 2129;
	                this.match(CSharpParser.THIS);
	                this.state = 2130;
	                this.match(CSharpParser.OPEN_BRACKET);
	                this.state = 2131;
	                this.formal_parameter_list();
	                this.state = 2132;
	                this.match(CSharpParser.CLOSE_BRACKET);
	                this.state = 2133;
	                this.match(CSharpParser.OPEN_BRACE);
	                this.state = 2134;
	                this.interface_accessors();
	                this.state = 2135;
	                this.match(CSharpParser.CLOSE_BRACE);
	                break;

	            }
	            break;

	        case 2:
	            this.state = 2140;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===103) {
	                this.state = 2139;
	                this.match(CSharpParser.UNSAFE);
	            }

	            this.state = 2142;
	            this.match(CSharpParser.VOID);
	            this.state = 2143;
	            this.identifier();
	            this.state = 2145;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===146) {
	                this.state = 2144;
	                this.type_parameter_list();
	            }

	            this.state = 2147;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 2149;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 557177856) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3033210957) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 1223364017) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 1342233259) !== 0)) {
	                this.state = 2148;
	                this.formal_parameter_list();
	            }

	            this.state = 2151;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 2153;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===111) {
	                this.state = 2152;
	                this.type_parameter_constraints_clauses();
	            }

	            this.state = 2155;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 3:
	            this.state = 2157;
	            this.match(CSharpParser.EVENT);
	            this.state = 2158;
	            this.type_();
	            this.state = 2159;
	            this.identifier();
	            this.state = 2160;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_accessors() {
	    let localctx = new Interface_accessorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, CSharpParser.RULE_interface_accessors);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2165;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 2164;
	            this.attributes();
	        }

	        this.state = 2185;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 49:
	            this.state = 2167;
	            this.match(CSharpParser.GET);
	            this.state = 2168;
	            this.match(CSharpParser.SEMICOLON);
	            this.state = 2174;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===86 || _la===127) {
	                this.state = 2170;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===127) {
	                    this.state = 2169;
	                    this.attributes();
	                }

	                this.state = 2172;
	                this.match(CSharpParser.SET);
	                this.state = 2173;
	                this.match(CSharpParser.SEMICOLON);
	            }

	            break;
	        case 86:
	            this.state = 2176;
	            this.match(CSharpParser.SET);
	            this.state = 2177;
	            this.match(CSharpParser.SEMICOLON);
	            this.state = 2183;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49 || _la===127) {
	                this.state = 2179;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===127) {
	                    this.state = 2178;
	                    this.attributes();
	                }

	                this.state = 2181;
	                this.match(CSharpParser.GET);
	                this.state = 2182;
	                this.match(CSharpParser.SEMICOLON);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_base() {
	    let localctx = new Enum_baseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, CSharpParser.RULE_enum_base);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2187;
	        this.match(CSharpParser.COLON);
	        this.state = 2188;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_body() {
	    let localctx = new Enum_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, CSharpParser.RULE_enum_body);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2190;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 2202;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1170432) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 873136201) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 6424737) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 33561361) !== 0)) {
	            this.state = 2191;
	            this.enum_member_declaration();
	            this.state = 2196;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,269,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2192;
	                    this.match(CSharpParser.COMMA);
	                    this.state = 2193;
	                    this.enum_member_declaration(); 
	                }
	                this.state = 2198;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,269,this._ctx);
	            }

	            this.state = 2200;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 2199;
	                this.match(CSharpParser.COMMA);
	            }

	        }

	        this.state = 2204;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_member_declaration() {
	    let localctx = new Enum_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, CSharpParser.RULE_enum_member_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2207;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 2206;
	            this.attributes();
	        }

	        this.state = 2209;
	        this.identifier();
	        this.state = 2212;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===145) {
	            this.state = 2210;
	            this.match(CSharpParser.ASSIGNMENT);
	            this.state = 2211;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_attribute_section() {
	    let localctx = new Global_attribute_sectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, CSharpParser.RULE_global_attribute_section);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2214;
	        this.match(CSharpParser.OPEN_BRACKET);
	        this.state = 2215;
	        this.global_attribute_target();
	        this.state = 2216;
	        this.match(CSharpParser.COLON);
	        this.state = 2217;
	        this.attribute_list();
	        this.state = 2219;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===132) {
	            this.state = 2218;
	            this.match(CSharpParser.COMMA);
	        }

	        this.state = 2221;
	        this.match(CSharpParser.CLOSE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_attribute_target() {
	    let localctx = new Global_attribute_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, CSharpParser.RULE_global_attribute_target);
	    try {
	        this.state = 2225;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2223;
	            this.keyword();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2224;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributes() {
	    let localctx = new AttributesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, CSharpParser.RULE_attributes);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2228; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2227;
	            this.attribute_section();
	            this.state = 2230; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===127);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_section() {
	    let localctx = new Attribute_sectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, CSharpParser.RULE_attribute_section);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2232;
	        this.match(CSharpParser.OPEN_BRACKET);
	        this.state = 2236;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
	        if(la_===1) {
	            this.state = 2233;
	            this.attribute_target();
	            this.state = 2234;
	            this.match(CSharpParser.COLON);

	        }
	        this.state = 2238;
	        this.attribute_list();
	        this.state = 2240;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===132) {
	            this.state = 2239;
	            this.match(CSharpParser.COMMA);
	        }

	        this.state = 2242;
	        this.match(CSharpParser.CLOSE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_target() {
	    let localctx = new Attribute_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, CSharpParser.RULE_attribute_target);
	    try {
	        this.state = 2246;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2244;
	            this.keyword();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2245;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_list() {
	    let localctx = new Attribute_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, CSharpParser.RULE_attribute_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2248;
	        this.attribute();
	        this.state = 2253;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,280,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2249;
	                this.match(CSharpParser.COMMA);
	                this.state = 2250;
	                this.attribute(); 
	            }
	            this.state = 2255;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,280,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute() {
	    let localctx = new AttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, CSharpParser.RULE_attribute);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2256;
	        this.namespace_or_type_name();
	        this.state = 2269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===129) {
	            this.state = 2257;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 2266;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 326684151) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 795681481) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 2947104097) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 1309179899) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 536872455) !== 0)) {
	                this.state = 2258;
	                this.attribute_argument();
	                this.state = 2263;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===132) {
	                    this.state = 2259;
	                    this.match(CSharpParser.COMMA);
	                    this.state = 2260;
	                    this.attribute_argument();
	                    this.state = 2265;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 2268;
	            this.match(CSharpParser.CLOSE_PARENS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_argument() {
	    let localctx = new Attribute_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, CSharpParser.RULE_attribute_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2274;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
	        if(la_===1) {
	            this.state = 2271;
	            this.identifier();
	            this.state = 2272;
	            this.match(CSharpParser.COLON);

	        }
	        this.state = 2276;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointer_type() {
	    let localctx = new Pointer_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, CSharpParser.RULE_pointer_type);
	    var _la = 0;
	    try {
	        this.state = 2293;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 18:
	        case 20:
	        case 21:
	        case 24:
	        case 29:
	        case 32:
	        case 34:
	        case 35:
	        case 38:
	        case 45:
	        case 48:
	        case 49:
	        case 51:
	        case 55:
	        case 58:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 81:
	        case 83:
	        case 85:
	        case 86:
	        case 87:
	        case 91:
	        case 99:
	        case 100:
	        case 102:
	        case 104:
	        case 106:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2280;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 18:
	            case 21:
	            case 24:
	            case 29:
	            case 34:
	            case 45:
	            case 55:
	            case 63:
	            case 83:
	            case 87:
	            case 99:
	            case 100:
	            case 104:
	                this.state = 2278;
	                this.simple_type();
	                break;
	            case 10:
	            case 11:
	            case 12:
	            case 14:
	            case 15:
	            case 16:
	            case 20:
	            case 32:
	            case 35:
	            case 38:
	            case 48:
	            case 49:
	            case 51:
	            case 58:
	            case 60:
	            case 61:
	            case 64:
	            case 68:
	            case 69:
	            case 71:
	            case 75:
	            case 81:
	            case 85:
	            case 86:
	            case 91:
	            case 102:
	            case 106:
	            case 110:
	            case 111:
	            case 113:
	            case 114:
	                this.state = 2279;
	                this.class_type();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===127 || _la===148) {
	                this.state = 2284;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 127:
	                    this.state = 2282;
	                    this.rank_specifier();
	                    break;
	                case 148:
	                    this.state = 2283;
	                    this.match(CSharpParser.INTERR);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 2288;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2289;
	            this.match(CSharpParser.STAR);
	            break;
	        case 108:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2291;
	            this.match(CSharpParser.VOID);
	            this.state = 2292;
	            this.match(CSharpParser.STAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixed_pointer_declarators() {
	    let localctx = new Fixed_pointer_declaratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, CSharpParser.RULE_fixed_pointer_declarators);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2295;
	        this.fixed_pointer_declarator();
	        this.state = 2300;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 2296;
	            this.match(CSharpParser.COMMA);
	            this.state = 2297;
	            this.fixed_pointer_declarator();
	            this.state = 2302;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixed_pointer_declarator() {
	    let localctx = new Fixed_pointer_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, CSharpParser.RULE_fixed_pointer_declarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2303;
	        this.identifier();
	        this.state = 2304;
	        this.match(CSharpParser.ASSIGNMENT);
	        this.state = 2305;
	        this.fixed_pointer_initializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixed_pointer_initializer() {
	    let localctx = new Fixed_pointer_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, CSharpParser.RULE_fixed_pointer_initializer);
	    try {
	        this.state = 2312;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 20:
	        case 21:
	        case 24:
	        case 25:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 38:
	        case 42:
	        case 45:
	        case 48:
	        case 49:
	        case 51:
	        case 55:
	        case 58:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 80:
	        case 81:
	        case 83:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 91:
	        case 94:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 104:
	        case 106:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 129:
	        case 135:
	        case 136:
	        case 137:
	        case 140:
	        case 142:
	        case 143:
	        case 144:
	        case 151:
	        case 152:
	        case 171:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2308;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
	            if(la_===1) {
	                this.state = 2307;
	                this.match(CSharpParser.AMP);

	            }
	            this.state = 2310;
	            this.expression();
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2311;
	            this.stackalloc_initializer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixed_size_buffer_declarator() {
	    let localctx = new Fixed_size_buffer_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, CSharpParser.RULE_fixed_size_buffer_declarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2314;
	        this.identifier();
	        this.state = 2315;
	        this.match(CSharpParser.OPEN_BRACKET);
	        this.state = 2316;
	        this.expression();
	        this.state = 2317;
	        this.match(CSharpParser.CLOSE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stackalloc_initializer() {
	    let localctx = new Stackalloc_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, CSharpParser.RULE_stackalloc_initializer);
	    var _la = 0;
	    try {
	        this.state = 2348;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2319;
	            this.match(CSharpParser.STACKALLOC);
	            this.state = 2320;
	            this.type_();
	            this.state = 2321;
	            this.match(CSharpParser.OPEN_BRACKET);
	            this.state = 2322;
	            this.expression();
	            this.state = 2323;
	            this.match(CSharpParser.CLOSE_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2325;
	            this.match(CSharpParser.STACKALLOC);
	            this.state = 2327;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 557177856) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3029016653) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 149555377) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 1073797803) !== 0)) {
	                this.state = 2326;
	                this.type_();
	            }

	            this.state = 2329;
	            this.match(CSharpParser.OPEN_BRACKET);
	            this.state = 2331;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 326684151) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 795681481) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 2947104097) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 1309179899) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 536872455) !== 0)) {
	                this.state = 2330;
	                this.expression();
	            }

	            this.state = 2333;
	            this.match(CSharpParser.CLOSE_BRACKET);
	            this.state = 2334;
	            this.match(CSharpParser.OPEN_BRACE);
	            this.state = 2335;
	            this.expression();
	            this.state = 2340;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,294,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2336;
	                    this.match(CSharpParser.COMMA);
	                    this.state = 2337;
	                    this.expression(); 
	                }
	                this.state = 2342;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,294,this._ctx);
	            }

	            this.state = 2344;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 2343;
	                this.match(CSharpParser.COMMA);
	            }

	            this.state = 2346;
	            this.match(CSharpParser.CLOSE_BRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	right_arrow() {
	    let localctx = new Right_arrowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, CSharpParser.RULE_right_arrow);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2350;
	        localctx.first = this.match(CSharpParser.ASSIGNMENT);
	        this.state = 2351;
	        localctx.second = this.match(CSharpParser.GT);
	        this.state = 2352;
	        if (!( (localctx.first == null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second == null ? 0 : localctx.second.tokenIndex))) {
	            throw new antlr4.error.FailedPredicateException(this, "$first.index + 1 == $second.index");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	right_shift() {
	    let localctx = new Right_shiftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, CSharpParser.RULE_right_shift);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2354;
	        localctx.first = this.match(CSharpParser.GT);
	        this.state = 2355;
	        localctx.second = this.match(CSharpParser.GT);
	        this.state = 2356;
	        if (!( (localctx.first == null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second == null ? 0 : localctx.second.tokenIndex))) {
	            throw new antlr4.error.FailedPredicateException(this, "$first.index + 1 == $second.index");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	right_shift_assignment() {
	    let localctx = new Right_shift_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, CSharpParser.RULE_right_shift_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2358;
	        localctx.first = this.match(CSharpParser.GT);
	        this.state = 2359;
	        localctx.second = this.match(CSharpParser.OP_GE);
	        this.state = 2360;
	        if (!( (localctx.first == null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second == null ? 0 : localctx.second.tokenIndex))) {
	            throw new antlr4.error.FailedPredicateException(this, "$first.index + 1 == $second.index");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, CSharpParser.RULE_literal);
	    try {
	        this.state = 2370;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 42:
	        case 96:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2362;
	            this.boolean_literal();
	            break;
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2363;
	            this.string_literal();
	            break;
	        case 116:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2364;
	            this.match(CSharpParser.INTEGER_LITERAL);
	            break;
	        case 117:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2365;
	            this.match(CSharpParser.HEX_INTEGER_LITERAL);
	            break;
	        case 118:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2366;
	            this.match(CSharpParser.BIN_INTEGER_LITERAL);
	            break;
	        case 119:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2367;
	            this.match(CSharpParser.REAL_LITERAL);
	            break;
	        case 120:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2368;
	            this.match(CSharpParser.CHARACTER_LITERAL);
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2369;
	            this.match(CSharpParser.NULL_);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolean_literal() {
	    let localctx = new Boolean_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, CSharpParser.RULE_boolean_literal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2372;
	        _la = this._input.LA(1);
	        if(!(_la===42 || _la===96)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string_literal() {
	    let localctx = new String_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, CSharpParser.RULE_string_literal);
	    try {
	        this.state = 2378;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2374;
	            this.interpolated_regular_string();
	            break;
	        case 124:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2375;
	            this.interpolated_verbatium_string();
	            break;
	        case 121:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2376;
	            this.match(CSharpParser.REGULAR_STRING);
	            break;
	        case 122:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2377;
	            this.match(CSharpParser.VERBATIUM_STRING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interpolated_regular_string() {
	    let localctx = new Interpolated_regular_stringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, CSharpParser.RULE_interpolated_regular_string);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2380;
	        this.match(CSharpParser.INTERPOLATED_REGULAR_STRING_START);
	        this.state = 2384;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3812088832) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3029017677) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 1240139965) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 536790397) !== 0) || ((((_la - 129)) & ~0x1f) === 0 && ((1 << (_la - 129)) & 12642753) !== 0) || ((((_la - 171)) & ~0x1f) === 0 && ((1 << (_la - 171)) & 75) !== 0)) {
	            this.state = 2381;
	            this.interpolated_regular_string_part();
	            this.state = 2386;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2387;
	        this.match(CSharpParser.DOUBLE_QUOTE_INSIDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interpolated_verbatium_string() {
	    let localctx = new Interpolated_verbatium_stringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, CSharpParser.RULE_interpolated_verbatium_string);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2389;
	        this.match(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START);
	        this.state = 2393;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3812088832) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3029017677) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 1240139965) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 536790397) !== 0) || ((((_la - 129)) & ~0x1f) === 0 && ((1 << (_la - 129)) & 12642753) !== 0) || ((((_la - 171)) & ~0x1f) === 0 && ((1 << (_la - 171)) & 147) !== 0)) {
	            this.state = 2390;
	            this.interpolated_verbatium_string_part();
	            this.state = 2395;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2396;
	        this.match(CSharpParser.DOUBLE_QUOTE_INSIDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interpolated_regular_string_part() {
	    let localctx = new Interpolated_regular_string_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, CSharpParser.RULE_interpolated_regular_string_part);
	    try {
	        this.state = 2402;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 20:
	        case 21:
	        case 24:
	        case 25:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 38:
	        case 42:
	        case 45:
	        case 48:
	        case 49:
	        case 51:
	        case 55:
	        case 58:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 80:
	        case 81:
	        case 83:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 91:
	        case 94:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 104:
	        case 106:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 129:
	        case 135:
	        case 136:
	        case 137:
	        case 140:
	        case 142:
	        case 143:
	        case 144:
	        case 151:
	        case 152:
	        case 171:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2398;
	            this.interpolated_string_expression();
	            break;
	        case 172:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2399;
	            this.match(CSharpParser.DOUBLE_CURLY_INSIDE);
	            break;
	        case 174:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2400;
	            this.match(CSharpParser.REGULAR_CHAR_INSIDE);
	            break;
	        case 177:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2401;
	            this.match(CSharpParser.REGULAR_STRING_INSIDE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interpolated_verbatium_string_part() {
	    let localctx = new Interpolated_verbatium_string_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, CSharpParser.RULE_interpolated_verbatium_string_part);
	    try {
	        this.state = 2408;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 20:
	        case 21:
	        case 24:
	        case 25:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 38:
	        case 42:
	        case 45:
	        case 48:
	        case 49:
	        case 51:
	        case 55:
	        case 58:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 71:
	        case 75:
	        case 80:
	        case 81:
	        case 83:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 91:
	        case 94:
	        case 96:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 104:
	        case 106:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 129:
	        case 135:
	        case 136:
	        case 137:
	        case 140:
	        case 142:
	        case 143:
	        case 144:
	        case 151:
	        case 152:
	        case 171:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2404;
	            this.interpolated_string_expression();
	            break;
	        case 172:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2405;
	            this.match(CSharpParser.DOUBLE_CURLY_INSIDE);
	            break;
	        case 175:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2406;
	            this.match(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE);
	            break;
	        case 178:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2407;
	            this.match(CSharpParser.VERBATIUM_INSIDE_STRING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interpolated_string_expression() {
	    let localctx = new Interpolated_string_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, CSharpParser.RULE_interpolated_string_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2410;
	        this.expression();
	        this.state = 2415;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===132) {
	            this.state = 2411;
	            this.match(CSharpParser.COMMA);
	            this.state = 2412;
	            this.expression();
	            this.state = 2417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===133) {
	            this.state = 2418;
	            this.match(CSharpParser.COLON);
	            this.state = 2420; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2419;
	                this.match(CSharpParser.FORMAT_STRING);
	                this.state = 2422; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===180);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, CSharpParser.RULE_keyword);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2426;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 4293796352) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1710915547) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 4291754927) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 40447) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_definition() {
	    let localctx = new Class_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, CSharpParser.RULE_class_definition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2428;
	        this.match(CSharpParser.CLASS);
	        this.state = 2429;
	        this.identifier();
	        this.state = 2431;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 2430;
	            this.type_parameter_list();
	        }

	        this.state = 2434;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===133) {
	            this.state = 2433;
	            this.class_base();
	        }

	        this.state = 2437;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===111) {
	            this.state = 2436;
	            this.type_parameter_constraints_clauses();
	        }

	        this.state = 2439;
	        this.class_body();
	        this.state = 2441;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 2440;
	            this.match(CSharpParser.SEMICOLON);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_definition() {
	    let localctx = new Struct_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, CSharpParser.RULE_struct_definition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===79 || _la===80) {
	            this.state = 2443;
	            _la = this._input.LA(1);
	            if(!(_la===79 || _la===80)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2446;
	        this.match(CSharpParser.STRUCT);
	        this.state = 2447;
	        this.identifier();
	        this.state = 2449;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 2448;
	            this.type_parameter_list();
	        }

	        this.state = 2452;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===133) {
	            this.state = 2451;
	            this.struct_interfaces();
	        }

	        this.state = 2455;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===111) {
	            this.state = 2454;
	            this.type_parameter_constraints_clauses();
	        }

	        this.state = 2457;
	        this.struct_body();
	        this.state = 2459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 2458;
	            this.match(CSharpParser.SEMICOLON);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_definition() {
	    let localctx = new Interface_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, CSharpParser.RULE_interface_definition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2461;
	        this.match(CSharpParser.INTERFACE);
	        this.state = 2462;
	        this.identifier();
	        this.state = 2464;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 2463;
	            this.variant_type_parameter_list();
	        }

	        this.state = 2467;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===133) {
	            this.state = 2466;
	            this.interface_base();
	        }

	        this.state = 2470;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===111) {
	            this.state = 2469;
	            this.type_parameter_constraints_clauses();
	        }

	        this.state = 2472;
	        this.class_body();
	        this.state = 2474;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 2473;
	            this.match(CSharpParser.SEMICOLON);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_definition() {
	    let localctx = new Enum_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, CSharpParser.RULE_enum_definition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2476;
	        this.match(CSharpParser.ENUM);
	        this.state = 2477;
	        this.identifier();
	        this.state = 2479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===133) {
	            this.state = 2478;
	            this.enum_base();
	        }

	        this.state = 2481;
	        this.enum_body();
	        this.state = 2483;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 2482;
	            this.match(CSharpParser.SEMICOLON);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delegate_definition() {
	    let localctx = new Delegate_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, CSharpParser.RULE_delegate_definition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2485;
	        this.match(CSharpParser.DELEGATE);
	        this.state = 2486;
	        this.return_type();
	        this.state = 2487;
	        this.identifier();
	        this.state = 2489;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 2488;
	            this.variant_type_parameter_list();
	        }

	        this.state = 2491;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 2493;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 557177856) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3033210957) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 1223364017) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 1342233259) !== 0)) {
	            this.state = 2492;
	            this.formal_parameter_list();
	        }

	        this.state = 2495;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 2497;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===111) {
	            this.state = 2496;
	            this.type_parameter_constraints_clauses();
	        }

	        this.state = 2499;
	        this.match(CSharpParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_declaration() {
	    let localctx = new Event_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, CSharpParser.RULE_event_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2501;
	        this.match(CSharpParser.EVENT);
	        this.state = 2502;
	        this.type_();
	        this.state = 2511;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2503;
	            this.variable_declarators();
	            this.state = 2504;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 2:
	            this.state = 2506;
	            this.member_name();
	            this.state = 2507;
	            this.match(CSharpParser.OPEN_BRACE);
	            this.state = 2508;
	            this.event_accessor_declarations();
	            this.state = 2509;
	            this.match(CSharpParser.CLOSE_BRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	field_declaration() {
	    let localctx = new Field_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, CSharpParser.RULE_field_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2513;
	        this.variable_declarators();
	        this.state = 2514;
	        this.match(CSharpParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	property_declaration() {
	    let localctx = new Property_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, CSharpParser.RULE_property_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2516;
	        this.member_name();
	        this.state = 2530;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 125:
	            this.state = 2517;
	            this.match(CSharpParser.OPEN_BRACE);
	            this.state = 2518;
	            this.accessor_declarations();
	            this.state = 2519;
	            this.match(CSharpParser.CLOSE_BRACE);
	            this.state = 2524;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===145) {
	                this.state = 2520;
	                this.match(CSharpParser.ASSIGNMENT);
	                this.state = 2521;
	                this.variable_initializer();
	                this.state = 2522;
	                this.match(CSharpParser.SEMICOLON);
	            }

	            break;
	        case 145:
	            this.state = 2526;
	            this.right_arrow();
	            this.state = 2527;
	            this.throwable_expression();
	            this.state = 2528;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant_declaration() {
	    let localctx = new Constant_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, CSharpParser.RULE_constant_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2532;
	        this.match(CSharpParser.CONST);
	        this.state = 2533;
	        this.type_();
	        this.state = 2534;
	        this.constant_declarators();
	        this.state = 2535;
	        this.match(CSharpParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexer_declaration() {
	    let localctx = new Indexer_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, CSharpParser.RULE_indexer_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2537;
	        this.match(CSharpParser.THIS);
	        this.state = 2538;
	        this.match(CSharpParser.OPEN_BRACKET);
	        this.state = 2539;
	        this.formal_parameter_list();
	        this.state = 2540;
	        this.match(CSharpParser.CLOSE_BRACKET);
	        this.state = 2549;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 125:
	            this.state = 2541;
	            this.match(CSharpParser.OPEN_BRACE);
	            this.state = 2542;
	            this.accessor_declarations();
	            this.state = 2543;
	            this.match(CSharpParser.CLOSE_BRACE);
	            break;
	        case 145:
	            this.state = 2545;
	            this.right_arrow();
	            this.state = 2546;
	            this.throwable_expression();
	            this.state = 2547;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destructor_definition() {
	    let localctx = new Destructor_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, CSharpParser.RULE_destructor_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2551;
	        this.match(CSharpParser.TILDE);
	        this.state = 2552;
	        this.identifier();
	        this.state = 2553;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 2554;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 2555;
	        this.body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructor_declaration() {
	    let localctx = new Constructor_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, CSharpParser.RULE_constructor_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2557;
	        this.identifier();
	        this.state = 2558;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 2560;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 557177856) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3033210957) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 1223364017) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 1342233259) !== 0)) {
	            this.state = 2559;
	            this.formal_parameter_list();
	        }

	        this.state = 2562;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 2564;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===133) {
	            this.state = 2563;
	            this.constructor_initializer();
	        }

	        this.state = 2566;
	        this.body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_declaration() {
	    let localctx = new Method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, CSharpParser.RULE_method_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2568;
	        this.method_member_name();
	        this.state = 2570;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 2569;
	            this.type_parameter_list();
	        }

	        this.state = 2572;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 2574;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 557177856) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3033210957) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 1223364017) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 1342233259) !== 0)) {
	            this.state = 2573;
	            this.formal_parameter_list();
	        }

	        this.state = 2576;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 2578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===111) {
	            this.state = 2577;
	            this.type_parameter_constraints_clauses();
	        }

	        this.state = 2585;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 125:
	        case 134:
	            this.state = 2580;
	            this.method_body();
	            break;
	        case 145:
	            this.state = 2581;
	            this.right_arrow();
	            this.state = 2582;
	            this.throwable_expression();
	            this.state = 2583;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_member_name() {
	    let localctx = new Method_member_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, CSharpParser.RULE_method_member_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2592;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2587;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 2588;
	            this.identifier();
	            this.state = 2589;
	            this.match(CSharpParser.DOUBLE_COLON);
	            this.state = 2590;
	            this.identifier();
	            break;

	        }
	        this.state = 2601;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,336,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2595;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===146) {
	                    this.state = 2594;
	                    this.type_argument_list();
	                }

	                this.state = 2597;
	                this.match(CSharpParser.DOT);
	                this.state = 2598;
	                this.identifier(); 
	            }
	            this.state = 2603;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,336,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_declaration() {
	    let localctx = new Operator_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, CSharpParser.RULE_operator_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2604;
	        this.match(CSharpParser.OPERATOR);
	        this.state = 2605;
	        this.overloadable_operator();
	        this.state = 2606;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 2608;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===54) {
	            this.state = 2607;
	            this.match(CSharpParser.IN);
	        }

	        this.state = 2610;
	        this.arg_declaration();
	        this.state = 2616;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===132) {
	            this.state = 2611;
	            this.match(CSharpParser.COMMA);
	            this.state = 2613;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===54) {
	                this.state = 2612;
	                this.match(CSharpParser.IN);
	            }

	            this.state = 2615;
	            this.arg_declaration();
	        }

	        this.state = 2618;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 2624;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 125:
	        case 134:
	            this.state = 2619;
	            this.body();
	            break;
	        case 145:
	            this.state = 2620;
	            this.right_arrow();
	            this.state = 2621;
	            this.throwable_expression();
	            this.state = 2622;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg_declaration() {
	    let localctx = new Arg_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, CSharpParser.RULE_arg_declaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2626;
	        this.type_();
	        this.state = 2627;
	        this.identifier();
	        this.state = 2630;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===145) {
	            this.state = 2628;
	            this.match(CSharpParser.ASSIGNMENT);
	            this.state = 2629;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_invocation() {
	    let localctx = new Method_invocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, CSharpParser.RULE_method_invocation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2632;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 2634;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 326684151) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 1869427401) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 2947104097) !== 0) || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 941752301) !== 0) || ((((_la - 140)) & ~0x1f) === 0 && ((1 << (_la - 140)) & 2147489821) !== 0)) {
	            this.state = 2633;
	            this.argument_list();
	        }

	        this.state = 2636;
	        this.match(CSharpParser.CLOSE_PARENS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_creation_expression() {
	    let localctx = new Object_creation_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, CSharpParser.RULE_object_creation_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2638;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 2640;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 326684151) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 1869427401) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 2947104097) !== 0) || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 941752301) !== 0) || ((((_la - 140)) & ~0x1f) === 0 && ((1 << (_la - 140)) & 2147489821) !== 0)) {
	            this.state = 2639;
	            this.argument_list();
	        }

	        this.state = 2642;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 2644;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	        if(la_===1) {
	            this.state = 2643;
	            this.object_or_collection_initializer();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, CSharpParser.RULE_identifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2646;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 1170432) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 873136201) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 6424737) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 6929) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CSharpParser.EOF = antlr4.Token.EOF;
CSharpParser.BYTE_ORDER_MARK = 1;
CSharpParser.SINGLE_LINE_DOC_COMMENT = 2;
CSharpParser.EMPTY_DELIMITED_DOC_COMMENT = 3;
CSharpParser.DELIMITED_DOC_COMMENT = 4;
CSharpParser.SINGLE_LINE_COMMENT = 5;
CSharpParser.DELIMITED_COMMENT = 6;
CSharpParser.WHITESPACES = 7;
CSharpParser.SHARP = 8;
CSharpParser.ABSTRACT = 9;
CSharpParser.ADD = 10;
CSharpParser.ALIAS = 11;
CSharpParser.ARGLIST = 12;
CSharpParser.AS = 13;
CSharpParser.ASCENDING = 14;
CSharpParser.ASYNC = 15;
CSharpParser.AWAIT = 16;
CSharpParser.BASE = 17;
CSharpParser.BOOL = 18;
CSharpParser.BREAK = 19;
CSharpParser.BY = 20;
CSharpParser.BYTE = 21;
CSharpParser.CASE = 22;
CSharpParser.CATCH = 23;
CSharpParser.CHAR = 24;
CSharpParser.CHECKED = 25;
CSharpParser.CLASS = 26;
CSharpParser.CONST = 27;
CSharpParser.CONTINUE = 28;
CSharpParser.DECIMAL = 29;
CSharpParser.DEFAULT = 30;
CSharpParser.DELEGATE = 31;
CSharpParser.DESCENDING = 32;
CSharpParser.DO = 33;
CSharpParser.DOUBLE = 34;
CSharpParser.DYNAMIC = 35;
CSharpParser.ELSE = 36;
CSharpParser.ENUM = 37;
CSharpParser.EQUALS = 38;
CSharpParser.EVENT = 39;
CSharpParser.EXPLICIT = 40;
CSharpParser.EXTERN = 41;
CSharpParser.FALSE = 42;
CSharpParser.FINALLY = 43;
CSharpParser.FIXED = 44;
CSharpParser.FLOAT = 45;
CSharpParser.FOR = 46;
CSharpParser.FOREACH = 47;
CSharpParser.FROM = 48;
CSharpParser.GET = 49;
CSharpParser.GOTO = 50;
CSharpParser.GROUP = 51;
CSharpParser.IF = 52;
CSharpParser.IMPLICIT = 53;
CSharpParser.IN = 54;
CSharpParser.INT = 55;
CSharpParser.INTERFACE = 56;
CSharpParser.INTERNAL = 57;
CSharpParser.INTO = 58;
CSharpParser.IS = 59;
CSharpParser.JOIN = 60;
CSharpParser.LET = 61;
CSharpParser.LOCK = 62;
CSharpParser.LONG = 63;
CSharpParser.NAMEOF = 64;
CSharpParser.NAMESPACE = 65;
CSharpParser.NEW = 66;
CSharpParser.NULL_ = 67;
CSharpParser.OBJECT = 68;
CSharpParser.ON = 69;
CSharpParser.OPERATOR = 70;
CSharpParser.ORDERBY = 71;
CSharpParser.OUT = 72;
CSharpParser.OVERRIDE = 73;
CSharpParser.PARAMS = 74;
CSharpParser.PARTIAL = 75;
CSharpParser.PRIVATE = 76;
CSharpParser.PROTECTED = 77;
CSharpParser.PUBLIC = 78;
CSharpParser.READONLY = 79;
CSharpParser.REF = 80;
CSharpParser.REMOVE = 81;
CSharpParser.RETURN = 82;
CSharpParser.SBYTE = 83;
CSharpParser.SEALED = 84;
CSharpParser.SELECT = 85;
CSharpParser.SET = 86;
CSharpParser.SHORT = 87;
CSharpParser.SIZEOF = 88;
CSharpParser.STACKALLOC = 89;
CSharpParser.STATIC = 90;
CSharpParser.STRING = 91;
CSharpParser.STRUCT = 92;
CSharpParser.SWITCH = 93;
CSharpParser.THIS = 94;
CSharpParser.THROW = 95;
CSharpParser.TRUE = 96;
CSharpParser.TRY = 97;
CSharpParser.TYPEOF = 98;
CSharpParser.UINT = 99;
CSharpParser.ULONG = 100;
CSharpParser.UNCHECKED = 101;
CSharpParser.UNMANAGED = 102;
CSharpParser.UNSAFE = 103;
CSharpParser.USHORT = 104;
CSharpParser.USING = 105;
CSharpParser.VAR = 106;
CSharpParser.VIRTUAL = 107;
CSharpParser.VOID = 108;
CSharpParser.VOLATILE = 109;
CSharpParser.WHEN = 110;
CSharpParser.WHERE = 111;
CSharpParser.WHILE = 112;
CSharpParser.YIELD = 113;
CSharpParser.IDENTIFIER = 114;
CSharpParser.LITERAL_ACCESS = 115;
CSharpParser.INTEGER_LITERAL = 116;
CSharpParser.HEX_INTEGER_LITERAL = 117;
CSharpParser.BIN_INTEGER_LITERAL = 118;
CSharpParser.REAL_LITERAL = 119;
CSharpParser.CHARACTER_LITERAL = 120;
CSharpParser.REGULAR_STRING = 121;
CSharpParser.VERBATIUM_STRING = 122;
CSharpParser.INTERPOLATED_REGULAR_STRING_START = 123;
CSharpParser.INTERPOLATED_VERBATIUM_STRING_START = 124;
CSharpParser.OPEN_BRACE = 125;
CSharpParser.CLOSE_BRACE = 126;
CSharpParser.OPEN_BRACKET = 127;
CSharpParser.CLOSE_BRACKET = 128;
CSharpParser.OPEN_PARENS = 129;
CSharpParser.CLOSE_PARENS = 130;
CSharpParser.DOT = 131;
CSharpParser.COMMA = 132;
CSharpParser.COLON = 133;
CSharpParser.SEMICOLON = 134;
CSharpParser.PLUS = 135;
CSharpParser.MINUS = 136;
CSharpParser.STAR = 137;
CSharpParser.DIV = 138;
CSharpParser.PERCENT = 139;
CSharpParser.AMP = 140;
CSharpParser.BITWISE_OR = 141;
CSharpParser.CARET = 142;
CSharpParser.BANG = 143;
CSharpParser.TILDE = 144;
CSharpParser.ASSIGNMENT = 145;
CSharpParser.LT = 146;
CSharpParser.GT = 147;
CSharpParser.INTERR = 148;
CSharpParser.DOUBLE_COLON = 149;
CSharpParser.OP_COALESCING = 150;
CSharpParser.OP_INC = 151;
CSharpParser.OP_DEC = 152;
CSharpParser.OP_AND = 153;
CSharpParser.OP_OR = 154;
CSharpParser.OP_PTR = 155;
CSharpParser.OP_EQ = 156;
CSharpParser.OP_NE = 157;
CSharpParser.OP_LE = 158;
CSharpParser.OP_GE = 159;
CSharpParser.OP_ADD_ASSIGNMENT = 160;
CSharpParser.OP_SUB_ASSIGNMENT = 161;
CSharpParser.OP_MULT_ASSIGNMENT = 162;
CSharpParser.OP_DIV_ASSIGNMENT = 163;
CSharpParser.OP_MOD_ASSIGNMENT = 164;
CSharpParser.OP_AND_ASSIGNMENT = 165;
CSharpParser.OP_OR_ASSIGNMENT = 166;
CSharpParser.OP_XOR_ASSIGNMENT = 167;
CSharpParser.OP_LEFT_SHIFT = 168;
CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT = 169;
CSharpParser.OP_COALESCING_ASSIGNMENT = 170;
CSharpParser.OP_RANGE = 171;
CSharpParser.DOUBLE_CURLY_INSIDE = 172;
CSharpParser.OPEN_BRACE_INSIDE = 173;
CSharpParser.REGULAR_CHAR_INSIDE = 174;
CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE = 175;
CSharpParser.DOUBLE_QUOTE_INSIDE = 176;
CSharpParser.REGULAR_STRING_INSIDE = 177;
CSharpParser.VERBATIUM_INSIDE_STRING = 178;
CSharpParser.CLOSE_BRACE_INSIDE = 179;
CSharpParser.FORMAT_STRING = 180;
CSharpParser.DIRECTIVE_WHITESPACES = 181;
CSharpParser.DIGITS = 182;
CSharpParser.DEFINE = 183;
CSharpParser.UNDEF = 184;
CSharpParser.ELIF = 185;
CSharpParser.ENDIF = 186;
CSharpParser.LINE = 187;
CSharpParser.ERROR = 188;
CSharpParser.WARNING = 189;
CSharpParser.REGION = 190;
CSharpParser.ENDREGION = 191;
CSharpParser.PRAGMA = 192;
CSharpParser.NULLABLE = 193;
CSharpParser.DIRECTIVE_HIDDEN = 194;
CSharpParser.CONDITIONAL_SYMBOL = 195;
CSharpParser.DIRECTIVE_NEW_LINE = 196;
CSharpParser.TEXT = 197;
CSharpParser.DOUBLE_CURLY_CLOSE_INSIDE = 198;

CSharpParser.RULE_compilation_unit = 0;
CSharpParser.RULE_namespace_or_type_name = 1;
CSharpParser.RULE_type_ = 2;
CSharpParser.RULE_base_type = 3;
CSharpParser.RULE_tuple_type = 4;
CSharpParser.RULE_tuple_element = 5;
CSharpParser.RULE_simple_type = 6;
CSharpParser.RULE_numeric_type = 7;
CSharpParser.RULE_integral_type = 8;
CSharpParser.RULE_floating_point_type = 9;
CSharpParser.RULE_class_type = 10;
CSharpParser.RULE_type_argument_list = 11;
CSharpParser.RULE_argument_list = 12;
CSharpParser.RULE_argument = 13;
CSharpParser.RULE_expression = 14;
CSharpParser.RULE_non_assignment_expression = 15;
CSharpParser.RULE_assignment = 16;
CSharpParser.RULE_assignment_operator = 17;
CSharpParser.RULE_conditional_expression = 18;
CSharpParser.RULE_null_coalescing_expression = 19;
CSharpParser.RULE_conditional_or_expression = 20;
CSharpParser.RULE_conditional_and_expression = 21;
CSharpParser.RULE_inclusive_or_expression = 22;
CSharpParser.RULE_exclusive_or_expression = 23;
CSharpParser.RULE_and_expression = 24;
CSharpParser.RULE_equality_expression = 25;
CSharpParser.RULE_relational_expression = 26;
CSharpParser.RULE_shift_expression = 27;
CSharpParser.RULE_additive_expression = 28;
CSharpParser.RULE_multiplicative_expression = 29;
CSharpParser.RULE_switch_expression = 30;
CSharpParser.RULE_switch_expression_arms = 31;
CSharpParser.RULE_switch_expression_arm = 32;
CSharpParser.RULE_range_expression = 33;
CSharpParser.RULE_unary_expression = 34;
CSharpParser.RULE_cast_expression = 35;
CSharpParser.RULE_primary_expression = 36;
CSharpParser.RULE_primary_expression_start = 37;
CSharpParser.RULE_throwable_expression = 38;
CSharpParser.RULE_throw_expression = 39;
CSharpParser.RULE_member_access = 40;
CSharpParser.RULE_bracket_expression = 41;
CSharpParser.RULE_indexer_argument = 42;
CSharpParser.RULE_predefined_type = 43;
CSharpParser.RULE_expression_list = 44;
CSharpParser.RULE_object_or_collection_initializer = 45;
CSharpParser.RULE_object_initializer = 46;
CSharpParser.RULE_member_initializer_list = 47;
CSharpParser.RULE_member_initializer = 48;
CSharpParser.RULE_initializer_value = 49;
CSharpParser.RULE_collection_initializer = 50;
CSharpParser.RULE_element_initializer = 51;
CSharpParser.RULE_anonymous_object_initializer = 52;
CSharpParser.RULE_member_declarator_list = 53;
CSharpParser.RULE_member_declarator = 54;
CSharpParser.RULE_unbound_type_name = 55;
CSharpParser.RULE_generic_dimension_specifier = 56;
CSharpParser.RULE_isType = 57;
CSharpParser.RULE_isTypePatternArms = 58;
CSharpParser.RULE_isTypePatternArm = 59;
CSharpParser.RULE_lambda_expression = 60;
CSharpParser.RULE_anonymous_function_signature = 61;
CSharpParser.RULE_explicit_anonymous_function_parameter_list = 62;
CSharpParser.RULE_explicit_anonymous_function_parameter = 63;
CSharpParser.RULE_implicit_anonymous_function_parameter_list = 64;
CSharpParser.RULE_anonymous_function_body = 65;
CSharpParser.RULE_query_expression = 66;
CSharpParser.RULE_from_clause = 67;
CSharpParser.RULE_query_body = 68;
CSharpParser.RULE_query_body_clause = 69;
CSharpParser.RULE_let_clause = 70;
CSharpParser.RULE_where_clause = 71;
CSharpParser.RULE_combined_join_clause = 72;
CSharpParser.RULE_orderby_clause = 73;
CSharpParser.RULE_ordering = 74;
CSharpParser.RULE_select_or_group_clause = 75;
CSharpParser.RULE_query_continuation = 76;
CSharpParser.RULE_statement = 77;
CSharpParser.RULE_declarationStatement = 78;
CSharpParser.RULE_local_function_declaration = 79;
CSharpParser.RULE_local_function_header = 80;
CSharpParser.RULE_local_function_modifiers = 81;
CSharpParser.RULE_local_function_body = 82;
CSharpParser.RULE_labeled_Statement = 83;
CSharpParser.RULE_embedded_statement = 84;
CSharpParser.RULE_simple_embedded_statement = 85;
CSharpParser.RULE_block = 86;
CSharpParser.RULE_local_variable_declaration = 87;
CSharpParser.RULE_local_variable_type = 88;
CSharpParser.RULE_local_variable_declarator = 89;
CSharpParser.RULE_local_variable_initializer = 90;
CSharpParser.RULE_local_constant_declaration = 91;
CSharpParser.RULE_if_body = 92;
CSharpParser.RULE_switch_section = 93;
CSharpParser.RULE_switch_label = 94;
CSharpParser.RULE_case_guard = 95;
CSharpParser.RULE_statement_list = 96;
CSharpParser.RULE_for_initializer = 97;
CSharpParser.RULE_for_iterator = 98;
CSharpParser.RULE_catch_clauses = 99;
CSharpParser.RULE_specific_catch_clause = 100;
CSharpParser.RULE_general_catch_clause = 101;
CSharpParser.RULE_exception_filter = 102;
CSharpParser.RULE_finally_clause = 103;
CSharpParser.RULE_resource_acquisition = 104;
CSharpParser.RULE_namespace_declaration = 105;
CSharpParser.RULE_qualified_identifier = 106;
CSharpParser.RULE_namespace_body = 107;
CSharpParser.RULE_extern_alias_directives = 108;
CSharpParser.RULE_extern_alias_directive = 109;
CSharpParser.RULE_using_directives = 110;
CSharpParser.RULE_using_directive = 111;
CSharpParser.RULE_namespace_member_declarations = 112;
CSharpParser.RULE_namespace_member_declaration = 113;
CSharpParser.RULE_type_declaration = 114;
CSharpParser.RULE_qualified_alias_member = 115;
CSharpParser.RULE_type_parameter_list = 116;
CSharpParser.RULE_type_parameter = 117;
CSharpParser.RULE_class_base = 118;
CSharpParser.RULE_interface_type_list = 119;
CSharpParser.RULE_type_parameter_constraints_clauses = 120;
CSharpParser.RULE_type_parameter_constraints_clause = 121;
CSharpParser.RULE_type_parameter_constraints = 122;
CSharpParser.RULE_primary_constraint = 123;
CSharpParser.RULE_secondary_constraints = 124;
CSharpParser.RULE_constructor_constraint = 125;
CSharpParser.RULE_class_body = 126;
CSharpParser.RULE_class_member_declarations = 127;
CSharpParser.RULE_class_member_declaration = 128;
CSharpParser.RULE_all_member_modifiers = 129;
CSharpParser.RULE_all_member_modifier = 130;
CSharpParser.RULE_common_member_declaration = 131;
CSharpParser.RULE_typed_member_declaration = 132;
CSharpParser.RULE_constant_declarators = 133;
CSharpParser.RULE_constant_declarator = 134;
CSharpParser.RULE_variable_declarators = 135;
CSharpParser.RULE_variable_declarator = 136;
CSharpParser.RULE_variable_initializer = 137;
CSharpParser.RULE_return_type = 138;
CSharpParser.RULE_member_name = 139;
CSharpParser.RULE_method_body = 140;
CSharpParser.RULE_formal_parameter_list = 141;
CSharpParser.RULE_fixed_parameters = 142;
CSharpParser.RULE_fixed_parameter = 143;
CSharpParser.RULE_parameter_modifier = 144;
CSharpParser.RULE_parameter_array = 145;
CSharpParser.RULE_accessor_declarations = 146;
CSharpParser.RULE_get_accessor_declaration = 147;
CSharpParser.RULE_set_accessor_declaration = 148;
CSharpParser.RULE_accessor_modifier = 149;
CSharpParser.RULE_accessor_body = 150;
CSharpParser.RULE_event_accessor_declarations = 151;
CSharpParser.RULE_add_accessor_declaration = 152;
CSharpParser.RULE_remove_accessor_declaration = 153;
CSharpParser.RULE_overloadable_operator = 154;
CSharpParser.RULE_conversion_operator_declarator = 155;
CSharpParser.RULE_constructor_initializer = 156;
CSharpParser.RULE_body = 157;
CSharpParser.RULE_struct_interfaces = 158;
CSharpParser.RULE_struct_body = 159;
CSharpParser.RULE_struct_member_declaration = 160;
CSharpParser.RULE_array_type = 161;
CSharpParser.RULE_rank_specifier = 162;
CSharpParser.RULE_array_initializer = 163;
CSharpParser.RULE_variant_type_parameter_list = 164;
CSharpParser.RULE_variant_type_parameter = 165;
CSharpParser.RULE_variance_annotation = 166;
CSharpParser.RULE_interface_base = 167;
CSharpParser.RULE_interface_body = 168;
CSharpParser.RULE_interface_member_declaration = 169;
CSharpParser.RULE_interface_accessors = 170;
CSharpParser.RULE_enum_base = 171;
CSharpParser.RULE_enum_body = 172;
CSharpParser.RULE_enum_member_declaration = 173;
CSharpParser.RULE_global_attribute_section = 174;
CSharpParser.RULE_global_attribute_target = 175;
CSharpParser.RULE_attributes = 176;
CSharpParser.RULE_attribute_section = 177;
CSharpParser.RULE_attribute_target = 178;
CSharpParser.RULE_attribute_list = 179;
CSharpParser.RULE_attribute = 180;
CSharpParser.RULE_attribute_argument = 181;
CSharpParser.RULE_pointer_type = 182;
CSharpParser.RULE_fixed_pointer_declarators = 183;
CSharpParser.RULE_fixed_pointer_declarator = 184;
CSharpParser.RULE_fixed_pointer_initializer = 185;
CSharpParser.RULE_fixed_size_buffer_declarator = 186;
CSharpParser.RULE_stackalloc_initializer = 187;
CSharpParser.RULE_right_arrow = 188;
CSharpParser.RULE_right_shift = 189;
CSharpParser.RULE_right_shift_assignment = 190;
CSharpParser.RULE_literal = 191;
CSharpParser.RULE_boolean_literal = 192;
CSharpParser.RULE_string_literal = 193;
CSharpParser.RULE_interpolated_regular_string = 194;
CSharpParser.RULE_interpolated_verbatium_string = 195;
CSharpParser.RULE_interpolated_regular_string_part = 196;
CSharpParser.RULE_interpolated_verbatium_string_part = 197;
CSharpParser.RULE_interpolated_string_expression = 198;
CSharpParser.RULE_keyword = 199;
CSharpParser.RULE_class_definition = 200;
CSharpParser.RULE_struct_definition = 201;
CSharpParser.RULE_interface_definition = 202;
CSharpParser.RULE_enum_definition = 203;
CSharpParser.RULE_delegate_definition = 204;
CSharpParser.RULE_event_declaration = 205;
CSharpParser.RULE_field_declaration = 206;
CSharpParser.RULE_property_declaration = 207;
CSharpParser.RULE_constant_declaration = 208;
CSharpParser.RULE_indexer_declaration = 209;
CSharpParser.RULE_destructor_definition = 210;
CSharpParser.RULE_constructor_declaration = 211;
CSharpParser.RULE_method_declaration = 212;
CSharpParser.RULE_method_member_name = 213;
CSharpParser.RULE_operator_declaration = 214;
CSharpParser.RULE_arg_declaration = 215;
CSharpParser.RULE_method_invocation = 216;
CSharpParser.RULE_object_creation_expression = 217;
CSharpParser.RULE_identifier = 218;

class Compilation_unitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_compilation_unit;
    }

	EOF() {
	    return this.getToken(CSharpParser.EOF, 0);
	};

	BYTE_ORDER_MARK() {
	    return this.getToken(CSharpParser.BYTE_ORDER_MARK, 0);
	};

	extern_alias_directives() {
	    return this.getTypedRuleContext(Extern_alias_directivesContext,0);
	};

	using_directives() {
	    return this.getTypedRuleContext(Using_directivesContext,0);
	};

	global_attribute_section = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Global_attribute_sectionContext);
	    } else {
	        return this.getTypedRuleContext(Global_attribute_sectionContext,i);
	    }
	};

	namespace_member_declarations() {
	    return this.getTypedRuleContext(Namespace_member_declarationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCompilation_unit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCompilation_unit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCompilation_unit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Namespace_or_type_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_namespace_or_type_name;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	qualified_alias_member() {
	    return this.getTypedRuleContext(Qualified_alias_memberContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.DOT);
	    } else {
	        return this.getToken(CSharpParser.DOT, i);
	    }
	};


	type_argument_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_argument_listContext);
	    } else {
	        return this.getTypedRuleContext(Type_argument_listContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNamespace_or_type_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNamespace_or_type_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNamespace_or_type_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_;
    }

	base_type() {
	    return this.getTypedRuleContext(Base_typeContext,0);
	};

	INTERR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.INTERR);
	    } else {
	        return this.getToken(CSharpParser.INTERR, i);
	    }
	};


	rank_specifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Rank_specifierContext);
	    } else {
	        return this.getTypedRuleContext(Rank_specifierContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.STAR);
	    } else {
	        return this.getToken(CSharpParser.STAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Base_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_base_type;
    }

	simple_type() {
	    return this.getTypedRuleContext(Simple_typeContext,0);
	};

	class_type() {
	    return this.getTypedRuleContext(Class_typeContext,0);
	};

	VOID() {
	    return this.getToken(CSharpParser.VOID, 0);
	};

	STAR() {
	    return this.getToken(CSharpParser.STAR, 0);
	};

	tuple_type() {
	    return this.getTypedRuleContext(Tuple_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterBase_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitBase_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitBase_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Tuple_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_tuple_type;
    }

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	tuple_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tuple_elementContext);
	    } else {
	        return this.getTypedRuleContext(Tuple_elementContext,i);
	    }
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterTuple_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitTuple_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitTuple_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Tuple_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_tuple_element;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterTuple_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitTuple_element(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitTuple_element(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Simple_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_simple_type;
    }

	numeric_type() {
	    return this.getTypedRuleContext(Numeric_typeContext,0);
	};

	BOOL() {
	    return this.getToken(CSharpParser.BOOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSimple_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSimple_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSimple_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Numeric_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_numeric_type;
    }

	integral_type() {
	    return this.getTypedRuleContext(Integral_typeContext,0);
	};

	floating_point_type() {
	    return this.getTypedRuleContext(Floating_point_typeContext,0);
	};

	DECIMAL() {
	    return this.getToken(CSharpParser.DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNumeric_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNumeric_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNumeric_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Integral_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_integral_type;
    }

	SBYTE() {
	    return this.getToken(CSharpParser.SBYTE, 0);
	};

	BYTE() {
	    return this.getToken(CSharpParser.BYTE, 0);
	};

	SHORT() {
	    return this.getToken(CSharpParser.SHORT, 0);
	};

	USHORT() {
	    return this.getToken(CSharpParser.USHORT, 0);
	};

	INT() {
	    return this.getToken(CSharpParser.INT, 0);
	};

	UINT() {
	    return this.getToken(CSharpParser.UINT, 0);
	};

	LONG() {
	    return this.getToken(CSharpParser.LONG, 0);
	};

	ULONG() {
	    return this.getToken(CSharpParser.ULONG, 0);
	};

	CHAR() {
	    return this.getToken(CSharpParser.CHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIntegral_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIntegral_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIntegral_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Floating_point_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_floating_point_type;
    }

	FLOAT() {
	    return this.getToken(CSharpParser.FLOAT, 0);
	};

	DOUBLE() {
	    return this.getToken(CSharpParser.DOUBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFloating_point_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFloating_point_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFloating_point_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_class_type;
    }

	namespace_or_type_name() {
	    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
	};

	OBJECT() {
	    return this.getToken(CSharpParser.OBJECT, 0);
	};

	DYNAMIC() {
	    return this.getToken(CSharpParser.DYNAMIC, 0);
	};

	STRING() {
	    return this.getToken(CSharpParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterClass_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitClass_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitClass_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_argument_list;
    }

	LT() {
	    return this.getToken(CSharpParser.LT, 0);
	};

	type_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_Context);
	    } else {
	        return this.getTypedRuleContext(Type_Context,i);
	    }
	};

	GT() {
	    return this.getToken(CSharpParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_argument_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_argument_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_argument_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_argument_list;
    }

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterArgument_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitArgument_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitArgument_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_argument;
        this.refout = null;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	VAR() {
	    return this.getToken(CSharpParser.VAR, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	OUT() {
	    return this.getToken(CSharpParser.OUT, 0);
	};

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_expression;
    }

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	non_assignment_expression() {
	    return this.getTypedRuleContext(Non_assignment_expressionContext,0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Non_assignment_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_non_assignment_expression;
    }

	lambda_expression() {
	    return this.getTypedRuleContext(Lambda_expressionContext,0);
	};

	query_expression() {
	    return this.getTypedRuleContext(Query_expressionContext,0);
	};

	conditional_expression() {
	    return this.getTypedRuleContext(Conditional_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNon_assignment_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNon_assignment_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNon_assignment_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_assignment;
    }

	unary_expression() {
	    return this.getTypedRuleContext(Unary_expressionContext,0);
	};

	assignment_operator() {
	    return this.getTypedRuleContext(Assignment_operatorContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	OP_COALESCING_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_COALESCING_ASSIGNMENT, 0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assignment_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_assignment_operator;
    }

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	OP_ADD_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_ADD_ASSIGNMENT, 0);
	};

	OP_SUB_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_SUB_ASSIGNMENT, 0);
	};

	OP_MULT_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_MULT_ASSIGNMENT, 0);
	};

	OP_DIV_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_DIV_ASSIGNMENT, 0);
	};

	OP_MOD_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_MOD_ASSIGNMENT, 0);
	};

	OP_AND_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_AND_ASSIGNMENT, 0);
	};

	OP_OR_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_OR_ASSIGNMENT, 0);
	};

	OP_XOR_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_XOR_ASSIGNMENT, 0);
	};

	OP_LEFT_SHIFT_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT, 0);
	};

	right_shift_assignment() {
	    return this.getTypedRuleContext(Right_shift_assignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAssignment_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAssignment_operator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAssignment_operator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Conditional_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_conditional_expression;
    }

	null_coalescing_expression() {
	    return this.getTypedRuleContext(Null_coalescing_expressionContext,0);
	};

	INTERR() {
	    return this.getToken(CSharpParser.INTERR, 0);
	};

	throwable_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Throwable_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Throwable_expressionContext,i);
	    }
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConditional_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConditional_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConditional_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Null_coalescing_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_null_coalescing_expression;
    }

	conditional_or_expression() {
	    return this.getTypedRuleContext(Conditional_or_expressionContext,0);
	};

	OP_COALESCING() {
	    return this.getToken(CSharpParser.OP_COALESCING, 0);
	};

	null_coalescing_expression() {
	    return this.getTypedRuleContext(Null_coalescing_expressionContext,0);
	};

	throw_expression() {
	    return this.getTypedRuleContext(Throw_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNull_coalescing_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNull_coalescing_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNull_coalescing_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Conditional_or_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_conditional_or_expression;
    }

	conditional_and_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Conditional_and_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Conditional_and_expressionContext,i);
	    }
	};

	OP_OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_OR);
	    } else {
	        return this.getToken(CSharpParser.OP_OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConditional_or_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConditional_or_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConditional_or_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Conditional_and_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_conditional_and_expression;
    }

	inclusive_or_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Inclusive_or_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Inclusive_or_expressionContext,i);
	    }
	};

	OP_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_AND);
	    } else {
	        return this.getToken(CSharpParser.OP_AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConditional_and_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConditional_and_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConditional_and_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Inclusive_or_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_inclusive_or_expression;
    }

	exclusive_or_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Exclusive_or_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Exclusive_or_expressionContext,i);
	    }
	};

	BITWISE_OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.BITWISE_OR);
	    } else {
	        return this.getToken(CSharpParser.BITWISE_OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInclusive_or_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInclusive_or_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInclusive_or_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Exclusive_or_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_exclusive_or_expression;
    }

	and_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(And_expressionContext);
	    } else {
	        return this.getTypedRuleContext(And_expressionContext,i);
	    }
	};

	CARET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.CARET);
	    } else {
	        return this.getToken(CSharpParser.CARET, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExclusive_or_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExclusive_or_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExclusive_or_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class And_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_and_expression;
    }

	equality_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Equality_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Equality_expressionContext,i);
	    }
	};

	AMP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.AMP);
	    } else {
	        return this.getToken(CSharpParser.AMP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAnd_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAnd_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAnd_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Equality_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_equality_expression;
    }

	relational_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Relational_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Relational_expressionContext,i);
	    }
	};

	OP_EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_EQ);
	    } else {
	        return this.getToken(CSharpParser.OP_EQ, i);
	    }
	};


	OP_NE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_NE);
	    } else {
	        return this.getToken(CSharpParser.OP_NE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEquality_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEquality_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEquality_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Relational_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_relational_expression;
    }

	shift_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Shift_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Shift_expressionContext,i);
	    }
	};

	IS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.IS);
	    } else {
	        return this.getToken(CSharpParser.IS, i);
	    }
	};


	isType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IsTypeContext);
	    } else {
	        return this.getTypedRuleContext(IsTypeContext,i);
	    }
	};

	AS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.AS);
	    } else {
	        return this.getToken(CSharpParser.AS, i);
	    }
	};


	type_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_Context);
	    } else {
	        return this.getTypedRuleContext(Type_Context,i);
	    }
	};

	LT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.LT);
	    } else {
	        return this.getToken(CSharpParser.LT, i);
	    }
	};


	GT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.GT);
	    } else {
	        return this.getToken(CSharpParser.GT, i);
	    }
	};


	OP_LE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_LE);
	    } else {
	        return this.getToken(CSharpParser.OP_LE, i);
	    }
	};


	OP_GE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_GE);
	    } else {
	        return this.getToken(CSharpParser.OP_GE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterRelational_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitRelational_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitRelational_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Shift_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_shift_expression;
    }

	additive_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Additive_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Additive_expressionContext,i);
	    }
	};

	OP_LEFT_SHIFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_LEFT_SHIFT);
	    } else {
	        return this.getToken(CSharpParser.OP_LEFT_SHIFT, i);
	    }
	};


	right_shift = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Right_shiftContext);
	    } else {
	        return this.getTypedRuleContext(Right_shiftContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterShift_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitShift_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitShift_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Additive_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_additive_expression;
    }

	multiplicative_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Multiplicative_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Multiplicative_expressionContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.PLUS);
	    } else {
	        return this.getToken(CSharpParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.MINUS);
	    } else {
	        return this.getToken(CSharpParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAdditive_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAdditive_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAdditive_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Multiplicative_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_multiplicative_expression;
    }

	switch_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Switch_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Switch_expressionContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.STAR);
	    } else {
	        return this.getToken(CSharpParser.STAR, i);
	    }
	};


	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.DIV);
	    } else {
	        return this.getToken(CSharpParser.DIV, i);
	    }
	};


	PERCENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.PERCENT);
	    } else {
	        return this.getToken(CSharpParser.PERCENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMultiplicative_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMultiplicative_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMultiplicative_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Switch_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_switch_expression;
    }

	range_expression() {
	    return this.getTypedRuleContext(Range_expressionContext,0);
	};

	SWITCH() {
	    return this.getToken(CSharpParser.SWITCH, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	switch_expression_arms() {
	    return this.getTypedRuleContext(Switch_expression_armsContext,0);
	};

	COMMA() {
	    return this.getToken(CSharpParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSwitch_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSwitch_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSwitch_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Switch_expression_armsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_switch_expression_arms;
    }

	switch_expression_arm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Switch_expression_armContext);
	    } else {
	        return this.getTypedRuleContext(Switch_expression_armContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSwitch_expression_arms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSwitch_expression_arms(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSwitch_expression_arms(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Switch_expression_armContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_switch_expression_arm;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	case_guard() {
	    return this.getTypedRuleContext(Case_guardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSwitch_expression_arm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSwitch_expression_arm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSwitch_expression_arm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Range_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_range_expression;
    }

	unary_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Unary_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Unary_expressionContext,i);
	    }
	};

	OP_RANGE() {
	    return this.getToken(CSharpParser.OP_RANGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterRange_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitRange_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitRange_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Unary_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_unary_expression;
    }

	cast_expression() {
	    return this.getTypedRuleContext(Cast_expressionContext,0);
	};

	primary_expression() {
	    return this.getTypedRuleContext(Primary_expressionContext,0);
	};

	PLUS() {
	    return this.getToken(CSharpParser.PLUS, 0);
	};

	unary_expression() {
	    return this.getTypedRuleContext(Unary_expressionContext,0);
	};

	MINUS() {
	    return this.getToken(CSharpParser.MINUS, 0);
	};

	BANG() {
	    return this.getToken(CSharpParser.BANG, 0);
	};

	TILDE() {
	    return this.getToken(CSharpParser.TILDE, 0);
	};

	OP_INC() {
	    return this.getToken(CSharpParser.OP_INC, 0);
	};

	OP_DEC() {
	    return this.getToken(CSharpParser.OP_DEC, 0);
	};

	AWAIT() {
	    return this.getToken(CSharpParser.AWAIT, 0);
	};

	AMP() {
	    return this.getToken(CSharpParser.AMP, 0);
	};

	STAR() {
	    return this.getToken(CSharpParser.STAR, 0);
	};

	CARET() {
	    return this.getToken(CSharpParser.CARET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUnary_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUnary_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUnary_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cast_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_cast_expression;
    }

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	unary_expression() {
	    return this.getTypedRuleContext(Unary_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCast_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCast_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCast_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Primary_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_primary_expression;
        this.pe = null;
    }

	primary_expression_start() {
	    return this.getTypedRuleContext(Primary_expression_startContext,0);
	};

	BANG = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.BANG);
	    } else {
	        return this.getToken(CSharpParser.BANG, i);
	    }
	};


	bracket_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bracket_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Bracket_expressionContext,i);
	    }
	};

	member_access = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Member_accessContext);
	    } else {
	        return this.getTypedRuleContext(Member_accessContext,i);
	    }
	};

	method_invocation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Method_invocationContext);
	    } else {
	        return this.getTypedRuleContext(Method_invocationContext,i);
	    }
	};

	OP_INC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_INC);
	    } else {
	        return this.getToken(CSharpParser.OP_INC, i);
	    }
	};


	OP_DEC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_DEC);
	    } else {
	        return this.getToken(CSharpParser.OP_DEC, i);
	    }
	};


	OP_PTR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_PTR);
	    } else {
	        return this.getToken(CSharpParser.OP_PTR, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterPrimary_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitPrimary_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitPrimary_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Primary_expression_startContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_primary_expression_start;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LiteralAccessExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LITERAL_ACCESS() {
	    return this.getToken(CSharpParser.LITERAL_ACCESS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLiteralAccessExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLiteralAccessExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLiteralAccessExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.LiteralAccessExpressionContext = LiteralAccessExpressionContext;

class DefaultValueExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DEFAULT() {
	    return this.getToken(CSharpParser.DEFAULT, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterDefaultValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitDefaultValueExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitDefaultValueExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.DefaultValueExpressionContext = DefaultValueExpressionContext;

class BaseAccessExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BASE() {
	    return this.getToken(CSharpParser.BASE, 0);
	};

	DOT() {
	    return this.getToken(CSharpParser.DOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	type_argument_list() {
	    return this.getTypedRuleContext(Type_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterBaseAccessExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitBaseAccessExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitBaseAccessExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.BaseAccessExpressionContext = BaseAccessExpressionContext;

class SizeofExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SIZEOF() {
	    return this.getToken(CSharpParser.SIZEOF, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSizeofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSizeofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSizeofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.SizeofExpressionContext = SizeofExpressionContext;

class ParenthesisExpressionsContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterParenthesisExpressions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitParenthesisExpressions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitParenthesisExpressions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ParenthesisExpressionsContext = ParenthesisExpressionsContext;

class ThisReferenceExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	THIS() {
	    return this.getToken(CSharpParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterThisReferenceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitThisReferenceExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitThisReferenceExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ThisReferenceExpressionContext = ThisReferenceExpressionContext;

class ObjectCreationExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NEW() {
	    return this.getToken(CSharpParser.NEW, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	anonymous_object_initializer() {
	    return this.getTypedRuleContext(Anonymous_object_initializerContext,0);
	};

	rank_specifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Rank_specifierContext);
	    } else {
	        return this.getTypedRuleContext(Rank_specifierContext,i);
	    }
	};

	array_initializer() {
	    return this.getTypedRuleContext(Array_initializerContext,0);
	};

	object_creation_expression() {
	    return this.getTypedRuleContext(Object_creation_expressionContext,0);
	};

	object_or_collection_initializer() {
	    return this.getTypedRuleContext(Object_or_collection_initializerContext,0);
	};

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterObjectCreationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitObjectCreationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitObjectCreationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ObjectCreationExpressionContext = ObjectCreationExpressionContext;

class AnonymousMethodExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DELEGATE() {
	    return this.getToken(CSharpParser.DELEGATE, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	ASYNC() {
	    return this.getToken(CSharpParser.ASYNC, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	explicit_anonymous_function_parameter_list() {
	    return this.getTypedRuleContext(Explicit_anonymous_function_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAnonymousMethodExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAnonymousMethodExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAnonymousMethodExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.AnonymousMethodExpressionContext = AnonymousMethodExpressionContext;

class TypeofExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TYPEOF() {
	    return this.getToken(CSharpParser.TYPEOF, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	unbound_type_name() {
	    return this.getTypedRuleContext(Unbound_type_nameContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	VOID() {
	    return this.getToken(CSharpParser.VOID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterTypeofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitTypeofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitTypeofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.TypeofExpressionContext = TypeofExpressionContext;

class TupleExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterTupleExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitTupleExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitTupleExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.TupleExpressionContext = TupleExpressionContext;

class UncheckedExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNCHECKED() {
	    return this.getToken(CSharpParser.UNCHECKED, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUncheckedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUncheckedExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUncheckedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.UncheckedExpressionContext = UncheckedExpressionContext;

class SimpleNameExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	type_argument_list() {
	    return this.getTypedRuleContext(Type_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSimpleNameExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSimpleNameExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSimpleNameExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.SimpleNameExpressionContext = SimpleNameExpressionContext;

class MemberAccessExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predefined_type() {
	    return this.getTypedRuleContext(Predefined_typeContext,0);
	};

	qualified_alias_member() {
	    return this.getTypedRuleContext(Qualified_alias_memberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMemberAccessExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMemberAccessExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMemberAccessExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.MemberAccessExpressionContext = MemberAccessExpressionContext;

class CheckedExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHECKED() {
	    return this.getToken(CSharpParser.CHECKED, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCheckedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCheckedExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCheckedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.CheckedExpressionContext = CheckedExpressionContext;

class LiteralExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.LiteralExpressionContext = LiteralExpressionContext;

class NameofExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NAMEOF() {
	    return this.getToken(CSharpParser.NAMEOF, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.DOT);
	    } else {
	        return this.getToken(CSharpParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNameofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNameofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNameofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.NameofExpressionContext = NameofExpressionContext;

class Throwable_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_throwable_expression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	throw_expression() {
	    return this.getTypedRuleContext(Throw_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterThrowable_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitThrowable_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitThrowable_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Throw_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_throw_expression;
    }

	THROW() {
	    return this.getToken(CSharpParser.THROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterThrow_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitThrow_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitThrow_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Member_accessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_member_access;
    }

	DOT() {
	    return this.getToken(CSharpParser.DOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	INTERR() {
	    return this.getToken(CSharpParser.INTERR, 0);
	};

	type_argument_list() {
	    return this.getTypedRuleContext(Type_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMember_access(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMember_access(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMember_access(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Bracket_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_bracket_expression;
    }

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	indexer_argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Indexer_argumentContext);
	    } else {
	        return this.getTypedRuleContext(Indexer_argumentContext,i);
	    }
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	INTERR() {
	    return this.getToken(CSharpParser.INTERR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterBracket_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitBracket_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitBracket_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Indexer_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_indexer_argument;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIndexer_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIndexer_argument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIndexer_argument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Predefined_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_predefined_type;
    }

	BOOL() {
	    return this.getToken(CSharpParser.BOOL, 0);
	};

	BYTE() {
	    return this.getToken(CSharpParser.BYTE, 0);
	};

	CHAR() {
	    return this.getToken(CSharpParser.CHAR, 0);
	};

	DECIMAL() {
	    return this.getToken(CSharpParser.DECIMAL, 0);
	};

	DOUBLE() {
	    return this.getToken(CSharpParser.DOUBLE, 0);
	};

	FLOAT() {
	    return this.getToken(CSharpParser.FLOAT, 0);
	};

	INT() {
	    return this.getToken(CSharpParser.INT, 0);
	};

	LONG() {
	    return this.getToken(CSharpParser.LONG, 0);
	};

	OBJECT() {
	    return this.getToken(CSharpParser.OBJECT, 0);
	};

	SBYTE() {
	    return this.getToken(CSharpParser.SBYTE, 0);
	};

	SHORT() {
	    return this.getToken(CSharpParser.SHORT, 0);
	};

	STRING() {
	    return this.getToken(CSharpParser.STRING, 0);
	};

	UINT() {
	    return this.getToken(CSharpParser.UINT, 0);
	};

	ULONG() {
	    return this.getToken(CSharpParser.ULONG, 0);
	};

	USHORT() {
	    return this.getToken(CSharpParser.USHORT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterPredefined_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitPredefined_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitPredefined_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Expression_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_expression_list;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExpression_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExpression_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExpression_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_or_collection_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_object_or_collection_initializer;
    }

	object_initializer() {
	    return this.getTypedRuleContext(Object_initializerContext,0);
	};

	collection_initializer() {
	    return this.getTypedRuleContext(Collection_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterObject_or_collection_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitObject_or_collection_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitObject_or_collection_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_object_initializer;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	member_initializer_list() {
	    return this.getTypedRuleContext(Member_initializer_listContext,0);
	};

	COMMA() {
	    return this.getToken(CSharpParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterObject_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitObject_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitObject_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Member_initializer_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_member_initializer_list;
    }

	member_initializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Member_initializerContext);
	    } else {
	        return this.getTypedRuleContext(Member_initializerContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMember_initializer_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMember_initializer_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMember_initializer_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Member_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_member_initializer;
    }

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	initializer_value() {
	    return this.getTypedRuleContext(Initializer_valueContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMember_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMember_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMember_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Initializer_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_initializer_value;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	object_or_collection_initializer() {
	    return this.getTypedRuleContext(Object_or_collection_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInitializer_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInitializer_value(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInitializer_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Collection_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_collection_initializer;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	element_initializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Element_initializerContext);
	    } else {
	        return this.getTypedRuleContext(Element_initializerContext,i);
	    }
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCollection_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCollection_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCollection_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Element_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_element_initializer;
    }

	non_assignment_expression() {
	    return this.getTypedRuleContext(Non_assignment_expressionContext,0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterElement_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitElement_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitElement_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Anonymous_object_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_anonymous_object_initializer;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	member_declarator_list() {
	    return this.getTypedRuleContext(Member_declarator_listContext,0);
	};

	COMMA() {
	    return this.getToken(CSharpParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAnonymous_object_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAnonymous_object_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAnonymous_object_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Member_declarator_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_member_declarator_list;
    }

	member_declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Member_declaratorContext);
	    } else {
	        return this.getTypedRuleContext(Member_declaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMember_declarator_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMember_declarator_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMember_declarator_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Member_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_member_declarator;
    }

	primary_expression() {
	    return this.getTypedRuleContext(Primary_expressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMember_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMember_declarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMember_declarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Unbound_type_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_unbound_type_name;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOUBLE_COLON() {
	    return this.getToken(CSharpParser.DOUBLE_COLON, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.DOT);
	    } else {
	        return this.getToken(CSharpParser.DOT, i);
	    }
	};


	generic_dimension_specifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Generic_dimension_specifierContext);
	    } else {
	        return this.getTypedRuleContext(Generic_dimension_specifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUnbound_type_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUnbound_type_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUnbound_type_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Generic_dimension_specifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_generic_dimension_specifier;
    }

	LT() {
	    return this.getToken(CSharpParser.LT, 0);
	};

	GT() {
	    return this.getToken(CSharpParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterGeneric_dimension_specifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitGeneric_dimension_specifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitGeneric_dimension_specifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IsTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_isType;
    }

	base_type() {
	    return this.getTypedRuleContext(Base_typeContext,0);
	};

	rank_specifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Rank_specifierContext);
	    } else {
	        return this.getTypedRuleContext(Rank_specifierContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.STAR);
	    } else {
	        return this.getToken(CSharpParser.STAR, i);
	    }
	};


	INTERR() {
	    return this.getToken(CSharpParser.INTERR, 0);
	};

	isTypePatternArms() {
	    return this.getTypedRuleContext(IsTypePatternArmsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIsType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIsType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIsType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IsTypePatternArmsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_isTypePatternArms;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	isTypePatternArm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IsTypePatternArmContext);
	    } else {
	        return this.getTypedRuleContext(IsTypePatternArmContext,i);
	    }
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIsTypePatternArms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIsTypePatternArms(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIsTypePatternArms(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IsTypePatternArmContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_isTypePatternArm;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIsTypePatternArm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIsTypePatternArm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIsTypePatternArm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lambda_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_lambda_expression;
    }

	anonymous_function_signature() {
	    return this.getTypedRuleContext(Anonymous_function_signatureContext,0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	anonymous_function_body() {
	    return this.getTypedRuleContext(Anonymous_function_bodyContext,0);
	};

	ASYNC() {
	    return this.getToken(CSharpParser.ASYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLambda_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLambda_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLambda_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Anonymous_function_signatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_anonymous_function_signature;
    }

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	explicit_anonymous_function_parameter_list() {
	    return this.getTypedRuleContext(Explicit_anonymous_function_parameter_listContext,0);
	};

	implicit_anonymous_function_parameter_list() {
	    return this.getTypedRuleContext(Implicit_anonymous_function_parameter_listContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAnonymous_function_signature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAnonymous_function_signature(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAnonymous_function_signature(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Explicit_anonymous_function_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_explicit_anonymous_function_parameter_list;
    }

	explicit_anonymous_function_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Explicit_anonymous_function_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Explicit_anonymous_function_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExplicit_anonymous_function_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExplicit_anonymous_function_parameter_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExplicit_anonymous_function_parameter_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Explicit_anonymous_function_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_explicit_anonymous_function_parameter;
        this.refout = null;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	OUT() {
	    return this.getToken(CSharpParser.OUT, 0);
	};

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExplicit_anonymous_function_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExplicit_anonymous_function_parameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExplicit_anonymous_function_parameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Implicit_anonymous_function_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_implicit_anonymous_function_parameter_list;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterImplicit_anonymous_function_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitImplicit_anonymous_function_parameter_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitImplicit_anonymous_function_parameter_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Anonymous_function_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_anonymous_function_body;
    }

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAnonymous_function_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAnonymous_function_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAnonymous_function_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Query_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_query_expression;
    }

	from_clause() {
	    return this.getTypedRuleContext(From_clauseContext,0);
	};

	query_body() {
	    return this.getTypedRuleContext(Query_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterQuery_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitQuery_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitQuery_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class From_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_from_clause;
    }

	FROM() {
	    return this.getToken(CSharpParser.FROM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFrom_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFrom_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFrom_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Query_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_query_body;
    }

	select_or_group_clause() {
	    return this.getTypedRuleContext(Select_or_group_clauseContext,0);
	};

	query_body_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Query_body_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Query_body_clauseContext,i);
	    }
	};

	query_continuation() {
	    return this.getTypedRuleContext(Query_continuationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterQuery_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitQuery_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitQuery_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Query_body_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_query_body_clause;
    }

	from_clause() {
	    return this.getTypedRuleContext(From_clauseContext,0);
	};

	let_clause() {
	    return this.getTypedRuleContext(Let_clauseContext,0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	combined_join_clause() {
	    return this.getTypedRuleContext(Combined_join_clauseContext,0);
	};

	orderby_clause() {
	    return this.getTypedRuleContext(Orderby_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterQuery_body_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitQuery_body_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitQuery_body_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Let_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_let_clause;
    }

	LET() {
	    return this.getToken(CSharpParser.LET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLet_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLet_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLet_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Where_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_where_clause;
    }

	WHERE() {
	    return this.getToken(CSharpParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterWhere_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitWhere_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitWhere_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Combined_join_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_combined_join_clause;
    }

	JOIN() {
	    return this.getToken(CSharpParser.JOIN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ON() {
	    return this.getToken(CSharpParser.ON, 0);
	};

	EQUALS() {
	    return this.getToken(CSharpParser.EQUALS, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	INTO() {
	    return this.getToken(CSharpParser.INTO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCombined_join_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCombined_join_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCombined_join_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Orderby_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_orderby_clause;
    }

	ORDERBY() {
	    return this.getToken(CSharpParser.ORDERBY, 0);
	};

	ordering = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderingContext);
	    } else {
	        return this.getTypedRuleContext(OrderingContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterOrderby_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitOrderby_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitOrderby_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_ordering;
        this.dir = null;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ASCENDING() {
	    return this.getToken(CSharpParser.ASCENDING, 0);
	};

	DESCENDING() {
	    return this.getToken(CSharpParser.DESCENDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterOrdering(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitOrdering(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitOrdering(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_or_group_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_select_or_group_clause;
    }

	SELECT() {
	    return this.getToken(CSharpParser.SELECT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	GROUP() {
	    return this.getToken(CSharpParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(CSharpParser.BY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSelect_or_group_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSelect_or_group_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSelect_or_group_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Query_continuationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_query_continuation;
    }

	INTO() {
	    return this.getToken(CSharpParser.INTO, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	query_body() {
	    return this.getTypedRuleContext(Query_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterQuery_continuation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitQuery_continuation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitQuery_continuation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_statement;
    }

	labeled_Statement() {
	    return this.getTypedRuleContext(Labeled_StatementContext,0);
	};

	declarationStatement() {
	    return this.getTypedRuleContext(DeclarationStatementContext,0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_declarationStatement;
    }

	local_variable_declaration() {
	    return this.getTypedRuleContext(Local_variable_declarationContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	local_constant_declaration() {
	    return this.getTypedRuleContext(Local_constant_declarationContext,0);
	};

	local_function_declaration() {
	    return this.getTypedRuleContext(Local_function_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitDeclarationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitDeclarationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_function_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_function_declaration;
    }

	local_function_header() {
	    return this.getTypedRuleContext(Local_function_headerContext,0);
	};

	local_function_body() {
	    return this.getTypedRuleContext(Local_function_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_function_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_function_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_function_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_function_headerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_function_header;
    }

	return_type() {
	    return this.getTypedRuleContext(Return_typeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	local_function_modifiers() {
	    return this.getTypedRuleContext(Local_function_modifiersContext,0);
	};

	type_parameter_list() {
	    return this.getTypedRuleContext(Type_parameter_listContext,0);
	};

	formal_parameter_list() {
	    return this.getTypedRuleContext(Formal_parameter_listContext,0);
	};

	type_parameter_constraints_clauses() {
	    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_function_header(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_function_header(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_function_header(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_function_modifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_function_modifiers;
    }

	ASYNC() {
	    return this.getToken(CSharpParser.ASYNC, 0);
	};

	UNSAFE() {
	    return this.getToken(CSharpParser.UNSAFE, 0);
	};

	STATIC() {
	    return this.getToken(CSharpParser.STATIC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_function_modifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_function_modifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_function_modifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_function_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_function_body;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_function_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_function_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_function_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Labeled_StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_labeled_Statement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLabeled_Statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLabeled_Statement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLabeled_Statement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Embedded_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_embedded_statement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	simple_embedded_statement() {
	    return this.getTypedRuleContext(Simple_embedded_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEmbedded_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEmbedded_statement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEmbedded_statement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Simple_embedded_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_simple_embedded_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TryStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TRY() {
	    return this.getToken(CSharpParser.TRY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catch_clauses() {
	    return this.getTypedRuleContext(Catch_clausesContext,0);
	};

	finally_clause() {
	    return this.getTypedRuleContext(Finally_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitTryStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitTryStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.TryStatementContext = TryStatementContext;

class CheckedStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHECKED() {
	    return this.getToken(CSharpParser.CHECKED, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCheckedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCheckedStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCheckedStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.CheckedStatementContext = CheckedStatementContext;

class ThrowStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	THROW() {
	    return this.getToken(CSharpParser.THROW, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterThrowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitThrowStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitThrowStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ThrowStatementContext = ThrowStatementContext;

class TheEmptyStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterTheEmptyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitTheEmptyStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitTheEmptyStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.TheEmptyStatementContext = TheEmptyStatementContext;

class UnsafeStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNSAFE() {
	    return this.getToken(CSharpParser.UNSAFE, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUnsafeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUnsafeStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUnsafeStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.UnsafeStatementContext = UnsafeStatementContext;

class ForStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FOR() {
	    return this.getToken(CSharpParser.FOR, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.SEMICOLON);
	    } else {
	        return this.getToken(CSharpParser.SEMICOLON, i);
	    }
	};


	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	for_initializer() {
	    return this.getTypedRuleContext(For_initializerContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	for_iterator() {
	    return this.getTypedRuleContext(For_iteratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitForStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ForStatementContext = ForStatementContext;

class BreakStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BREAK() {
	    return this.getToken(CSharpParser.BREAK, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitBreakStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitBreakStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.BreakStatementContext = BreakStatementContext;

class IfStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IF() {
	    return this.getToken(CSharpParser.IF, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	if_body = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(If_bodyContext);
	    } else {
	        return this.getTypedRuleContext(If_bodyContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(CSharpParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIfStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.IfStatementContext = IfStatementContext;

class ReturnStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RETURN() {
	    return this.getToken(CSharpParser.RETURN, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitReturnStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ReturnStatementContext = ReturnStatementContext;

class GotoStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GOTO() {
	    return this.getToken(CSharpParser.GOTO, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	CASE() {
	    return this.getToken(CSharpParser.CASE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DEFAULT() {
	    return this.getToken(CSharpParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterGotoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitGotoStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitGotoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.GotoStatementContext = GotoStatementContext;

class SwitchStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SWITCH() {
	    return this.getToken(CSharpParser.SWITCH, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	switch_section = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Switch_sectionContext);
	    } else {
	        return this.getTypedRuleContext(Switch_sectionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSwitchStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSwitchStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.SwitchStatementContext = SwitchStatementContext;

class FixedStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FIXED() {
	    return this.getToken(CSharpParser.FIXED, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	pointer_type() {
	    return this.getTypedRuleContext(Pointer_typeContext,0);
	};

	fixed_pointer_declarators() {
	    return this.getTypedRuleContext(Fixed_pointer_declaratorsContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFixedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFixedStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFixedStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.FixedStatementContext = FixedStatementContext;

class WhileStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	WHILE() {
	    return this.getToken(CSharpParser.WHILE, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitWhileStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.WhileStatementContext = WhileStatementContext;

class DoStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DO() {
	    return this.getToken(CSharpParser.DO, 0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	WHILE() {
	    return this.getToken(CSharpParser.WHILE, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitDoStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitDoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.DoStatementContext = DoStatementContext;

class ForeachStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FOREACH() {
	    return this.getToken(CSharpParser.FOREACH, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	local_variable_type() {
	    return this.getTypedRuleContext(Local_variable_typeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	AWAIT() {
	    return this.getToken(CSharpParser.AWAIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterForeachStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitForeachStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitForeachStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ForeachStatementContext = ForeachStatementContext;

class UncheckedStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNCHECKED() {
	    return this.getToken(CSharpParser.UNCHECKED, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUncheckedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUncheckedStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUncheckedStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.UncheckedStatementContext = UncheckedStatementContext;

class ExpressionStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExpressionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExpressionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ExpressionStatementContext = ExpressionStatementContext;

class ContinueStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONTINUE() {
	    return this.getToken(CSharpParser.CONTINUE, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitContinueStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitContinueStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ContinueStatementContext = ContinueStatementContext;

class UsingStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	USING() {
	    return this.getToken(CSharpParser.USING, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	resource_acquisition() {
	    return this.getTypedRuleContext(Resource_acquisitionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUsingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUsingStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUsingStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.UsingStatementContext = UsingStatementContext;

class LockStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LOCK() {
	    return this.getToken(CSharpParser.LOCK, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLockStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLockStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.LockStatementContext = LockStatementContext;

class YieldStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	YIELD() {
	    return this.getToken(CSharpParser.YIELD, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	RETURN() {
	    return this.getToken(CSharpParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	BREAK() {
	    return this.getToken(CSharpParser.BREAK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterYieldStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitYieldStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitYieldStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.YieldStatementContext = YieldStatementContext;

class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_block;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_variable_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_variable_declaration;
    }

	local_variable_type() {
	    return this.getTypedRuleContext(Local_variable_typeContext,0);
	};

	local_variable_declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Local_variable_declaratorContext);
	    } else {
	        return this.getTypedRuleContext(Local_variable_declaratorContext,i);
	    }
	};

	USING() {
	    return this.getToken(CSharpParser.USING, 0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	READONLY() {
	    return this.getToken(CSharpParser.READONLY, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	FIXED() {
	    return this.getToken(CSharpParser.FIXED, 0);
	};

	pointer_type() {
	    return this.getTypedRuleContext(Pointer_typeContext,0);
	};

	fixed_pointer_declarators() {
	    return this.getTypedRuleContext(Fixed_pointer_declaratorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_variable_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_variable_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_variable_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_variable_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_variable_type;
    }

	VAR() {
	    return this.getToken(CSharpParser.VAR, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_variable_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_variable_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_variable_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_variable_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_variable_declarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	local_variable_initializer() {
	    return this.getTypedRuleContext(Local_variable_initializerContext,0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_variable_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_variable_declarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_variable_declarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_variable_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_variable_initializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	array_initializer() {
	    return this.getTypedRuleContext(Array_initializerContext,0);
	};

	stackalloc_initializer() {
	    return this.getTypedRuleContext(Stackalloc_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_variable_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_variable_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_variable_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_constant_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_constant_declaration;
    }

	CONST() {
	    return this.getToken(CSharpParser.CONST, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	constant_declarators() {
	    return this.getTypedRuleContext(Constant_declaratorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_constant_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_constant_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_constant_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class If_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_if_body;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	simple_embedded_statement() {
	    return this.getTypedRuleContext(Simple_embedded_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIf_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIf_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIf_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Switch_sectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_switch_section;
    }

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	switch_label = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Switch_labelContext);
	    } else {
	        return this.getTypedRuleContext(Switch_labelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSwitch_section(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSwitch_section(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSwitch_section(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Switch_labelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_switch_label;
    }

	CASE() {
	    return this.getToken(CSharpParser.CASE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	case_guard() {
	    return this.getTypedRuleContext(Case_guardContext,0);
	};

	DEFAULT() {
	    return this.getToken(CSharpParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSwitch_label(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSwitch_label(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSwitch_label(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Case_guardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_case_guard;
    }

	WHEN() {
	    return this.getToken(CSharpParser.WHEN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCase_guard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCase_guard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCase_guard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Statement_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_statement_list;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterStatement_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitStatement_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitStatement_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class For_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_for_initializer;
    }

	local_variable_declaration() {
	    return this.getTypedRuleContext(Local_variable_declarationContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFor_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFor_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFor_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class For_iteratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_for_iterator;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFor_iterator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFor_iterator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFor_iterator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Catch_clausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_catch_clauses;
    }

	specific_catch_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Specific_catch_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Specific_catch_clauseContext,i);
	    }
	};

	general_catch_clause() {
	    return this.getTypedRuleContext(General_catch_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCatch_clauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCatch_clauses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCatch_clauses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Specific_catch_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_specific_catch_clause;
    }

	CATCH() {
	    return this.getToken(CSharpParser.CATCH, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	class_type() {
	    return this.getTypedRuleContext(Class_typeContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	exception_filter() {
	    return this.getTypedRuleContext(Exception_filterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSpecific_catch_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSpecific_catch_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSpecific_catch_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class General_catch_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_general_catch_clause;
    }

	CATCH() {
	    return this.getToken(CSharpParser.CATCH, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	exception_filter() {
	    return this.getTypedRuleContext(Exception_filterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterGeneral_catch_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitGeneral_catch_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitGeneral_catch_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Exception_filterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_exception_filter;
    }

	WHEN() {
	    return this.getToken(CSharpParser.WHEN, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterException_filter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitException_filter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitException_filter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Finally_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_finally_clause;
    }

	FINALLY() {
	    return this.getToken(CSharpParser.FINALLY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFinally_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFinally_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFinally_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Resource_acquisitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_resource_acquisition;
    }

	local_variable_declaration() {
	    return this.getTypedRuleContext(Local_variable_declarationContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterResource_acquisition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitResource_acquisition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitResource_acquisition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Namespace_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_namespace_declaration;
        this.qi = null;
    }

	NAMESPACE() {
	    return this.getToken(CSharpParser.NAMESPACE, 0);
	};

	namespace_body() {
	    return this.getTypedRuleContext(Namespace_bodyContext,0);
	};

	qualified_identifier() {
	    return this.getTypedRuleContext(Qualified_identifierContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNamespace_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNamespace_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNamespace_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Qualified_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_qualified_identifier;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.DOT);
	    } else {
	        return this.getToken(CSharpParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterQualified_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitQualified_identifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitQualified_identifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Namespace_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_namespace_body;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	extern_alias_directives() {
	    return this.getTypedRuleContext(Extern_alias_directivesContext,0);
	};

	using_directives() {
	    return this.getTypedRuleContext(Using_directivesContext,0);
	};

	namespace_member_declarations() {
	    return this.getTypedRuleContext(Namespace_member_declarationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNamespace_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNamespace_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNamespace_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Extern_alias_directivesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_extern_alias_directives;
    }

	extern_alias_directive = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Extern_alias_directiveContext);
	    } else {
	        return this.getTypedRuleContext(Extern_alias_directiveContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExtern_alias_directives(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExtern_alias_directives(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExtern_alias_directives(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Extern_alias_directiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_extern_alias_directive;
    }

	EXTERN() {
	    return this.getToken(CSharpParser.EXTERN, 0);
	};

	ALIAS() {
	    return this.getToken(CSharpParser.ALIAS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExtern_alias_directive(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExtern_alias_directive(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExtern_alias_directive(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Using_directivesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_using_directives;
    }

	using_directive = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Using_directiveContext);
	    } else {
	        return this.getTypedRuleContext(Using_directiveContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUsing_directives(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUsing_directives(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUsing_directives(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Using_directiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_using_directive;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UsingAliasDirectiveContext extends Using_directiveContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	USING() {
	    return this.getToken(CSharpParser.USING, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	namespace_or_type_name() {
	    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUsingAliasDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUsingAliasDirective(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUsingAliasDirective(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.UsingAliasDirectiveContext = UsingAliasDirectiveContext;

class UsingNamespaceDirectiveContext extends Using_directiveContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	USING() {
	    return this.getToken(CSharpParser.USING, 0);
	};

	namespace_or_type_name() {
	    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUsingNamespaceDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUsingNamespaceDirective(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUsingNamespaceDirective(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.UsingNamespaceDirectiveContext = UsingNamespaceDirectiveContext;

class UsingStaticDirectiveContext extends Using_directiveContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	USING() {
	    return this.getToken(CSharpParser.USING, 0);
	};

	STATIC() {
	    return this.getToken(CSharpParser.STATIC, 0);
	};

	namespace_or_type_name() {
	    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUsingStaticDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUsingStaticDirective(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUsingStaticDirective(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.UsingStaticDirectiveContext = UsingStaticDirectiveContext;

class Namespace_member_declarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_namespace_member_declarations;
    }

	namespace_member_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Namespace_member_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Namespace_member_declarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNamespace_member_declarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNamespace_member_declarations(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNamespace_member_declarations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Namespace_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_namespace_member_declaration;
    }

	namespace_declaration() {
	    return this.getTypedRuleContext(Namespace_declarationContext,0);
	};

	type_declaration() {
	    return this.getTypedRuleContext(Type_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNamespace_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNamespace_member_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNamespace_member_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_declaration;
    }

	class_definition() {
	    return this.getTypedRuleContext(Class_definitionContext,0);
	};

	struct_definition() {
	    return this.getTypedRuleContext(Struct_definitionContext,0);
	};

	interface_definition() {
	    return this.getTypedRuleContext(Interface_definitionContext,0);
	};

	enum_definition() {
	    return this.getTypedRuleContext(Enum_definitionContext,0);
	};

	delegate_definition() {
	    return this.getTypedRuleContext(Delegate_definitionContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	all_member_modifiers() {
	    return this.getTypedRuleContext(All_member_modifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Qualified_alias_memberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_qualified_alias_member;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOUBLE_COLON() {
	    return this.getToken(CSharpParser.DOUBLE_COLON, 0);
	};

	type_argument_list() {
	    return this.getTypedRuleContext(Type_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterQualified_alias_member(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitQualified_alias_member(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitQualified_alias_member(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_parameter_list;
    }

	LT() {
	    return this.getToken(CSharpParser.LT, 0);
	};

	type_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Type_parameterContext,i);
	    }
	};

	GT() {
	    return this.getToken(CSharpParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_parameter_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_parameter_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_parameter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_parameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_parameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_baseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_class_base;
    }

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	class_type() {
	    return this.getTypedRuleContext(Class_typeContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	namespace_or_type_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Namespace_or_type_nameContext);
	    } else {
	        return this.getTypedRuleContext(Namespace_or_type_nameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterClass_base(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitClass_base(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitClass_base(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interface_type_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interface_type_list;
    }

	namespace_or_type_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Namespace_or_type_nameContext);
	    } else {
	        return this.getTypedRuleContext(Namespace_or_type_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterface_type_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterface_type_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterface_type_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_parameter_constraints_clausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_parameter_constraints_clauses;
    }

	type_parameter_constraints_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_parameter_constraints_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Type_parameter_constraints_clauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_parameter_constraints_clauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_parameter_constraints_clauses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_parameter_constraints_clauses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_parameter_constraints_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_parameter_constraints_clause;
    }

	WHERE() {
	    return this.getToken(CSharpParser.WHERE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	type_parameter_constraints() {
	    return this.getTypedRuleContext(Type_parameter_constraintsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_parameter_constraints_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_parameter_constraints_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_parameter_constraints_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_parameter_constraintsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_parameter_constraints;
    }

	constructor_constraint() {
	    return this.getTypedRuleContext(Constructor_constraintContext,0);
	};

	primary_constraint() {
	    return this.getTypedRuleContext(Primary_constraintContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	secondary_constraints() {
	    return this.getTypedRuleContext(Secondary_constraintsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_parameter_constraints(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_parameter_constraints(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_parameter_constraints(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Primary_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_primary_constraint;
    }

	class_type() {
	    return this.getTypedRuleContext(Class_typeContext,0);
	};

	CLASS() {
	    return this.getToken(CSharpParser.CLASS, 0);
	};

	INTERR() {
	    return this.getToken(CSharpParser.INTERR, 0);
	};

	STRUCT() {
	    return this.getToken(CSharpParser.STRUCT, 0);
	};

	UNMANAGED() {
	    return this.getToken(CSharpParser.UNMANAGED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterPrimary_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitPrimary_constraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitPrimary_constraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Secondary_constraintsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_secondary_constraints;
    }

	namespace_or_type_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Namespace_or_type_nameContext);
	    } else {
	        return this.getTypedRuleContext(Namespace_or_type_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSecondary_constraints(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSecondary_constraints(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSecondary_constraints(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constructor_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_constructor_constraint;
    }

	NEW() {
	    return this.getToken(CSharpParser.NEW, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConstructor_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConstructor_constraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConstructor_constraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_class_body;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	class_member_declarations() {
	    return this.getTypedRuleContext(Class_member_declarationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterClass_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitClass_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitClass_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_member_declarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_class_member_declarations;
    }

	class_member_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Class_member_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Class_member_declarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterClass_member_declarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitClass_member_declarations(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitClass_member_declarations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_class_member_declaration;
    }

	common_member_declaration() {
	    return this.getTypedRuleContext(Common_member_declarationContext,0);
	};

	destructor_definition() {
	    return this.getTypedRuleContext(Destructor_definitionContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	all_member_modifiers() {
	    return this.getTypedRuleContext(All_member_modifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterClass_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitClass_member_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitClass_member_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class All_member_modifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_all_member_modifiers;
    }

	all_member_modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(All_member_modifierContext);
	    } else {
	        return this.getTypedRuleContext(All_member_modifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAll_member_modifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAll_member_modifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAll_member_modifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class All_member_modifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_all_member_modifier;
    }

	NEW() {
	    return this.getToken(CSharpParser.NEW, 0);
	};

	PUBLIC() {
	    return this.getToken(CSharpParser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(CSharpParser.PROTECTED, 0);
	};

	INTERNAL() {
	    return this.getToken(CSharpParser.INTERNAL, 0);
	};

	PRIVATE() {
	    return this.getToken(CSharpParser.PRIVATE, 0);
	};

	READONLY() {
	    return this.getToken(CSharpParser.READONLY, 0);
	};

	VOLATILE() {
	    return this.getToken(CSharpParser.VOLATILE, 0);
	};

	VIRTUAL() {
	    return this.getToken(CSharpParser.VIRTUAL, 0);
	};

	SEALED() {
	    return this.getToken(CSharpParser.SEALED, 0);
	};

	OVERRIDE() {
	    return this.getToken(CSharpParser.OVERRIDE, 0);
	};

	ABSTRACT() {
	    return this.getToken(CSharpParser.ABSTRACT, 0);
	};

	STATIC() {
	    return this.getToken(CSharpParser.STATIC, 0);
	};

	UNSAFE() {
	    return this.getToken(CSharpParser.UNSAFE, 0);
	};

	EXTERN() {
	    return this.getToken(CSharpParser.EXTERN, 0);
	};

	PARTIAL() {
	    return this.getToken(CSharpParser.PARTIAL, 0);
	};

	ASYNC() {
	    return this.getToken(CSharpParser.ASYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAll_member_modifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAll_member_modifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAll_member_modifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Common_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_common_member_declaration;
    }

	constant_declaration() {
	    return this.getTypedRuleContext(Constant_declarationContext,0);
	};

	typed_member_declaration() {
	    return this.getTypedRuleContext(Typed_member_declarationContext,0);
	};

	event_declaration() {
	    return this.getTypedRuleContext(Event_declarationContext,0);
	};

	conversion_operator_declarator() {
	    return this.getTypedRuleContext(Conversion_operator_declaratorContext,0);
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	constructor_declaration() {
	    return this.getTypedRuleContext(Constructor_declarationContext,0);
	};

	VOID() {
	    return this.getToken(CSharpParser.VOID, 0);
	};

	method_declaration() {
	    return this.getTypedRuleContext(Method_declarationContext,0);
	};

	class_definition() {
	    return this.getTypedRuleContext(Class_definitionContext,0);
	};

	struct_definition() {
	    return this.getTypedRuleContext(Struct_definitionContext,0);
	};

	interface_definition() {
	    return this.getTypedRuleContext(Interface_definitionContext,0);
	};

	enum_definition() {
	    return this.getTypedRuleContext(Enum_definitionContext,0);
	};

	delegate_definition() {
	    return this.getTypedRuleContext(Delegate_definitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCommon_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCommon_member_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCommon_member_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Typed_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_typed_member_declaration;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	namespace_or_type_name() {
	    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
	};

	DOT() {
	    return this.getToken(CSharpParser.DOT, 0);
	};

	indexer_declaration() {
	    return this.getTypedRuleContext(Indexer_declarationContext,0);
	};

	method_declaration() {
	    return this.getTypedRuleContext(Method_declarationContext,0);
	};

	property_declaration() {
	    return this.getTypedRuleContext(Property_declarationContext,0);
	};

	operator_declaration() {
	    return this.getTypedRuleContext(Operator_declarationContext,0);
	};

	field_declaration() {
	    return this.getTypedRuleContext(Field_declarationContext,0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	READONLY() {
	    return this.getToken(CSharpParser.READONLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterTyped_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitTyped_member_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitTyped_member_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constant_declaratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_constant_declarators;
    }

	constant_declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Constant_declaratorContext);
	    } else {
	        return this.getTypedRuleContext(Constant_declaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConstant_declarators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConstant_declarators(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConstant_declarators(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constant_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_constant_declarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConstant_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConstant_declarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConstant_declarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Variable_declaratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_variable_declarators;
    }

	variable_declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Variable_declaratorContext);
	    } else {
	        return this.getTypedRuleContext(Variable_declaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterVariable_declarators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitVariable_declarators(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitVariable_declarators(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Variable_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_variable_declarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	variable_initializer() {
	    return this.getTypedRuleContext(Variable_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterVariable_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitVariable_declarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitVariable_declarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Variable_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_variable_initializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	array_initializer() {
	    return this.getTypedRuleContext(Array_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterVariable_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitVariable_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitVariable_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Return_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_return_type;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	VOID() {
	    return this.getToken(CSharpParser.VOID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterReturn_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitReturn_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitReturn_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Member_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_member_name;
    }

	namespace_or_type_name() {
	    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMember_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMember_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMember_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Method_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_method_body;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMethod_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMethod_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMethod_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Formal_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_formal_parameter_list;
    }

	parameter_array() {
	    return this.getTypedRuleContext(Parameter_arrayContext,0);
	};

	fixed_parameters() {
	    return this.getTypedRuleContext(Fixed_parametersContext,0);
	};

	COMMA() {
	    return this.getToken(CSharpParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFormal_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFormal_parameter_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFormal_parameter_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fixed_parametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_fixed_parameters;
    }

	fixed_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fixed_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Fixed_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFixed_parameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFixed_parameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFixed_parameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fixed_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_fixed_parameter;
    }

	arg_declaration() {
	    return this.getTypedRuleContext(Arg_declarationContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	parameter_modifier() {
	    return this.getTypedRuleContext(Parameter_modifierContext,0);
	};

	ARGLIST() {
	    return this.getToken(CSharpParser.ARGLIST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFixed_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFixed_parameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFixed_parameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Parameter_modifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_parameter_modifier;
    }

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	OUT() {
	    return this.getToken(CSharpParser.OUT, 0);
	};

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	THIS() {
	    return this.getToken(CSharpParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterParameter_modifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitParameter_modifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitParameter_modifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Parameter_arrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_parameter_array;
    }

	PARAMS() {
	    return this.getToken(CSharpParser.PARAMS, 0);
	};

	array_type() {
	    return this.getTypedRuleContext(Array_typeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterParameter_array(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitParameter_array(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitParameter_array(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Accessor_declarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_accessor_declarations;
        this.attrs = null;
        this.mods = null;
    }

	GET() {
	    return this.getToken(CSharpParser.GET, 0);
	};

	accessor_body() {
	    return this.getTypedRuleContext(Accessor_bodyContext,0);
	};

	SET() {
	    return this.getToken(CSharpParser.SET, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	accessor_modifier() {
	    return this.getTypedRuleContext(Accessor_modifierContext,0);
	};

	set_accessor_declaration() {
	    return this.getTypedRuleContext(Set_accessor_declarationContext,0);
	};

	get_accessor_declaration() {
	    return this.getTypedRuleContext(Get_accessor_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAccessor_declarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAccessor_declarations(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAccessor_declarations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Get_accessor_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_get_accessor_declaration;
    }

	GET() {
	    return this.getToken(CSharpParser.GET, 0);
	};

	accessor_body() {
	    return this.getTypedRuleContext(Accessor_bodyContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	accessor_modifier() {
	    return this.getTypedRuleContext(Accessor_modifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterGet_accessor_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitGet_accessor_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitGet_accessor_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Set_accessor_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_set_accessor_declaration;
    }

	SET() {
	    return this.getToken(CSharpParser.SET, 0);
	};

	accessor_body() {
	    return this.getTypedRuleContext(Accessor_bodyContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	accessor_modifier() {
	    return this.getTypedRuleContext(Accessor_modifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSet_accessor_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSet_accessor_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSet_accessor_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Accessor_modifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_accessor_modifier;
    }

	PROTECTED() {
	    return this.getToken(CSharpParser.PROTECTED, 0);
	};

	INTERNAL() {
	    return this.getToken(CSharpParser.INTERNAL, 0);
	};

	PRIVATE() {
	    return this.getToken(CSharpParser.PRIVATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAccessor_modifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAccessor_modifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAccessor_modifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Accessor_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_accessor_body;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAccessor_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAccessor_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAccessor_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Event_accessor_declarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_event_accessor_declarations;
    }

	ADD() {
	    return this.getToken(CSharpParser.ADD, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	remove_accessor_declaration() {
	    return this.getTypedRuleContext(Remove_accessor_declarationContext,0);
	};

	REMOVE() {
	    return this.getToken(CSharpParser.REMOVE, 0);
	};

	add_accessor_declaration() {
	    return this.getTypedRuleContext(Add_accessor_declarationContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEvent_accessor_declarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEvent_accessor_declarations(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEvent_accessor_declarations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Add_accessor_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_add_accessor_declaration;
    }

	ADD() {
	    return this.getToken(CSharpParser.ADD, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAdd_accessor_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAdd_accessor_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAdd_accessor_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Remove_accessor_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_remove_accessor_declaration;
    }

	REMOVE() {
	    return this.getToken(CSharpParser.REMOVE, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterRemove_accessor_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitRemove_accessor_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitRemove_accessor_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Overloadable_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_overloadable_operator;
    }

	PLUS() {
	    return this.getToken(CSharpParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(CSharpParser.MINUS, 0);
	};

	BANG() {
	    return this.getToken(CSharpParser.BANG, 0);
	};

	TILDE() {
	    return this.getToken(CSharpParser.TILDE, 0);
	};

	OP_INC() {
	    return this.getToken(CSharpParser.OP_INC, 0);
	};

	OP_DEC() {
	    return this.getToken(CSharpParser.OP_DEC, 0);
	};

	TRUE() {
	    return this.getToken(CSharpParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(CSharpParser.FALSE, 0);
	};

	STAR() {
	    return this.getToken(CSharpParser.STAR, 0);
	};

	DIV() {
	    return this.getToken(CSharpParser.DIV, 0);
	};

	PERCENT() {
	    return this.getToken(CSharpParser.PERCENT, 0);
	};

	AMP() {
	    return this.getToken(CSharpParser.AMP, 0);
	};

	BITWISE_OR() {
	    return this.getToken(CSharpParser.BITWISE_OR, 0);
	};

	CARET() {
	    return this.getToken(CSharpParser.CARET, 0);
	};

	OP_LEFT_SHIFT() {
	    return this.getToken(CSharpParser.OP_LEFT_SHIFT, 0);
	};

	right_shift() {
	    return this.getTypedRuleContext(Right_shiftContext,0);
	};

	OP_EQ() {
	    return this.getToken(CSharpParser.OP_EQ, 0);
	};

	OP_NE() {
	    return this.getToken(CSharpParser.OP_NE, 0);
	};

	GT() {
	    return this.getToken(CSharpParser.GT, 0);
	};

	LT() {
	    return this.getToken(CSharpParser.LT, 0);
	};

	OP_GE() {
	    return this.getToken(CSharpParser.OP_GE, 0);
	};

	OP_LE() {
	    return this.getToken(CSharpParser.OP_LE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterOverloadable_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitOverloadable_operator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitOverloadable_operator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Conversion_operator_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_conversion_operator_declarator;
    }

	OPERATOR() {
	    return this.getToken(CSharpParser.OPERATOR, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	arg_declaration() {
	    return this.getTypedRuleContext(Arg_declarationContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	IMPLICIT() {
	    return this.getToken(CSharpParser.IMPLICIT, 0);
	};

	EXPLICIT() {
	    return this.getToken(CSharpParser.EXPLICIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConversion_operator_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConversion_operator_declarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConversion_operator_declarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constructor_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_constructor_initializer;
    }

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	BASE() {
	    return this.getToken(CSharpParser.BASE, 0);
	};

	THIS() {
	    return this.getToken(CSharpParser.THIS, 0);
	};

	argument_list() {
	    return this.getTypedRuleContext(Argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConstructor_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConstructor_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConstructor_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_body;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Struct_interfacesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_struct_interfaces;
    }

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	interface_type_list() {
	    return this.getTypedRuleContext(Interface_type_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterStruct_interfaces(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitStruct_interfaces(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitStruct_interfaces(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Struct_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_struct_body;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	struct_member_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Struct_member_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Struct_member_declarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterStruct_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitStruct_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitStruct_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Struct_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_struct_member_declaration;
    }

	common_member_declaration() {
	    return this.getTypedRuleContext(Common_member_declarationContext,0);
	};

	FIXED() {
	    return this.getToken(CSharpParser.FIXED, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	all_member_modifiers() {
	    return this.getTypedRuleContext(All_member_modifiersContext,0);
	};

	fixed_size_buffer_declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fixed_size_buffer_declaratorContext);
	    } else {
	        return this.getTypedRuleContext(Fixed_size_buffer_declaratorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterStruct_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitStruct_member_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitStruct_member_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Array_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_array_type;
    }

	base_type() {
	    return this.getTypedRuleContext(Base_typeContext,0);
	};

	rank_specifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Rank_specifierContext);
	    } else {
	        return this.getTypedRuleContext(Rank_specifierContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.STAR);
	    } else {
	        return this.getToken(CSharpParser.STAR, i);
	    }
	};


	INTERR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.INTERR);
	    } else {
	        return this.getToken(CSharpParser.INTERR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterArray_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitArray_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitArray_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Rank_specifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_rank_specifier;
    }

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterRank_specifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitRank_specifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitRank_specifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Array_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_array_initializer;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	variable_initializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Variable_initializerContext);
	    } else {
	        return this.getTypedRuleContext(Variable_initializerContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterArray_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitArray_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitArray_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Variant_type_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_variant_type_parameter_list;
    }

	LT() {
	    return this.getToken(CSharpParser.LT, 0);
	};

	variant_type_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Variant_type_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Variant_type_parameterContext,i);
	    }
	};

	GT() {
	    return this.getToken(CSharpParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterVariant_type_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitVariant_type_parameter_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitVariant_type_parameter_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Variant_type_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_variant_type_parameter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	variance_annotation() {
	    return this.getTypedRuleContext(Variance_annotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterVariant_type_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitVariant_type_parameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitVariant_type_parameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Variance_annotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_variance_annotation;
    }

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	OUT() {
	    return this.getToken(CSharpParser.OUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterVariance_annotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitVariance_annotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitVariance_annotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interface_baseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interface_base;
    }

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	interface_type_list() {
	    return this.getTypedRuleContext(Interface_type_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterface_base(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterface_base(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterface_base(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interface_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interface_body;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	interface_member_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Interface_member_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Interface_member_declarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterface_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterface_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterface_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interface_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interface_member_declaration;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	VOID() {
	    return this.getToken(CSharpParser.VOID, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	EVENT() {
	    return this.getToken(CSharpParser.EVENT, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	NEW() {
	    return this.getToken(CSharpParser.NEW, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	interface_accessors() {
	    return this.getTypedRuleContext(Interface_accessorsContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	THIS() {
	    return this.getToken(CSharpParser.THIS, 0);
	};

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	formal_parameter_list() {
	    return this.getTypedRuleContext(Formal_parameter_listContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	UNSAFE() {
	    return this.getToken(CSharpParser.UNSAFE, 0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	READONLY() {
	    return this.getToken(CSharpParser.READONLY, 0);
	};

	type_parameter_list() {
	    return this.getTypedRuleContext(Type_parameter_listContext,0);
	};

	type_parameter_constraints_clauses() {
	    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterface_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterface_member_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterface_member_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interface_accessorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interface_accessors;
    }

	GET() {
	    return this.getToken(CSharpParser.GET, 0);
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.SEMICOLON);
	    } else {
	        return this.getToken(CSharpParser.SEMICOLON, i);
	    }
	};


	SET() {
	    return this.getToken(CSharpParser.SET, 0);
	};

	attributes = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributesContext);
	    } else {
	        return this.getTypedRuleContext(AttributesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterface_accessors(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterface_accessors(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterface_accessors(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Enum_baseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_enum_base;
    }

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEnum_base(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEnum_base(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEnum_base(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Enum_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_enum_body;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	enum_member_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Enum_member_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Enum_member_declarationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEnum_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEnum_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEnum_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Enum_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_enum_member_declaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEnum_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEnum_member_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEnum_member_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Global_attribute_sectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_global_attribute_section;
    }

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	global_attribute_target() {
	    return this.getTypedRuleContext(Global_attribute_targetContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	attribute_list() {
	    return this.getTypedRuleContext(Attribute_listContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(CSharpParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterGlobal_attribute_section(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitGlobal_attribute_section(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitGlobal_attribute_section(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Global_attribute_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_global_attribute_target;
    }

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterGlobal_attribute_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitGlobal_attribute_target(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitGlobal_attribute_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttributesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_attributes;
    }

	attribute_section = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Attribute_sectionContext);
	    } else {
	        return this.getTypedRuleContext(Attribute_sectionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAttributes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAttributes(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAttributes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Attribute_sectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_attribute_section;
    }

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	attribute_list() {
	    return this.getTypedRuleContext(Attribute_listContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	attribute_target() {
	    return this.getTypedRuleContext(Attribute_targetContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	COMMA() {
	    return this.getToken(CSharpParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAttribute_section(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAttribute_section(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAttribute_section(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Attribute_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_attribute_target;
    }

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAttribute_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAttribute_target(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAttribute_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Attribute_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_attribute_list;
    }

	attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributeContext);
	    } else {
	        return this.getTypedRuleContext(AttributeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAttribute_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAttribute_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAttribute_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_attribute;
    }

	namespace_or_type_name() {
	    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	attribute_argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Attribute_argumentContext);
	    } else {
	        return this.getTypedRuleContext(Attribute_argumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAttribute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Attribute_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_attribute_argument;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAttribute_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAttribute_argument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAttribute_argument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Pointer_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_pointer_type;
    }

	STAR() {
	    return this.getToken(CSharpParser.STAR, 0);
	};

	simple_type() {
	    return this.getTypedRuleContext(Simple_typeContext,0);
	};

	class_type() {
	    return this.getTypedRuleContext(Class_typeContext,0);
	};

	rank_specifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Rank_specifierContext);
	    } else {
	        return this.getTypedRuleContext(Rank_specifierContext,i);
	    }
	};

	INTERR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.INTERR);
	    } else {
	        return this.getToken(CSharpParser.INTERR, i);
	    }
	};


	VOID() {
	    return this.getToken(CSharpParser.VOID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterPointer_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitPointer_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitPointer_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fixed_pointer_declaratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_fixed_pointer_declarators;
    }

	fixed_pointer_declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fixed_pointer_declaratorContext);
	    } else {
	        return this.getTypedRuleContext(Fixed_pointer_declaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFixed_pointer_declarators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFixed_pointer_declarators(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFixed_pointer_declarators(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fixed_pointer_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_fixed_pointer_declarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	fixed_pointer_initializer() {
	    return this.getTypedRuleContext(Fixed_pointer_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFixed_pointer_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFixed_pointer_declarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFixed_pointer_declarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fixed_pointer_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_fixed_pointer_initializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AMP() {
	    return this.getToken(CSharpParser.AMP, 0);
	};

	stackalloc_initializer() {
	    return this.getTypedRuleContext(Stackalloc_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFixed_pointer_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFixed_pointer_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFixed_pointer_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fixed_size_buffer_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_fixed_size_buffer_declarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFixed_size_buffer_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFixed_size_buffer_declarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFixed_size_buffer_declarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stackalloc_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_stackalloc_initializer;
    }

	STACKALLOC() {
	    return this.getToken(CSharpParser.STACKALLOC, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterStackalloc_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitStackalloc_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitStackalloc_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Right_arrowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_right_arrow;
        this.first = null;
        this.second = null;
    }

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	GT() {
	    return this.getToken(CSharpParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterRight_arrow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitRight_arrow(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitRight_arrow(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Right_shiftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_right_shift;
        this.first = null;
        this.second = null;
    }

	GT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.GT);
	    } else {
	        return this.getToken(CSharpParser.GT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterRight_shift(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitRight_shift(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitRight_shift(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Right_shift_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_right_shift_assignment;
        this.first = null;
        this.second = null;
    }

	GT() {
	    return this.getToken(CSharpParser.GT, 0);
	};

	OP_GE() {
	    return this.getToken(CSharpParser.OP_GE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterRight_shift_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitRight_shift_assignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitRight_shift_assignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_literal;
    }

	boolean_literal() {
	    return this.getTypedRuleContext(Boolean_literalContext,0);
	};

	string_literal() {
	    return this.getTypedRuleContext(String_literalContext,0);
	};

	INTEGER_LITERAL() {
	    return this.getToken(CSharpParser.INTEGER_LITERAL, 0);
	};

	HEX_INTEGER_LITERAL() {
	    return this.getToken(CSharpParser.HEX_INTEGER_LITERAL, 0);
	};

	BIN_INTEGER_LITERAL() {
	    return this.getToken(CSharpParser.BIN_INTEGER_LITERAL, 0);
	};

	REAL_LITERAL() {
	    return this.getToken(CSharpParser.REAL_LITERAL, 0);
	};

	CHARACTER_LITERAL() {
	    return this.getToken(CSharpParser.CHARACTER_LITERAL, 0);
	};

	NULL_() {
	    return this.getToken(CSharpParser.NULL_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Boolean_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_boolean_literal;
    }

	TRUE() {
	    return this.getToken(CSharpParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(CSharpParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterBoolean_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitBoolean_literal(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitBoolean_literal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class String_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_string_literal;
    }

	interpolated_regular_string() {
	    return this.getTypedRuleContext(Interpolated_regular_stringContext,0);
	};

	interpolated_verbatium_string() {
	    return this.getTypedRuleContext(Interpolated_verbatium_stringContext,0);
	};

	REGULAR_STRING() {
	    return this.getToken(CSharpParser.REGULAR_STRING, 0);
	};

	VERBATIUM_STRING() {
	    return this.getToken(CSharpParser.VERBATIUM_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterString_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitString_literal(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitString_literal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interpolated_regular_stringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interpolated_regular_string;
    }

	INTERPOLATED_REGULAR_STRING_START() {
	    return this.getToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0);
	};

	DOUBLE_QUOTE_INSIDE() {
	    return this.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0);
	};

	interpolated_regular_string_part = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Interpolated_regular_string_partContext);
	    } else {
	        return this.getTypedRuleContext(Interpolated_regular_string_partContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterpolated_regular_string(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterpolated_regular_string(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterpolated_regular_string(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interpolated_verbatium_stringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interpolated_verbatium_string;
    }

	INTERPOLATED_VERBATIUM_STRING_START() {
	    return this.getToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0);
	};

	DOUBLE_QUOTE_INSIDE() {
	    return this.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0);
	};

	interpolated_verbatium_string_part = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Interpolated_verbatium_string_partContext);
	    } else {
	        return this.getTypedRuleContext(Interpolated_verbatium_string_partContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterpolated_verbatium_string(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterpolated_verbatium_string(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterpolated_verbatium_string(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interpolated_regular_string_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interpolated_regular_string_part;
    }

	interpolated_string_expression() {
	    return this.getTypedRuleContext(Interpolated_string_expressionContext,0);
	};

	DOUBLE_CURLY_INSIDE() {
	    return this.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0);
	};

	REGULAR_CHAR_INSIDE() {
	    return this.getToken(CSharpParser.REGULAR_CHAR_INSIDE, 0);
	};

	REGULAR_STRING_INSIDE() {
	    return this.getToken(CSharpParser.REGULAR_STRING_INSIDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterpolated_regular_string_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterpolated_regular_string_part(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterpolated_regular_string_part(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interpolated_verbatium_string_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interpolated_verbatium_string_part;
    }

	interpolated_string_expression() {
	    return this.getTypedRuleContext(Interpolated_string_expressionContext,0);
	};

	DOUBLE_CURLY_INSIDE() {
	    return this.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0);
	};

	VERBATIUM_DOUBLE_QUOTE_INSIDE() {
	    return this.getToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0);
	};

	VERBATIUM_INSIDE_STRING() {
	    return this.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterpolated_verbatium_string_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterpolated_verbatium_string_part(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterpolated_verbatium_string_part(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interpolated_string_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interpolated_string_expression;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	FORMAT_STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.FORMAT_STRING);
	    } else {
	        return this.getToken(CSharpParser.FORMAT_STRING, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterpolated_string_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterpolated_string_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterpolated_string_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_keyword;
    }

	ABSTRACT() {
	    return this.getToken(CSharpParser.ABSTRACT, 0);
	};

	AS() {
	    return this.getToken(CSharpParser.AS, 0);
	};

	BASE() {
	    return this.getToken(CSharpParser.BASE, 0);
	};

	BOOL() {
	    return this.getToken(CSharpParser.BOOL, 0);
	};

	BREAK() {
	    return this.getToken(CSharpParser.BREAK, 0);
	};

	BYTE() {
	    return this.getToken(CSharpParser.BYTE, 0);
	};

	CASE() {
	    return this.getToken(CSharpParser.CASE, 0);
	};

	CATCH() {
	    return this.getToken(CSharpParser.CATCH, 0);
	};

	CHAR() {
	    return this.getToken(CSharpParser.CHAR, 0);
	};

	CHECKED() {
	    return this.getToken(CSharpParser.CHECKED, 0);
	};

	CLASS() {
	    return this.getToken(CSharpParser.CLASS, 0);
	};

	CONST() {
	    return this.getToken(CSharpParser.CONST, 0);
	};

	CONTINUE() {
	    return this.getToken(CSharpParser.CONTINUE, 0);
	};

	DECIMAL() {
	    return this.getToken(CSharpParser.DECIMAL, 0);
	};

	DEFAULT() {
	    return this.getToken(CSharpParser.DEFAULT, 0);
	};

	DELEGATE() {
	    return this.getToken(CSharpParser.DELEGATE, 0);
	};

	DO() {
	    return this.getToken(CSharpParser.DO, 0);
	};

	DOUBLE() {
	    return this.getToken(CSharpParser.DOUBLE, 0);
	};

	ELSE() {
	    return this.getToken(CSharpParser.ELSE, 0);
	};

	ENUM() {
	    return this.getToken(CSharpParser.ENUM, 0);
	};

	EVENT() {
	    return this.getToken(CSharpParser.EVENT, 0);
	};

	EXPLICIT() {
	    return this.getToken(CSharpParser.EXPLICIT, 0);
	};

	EXTERN() {
	    return this.getToken(CSharpParser.EXTERN, 0);
	};

	FALSE() {
	    return this.getToken(CSharpParser.FALSE, 0);
	};

	FINALLY() {
	    return this.getToken(CSharpParser.FINALLY, 0);
	};

	FIXED() {
	    return this.getToken(CSharpParser.FIXED, 0);
	};

	FLOAT() {
	    return this.getToken(CSharpParser.FLOAT, 0);
	};

	FOR() {
	    return this.getToken(CSharpParser.FOR, 0);
	};

	FOREACH() {
	    return this.getToken(CSharpParser.FOREACH, 0);
	};

	GOTO() {
	    return this.getToken(CSharpParser.GOTO, 0);
	};

	IF() {
	    return this.getToken(CSharpParser.IF, 0);
	};

	IMPLICIT() {
	    return this.getToken(CSharpParser.IMPLICIT, 0);
	};

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	INT() {
	    return this.getToken(CSharpParser.INT, 0);
	};

	INTERFACE() {
	    return this.getToken(CSharpParser.INTERFACE, 0);
	};

	INTERNAL() {
	    return this.getToken(CSharpParser.INTERNAL, 0);
	};

	IS() {
	    return this.getToken(CSharpParser.IS, 0);
	};

	LOCK() {
	    return this.getToken(CSharpParser.LOCK, 0);
	};

	LONG() {
	    return this.getToken(CSharpParser.LONG, 0);
	};

	NAMESPACE() {
	    return this.getToken(CSharpParser.NAMESPACE, 0);
	};

	NEW() {
	    return this.getToken(CSharpParser.NEW, 0);
	};

	NULL_() {
	    return this.getToken(CSharpParser.NULL_, 0);
	};

	OBJECT() {
	    return this.getToken(CSharpParser.OBJECT, 0);
	};

	OPERATOR() {
	    return this.getToken(CSharpParser.OPERATOR, 0);
	};

	OUT() {
	    return this.getToken(CSharpParser.OUT, 0);
	};

	OVERRIDE() {
	    return this.getToken(CSharpParser.OVERRIDE, 0);
	};

	PARAMS() {
	    return this.getToken(CSharpParser.PARAMS, 0);
	};

	PRIVATE() {
	    return this.getToken(CSharpParser.PRIVATE, 0);
	};

	PROTECTED() {
	    return this.getToken(CSharpParser.PROTECTED, 0);
	};

	PUBLIC() {
	    return this.getToken(CSharpParser.PUBLIC, 0);
	};

	READONLY() {
	    return this.getToken(CSharpParser.READONLY, 0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	RETURN() {
	    return this.getToken(CSharpParser.RETURN, 0);
	};

	SBYTE() {
	    return this.getToken(CSharpParser.SBYTE, 0);
	};

	SEALED() {
	    return this.getToken(CSharpParser.SEALED, 0);
	};

	SHORT() {
	    return this.getToken(CSharpParser.SHORT, 0);
	};

	SIZEOF() {
	    return this.getToken(CSharpParser.SIZEOF, 0);
	};

	STACKALLOC() {
	    return this.getToken(CSharpParser.STACKALLOC, 0);
	};

	STATIC() {
	    return this.getToken(CSharpParser.STATIC, 0);
	};

	STRING() {
	    return this.getToken(CSharpParser.STRING, 0);
	};

	STRUCT() {
	    return this.getToken(CSharpParser.STRUCT, 0);
	};

	SWITCH() {
	    return this.getToken(CSharpParser.SWITCH, 0);
	};

	THIS() {
	    return this.getToken(CSharpParser.THIS, 0);
	};

	THROW() {
	    return this.getToken(CSharpParser.THROW, 0);
	};

	TRUE() {
	    return this.getToken(CSharpParser.TRUE, 0);
	};

	TRY() {
	    return this.getToken(CSharpParser.TRY, 0);
	};

	TYPEOF() {
	    return this.getToken(CSharpParser.TYPEOF, 0);
	};

	UINT() {
	    return this.getToken(CSharpParser.UINT, 0);
	};

	ULONG() {
	    return this.getToken(CSharpParser.ULONG, 0);
	};

	UNCHECKED() {
	    return this.getToken(CSharpParser.UNCHECKED, 0);
	};

	UNMANAGED() {
	    return this.getToken(CSharpParser.UNMANAGED, 0);
	};

	UNSAFE() {
	    return this.getToken(CSharpParser.UNSAFE, 0);
	};

	USHORT() {
	    return this.getToken(CSharpParser.USHORT, 0);
	};

	USING() {
	    return this.getToken(CSharpParser.USING, 0);
	};

	VIRTUAL() {
	    return this.getToken(CSharpParser.VIRTUAL, 0);
	};

	VOID() {
	    return this.getToken(CSharpParser.VOID, 0);
	};

	VOLATILE() {
	    return this.getToken(CSharpParser.VOLATILE, 0);
	};

	WHILE() {
	    return this.getToken(CSharpParser.WHILE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_class_definition;
    }

	CLASS() {
	    return this.getToken(CSharpParser.CLASS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	class_body() {
	    return this.getTypedRuleContext(Class_bodyContext,0);
	};

	type_parameter_list() {
	    return this.getTypedRuleContext(Type_parameter_listContext,0);
	};

	class_base() {
	    return this.getTypedRuleContext(Class_baseContext,0);
	};

	type_parameter_constraints_clauses() {
	    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterClass_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitClass_definition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitClass_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Struct_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_struct_definition;
    }

	STRUCT() {
	    return this.getToken(CSharpParser.STRUCT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	struct_body() {
	    return this.getTypedRuleContext(Struct_bodyContext,0);
	};

	type_parameter_list() {
	    return this.getTypedRuleContext(Type_parameter_listContext,0);
	};

	struct_interfaces() {
	    return this.getTypedRuleContext(Struct_interfacesContext,0);
	};

	type_parameter_constraints_clauses() {
	    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	READONLY() {
	    return this.getToken(CSharpParser.READONLY, 0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterStruct_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitStruct_definition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitStruct_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interface_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interface_definition;
    }

	INTERFACE() {
	    return this.getToken(CSharpParser.INTERFACE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	class_body() {
	    return this.getTypedRuleContext(Class_bodyContext,0);
	};

	variant_type_parameter_list() {
	    return this.getTypedRuleContext(Variant_type_parameter_listContext,0);
	};

	interface_base() {
	    return this.getTypedRuleContext(Interface_baseContext,0);
	};

	type_parameter_constraints_clauses() {
	    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterface_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterface_definition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterface_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Enum_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_enum_definition;
    }

	ENUM() {
	    return this.getToken(CSharpParser.ENUM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enum_body() {
	    return this.getTypedRuleContext(Enum_bodyContext,0);
	};

	enum_base() {
	    return this.getTypedRuleContext(Enum_baseContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEnum_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEnum_definition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEnum_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Delegate_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_delegate_definition;
    }

	DELEGATE() {
	    return this.getToken(CSharpParser.DELEGATE, 0);
	};

	return_type() {
	    return this.getTypedRuleContext(Return_typeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	variant_type_parameter_list() {
	    return this.getTypedRuleContext(Variant_type_parameter_listContext,0);
	};

	formal_parameter_list() {
	    return this.getTypedRuleContext(Formal_parameter_listContext,0);
	};

	type_parameter_constraints_clauses() {
	    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterDelegate_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitDelegate_definition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitDelegate_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Event_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_event_declaration;
    }

	EVENT() {
	    return this.getToken(CSharpParser.EVENT, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	variable_declarators() {
	    return this.getTypedRuleContext(Variable_declaratorsContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	member_name() {
	    return this.getTypedRuleContext(Member_nameContext,0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	event_accessor_declarations() {
	    return this.getTypedRuleContext(Event_accessor_declarationsContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEvent_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEvent_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEvent_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Field_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_field_declaration;
    }

	variable_declarators() {
	    return this.getTypedRuleContext(Variable_declaratorsContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterField_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitField_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitField_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Property_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_property_declaration;
    }

	member_name() {
	    return this.getTypedRuleContext(Member_nameContext,0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	accessor_declarations() {
	    return this.getTypedRuleContext(Accessor_declarationsContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	variable_initializer() {
	    return this.getTypedRuleContext(Variable_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterProperty_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitProperty_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitProperty_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constant_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_constant_declaration;
    }

	CONST() {
	    return this.getToken(CSharpParser.CONST, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	constant_declarators() {
	    return this.getTypedRuleContext(Constant_declaratorsContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConstant_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConstant_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConstant_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Indexer_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_indexer_declaration;
    }

	THIS() {
	    return this.getToken(CSharpParser.THIS, 0);
	};

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	formal_parameter_list() {
	    return this.getTypedRuleContext(Formal_parameter_listContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	accessor_declarations() {
	    return this.getTypedRuleContext(Accessor_declarationsContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIndexer_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIndexer_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIndexer_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Destructor_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_destructor_definition;
    }

	TILDE() {
	    return this.getToken(CSharpParser.TILDE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterDestructor_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitDestructor_definition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitDestructor_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constructor_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_constructor_declaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	formal_parameter_list() {
	    return this.getTypedRuleContext(Formal_parameter_listContext,0);
	};

	constructor_initializer() {
	    return this.getTypedRuleContext(Constructor_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConstructor_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConstructor_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConstructor_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_method_declaration;
    }

	method_member_name() {
	    return this.getTypedRuleContext(Method_member_nameContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	method_body() {
	    return this.getTypedRuleContext(Method_bodyContext,0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	type_parameter_list() {
	    return this.getTypedRuleContext(Type_parameter_listContext,0);
	};

	formal_parameter_list() {
	    return this.getTypedRuleContext(Formal_parameter_listContext,0);
	};

	type_parameter_constraints_clauses() {
	    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMethod_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMethod_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMethod_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Method_member_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_method_member_name;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOUBLE_COLON() {
	    return this.getToken(CSharpParser.DOUBLE_COLON, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.DOT);
	    } else {
	        return this.getToken(CSharpParser.DOT, i);
	    }
	};


	type_argument_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_argument_listContext);
	    } else {
	        return this.getTypedRuleContext(Type_argument_listContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMethod_member_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMethod_member_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMethod_member_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Operator_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_operator_declaration;
    }

	OPERATOR() {
	    return this.getToken(CSharpParser.OPERATOR, 0);
	};

	overloadable_operator() {
	    return this.getTypedRuleContext(Overloadable_operatorContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	arg_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arg_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Arg_declarationContext,i);
	    }
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.IN);
	    } else {
	        return this.getToken(CSharpParser.IN, i);
	    }
	};


	COMMA() {
	    return this.getToken(CSharpParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterOperator_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitOperator_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitOperator_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Arg_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_arg_declaration;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterArg_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitArg_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitArg_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Method_invocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_method_invocation;
    }

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	argument_list() {
	    return this.getTypedRuleContext(Argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMethod_invocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMethod_invocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMethod_invocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_creation_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_object_creation_expression;
    }

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	argument_list() {
	    return this.getTypedRuleContext(Argument_listContext,0);
	};

	object_or_collection_initializer() {
	    return this.getTypedRuleContext(Object_or_collection_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterObject_creation_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitObject_creation_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitObject_creation_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_identifier;
    }

	IDENTIFIER() {
	    return this.getToken(CSharpParser.IDENTIFIER, 0);
	};

	ADD() {
	    return this.getToken(CSharpParser.ADD, 0);
	};

	ALIAS() {
	    return this.getToken(CSharpParser.ALIAS, 0);
	};

	ARGLIST() {
	    return this.getToken(CSharpParser.ARGLIST, 0);
	};

	ASCENDING() {
	    return this.getToken(CSharpParser.ASCENDING, 0);
	};

	ASYNC() {
	    return this.getToken(CSharpParser.ASYNC, 0);
	};

	AWAIT() {
	    return this.getToken(CSharpParser.AWAIT, 0);
	};

	BY() {
	    return this.getToken(CSharpParser.BY, 0);
	};

	DESCENDING() {
	    return this.getToken(CSharpParser.DESCENDING, 0);
	};

	DYNAMIC() {
	    return this.getToken(CSharpParser.DYNAMIC, 0);
	};

	EQUALS() {
	    return this.getToken(CSharpParser.EQUALS, 0);
	};

	FROM() {
	    return this.getToken(CSharpParser.FROM, 0);
	};

	GET() {
	    return this.getToken(CSharpParser.GET, 0);
	};

	GROUP() {
	    return this.getToken(CSharpParser.GROUP, 0);
	};

	INTO() {
	    return this.getToken(CSharpParser.INTO, 0);
	};

	JOIN() {
	    return this.getToken(CSharpParser.JOIN, 0);
	};

	LET() {
	    return this.getToken(CSharpParser.LET, 0);
	};

	NAMEOF() {
	    return this.getToken(CSharpParser.NAMEOF, 0);
	};

	ON() {
	    return this.getToken(CSharpParser.ON, 0);
	};

	ORDERBY() {
	    return this.getToken(CSharpParser.ORDERBY, 0);
	};

	PARTIAL() {
	    return this.getToken(CSharpParser.PARTIAL, 0);
	};

	REMOVE() {
	    return this.getToken(CSharpParser.REMOVE, 0);
	};

	SELECT() {
	    return this.getToken(CSharpParser.SELECT, 0);
	};

	SET() {
	    return this.getToken(CSharpParser.SET, 0);
	};

	UNMANAGED() {
	    return this.getToken(CSharpParser.UNMANAGED, 0);
	};

	VAR() {
	    return this.getToken(CSharpParser.VAR, 0);
	};

	WHEN() {
	    return this.getToken(CSharpParser.WHEN, 0);
	};

	WHERE() {
	    return this.getToken(CSharpParser.WHERE, 0);
	};

	YIELD() {
	    return this.getToken(CSharpParser.YIELD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




CSharpParser.Compilation_unitContext = Compilation_unitContext; 
CSharpParser.Namespace_or_type_nameContext = Namespace_or_type_nameContext; 
CSharpParser.Type_Context = Type_Context; 
CSharpParser.Base_typeContext = Base_typeContext; 
CSharpParser.Tuple_typeContext = Tuple_typeContext; 
CSharpParser.Tuple_elementContext = Tuple_elementContext; 
CSharpParser.Simple_typeContext = Simple_typeContext; 
CSharpParser.Numeric_typeContext = Numeric_typeContext; 
CSharpParser.Integral_typeContext = Integral_typeContext; 
CSharpParser.Floating_point_typeContext = Floating_point_typeContext; 
CSharpParser.Class_typeContext = Class_typeContext; 
CSharpParser.Type_argument_listContext = Type_argument_listContext; 
CSharpParser.Argument_listContext = Argument_listContext; 
CSharpParser.ArgumentContext = ArgumentContext; 
CSharpParser.ExpressionContext = ExpressionContext; 
CSharpParser.Non_assignment_expressionContext = Non_assignment_expressionContext; 
CSharpParser.AssignmentContext = AssignmentContext; 
CSharpParser.Assignment_operatorContext = Assignment_operatorContext; 
CSharpParser.Conditional_expressionContext = Conditional_expressionContext; 
CSharpParser.Null_coalescing_expressionContext = Null_coalescing_expressionContext; 
CSharpParser.Conditional_or_expressionContext = Conditional_or_expressionContext; 
CSharpParser.Conditional_and_expressionContext = Conditional_and_expressionContext; 
CSharpParser.Inclusive_or_expressionContext = Inclusive_or_expressionContext; 
CSharpParser.Exclusive_or_expressionContext = Exclusive_or_expressionContext; 
CSharpParser.And_expressionContext = And_expressionContext; 
CSharpParser.Equality_expressionContext = Equality_expressionContext; 
CSharpParser.Relational_expressionContext = Relational_expressionContext; 
CSharpParser.Shift_expressionContext = Shift_expressionContext; 
CSharpParser.Additive_expressionContext = Additive_expressionContext; 
CSharpParser.Multiplicative_expressionContext = Multiplicative_expressionContext; 
CSharpParser.Switch_expressionContext = Switch_expressionContext; 
CSharpParser.Switch_expression_armsContext = Switch_expression_armsContext; 
CSharpParser.Switch_expression_armContext = Switch_expression_armContext; 
CSharpParser.Range_expressionContext = Range_expressionContext; 
CSharpParser.Unary_expressionContext = Unary_expressionContext; 
CSharpParser.Cast_expressionContext = Cast_expressionContext; 
CSharpParser.Primary_expressionContext = Primary_expressionContext; 
CSharpParser.Primary_expression_startContext = Primary_expression_startContext; 
CSharpParser.Throwable_expressionContext = Throwable_expressionContext; 
CSharpParser.Throw_expressionContext = Throw_expressionContext; 
CSharpParser.Member_accessContext = Member_accessContext; 
CSharpParser.Bracket_expressionContext = Bracket_expressionContext; 
CSharpParser.Indexer_argumentContext = Indexer_argumentContext; 
CSharpParser.Predefined_typeContext = Predefined_typeContext; 
CSharpParser.Expression_listContext = Expression_listContext; 
CSharpParser.Object_or_collection_initializerContext = Object_or_collection_initializerContext; 
CSharpParser.Object_initializerContext = Object_initializerContext; 
CSharpParser.Member_initializer_listContext = Member_initializer_listContext; 
CSharpParser.Member_initializerContext = Member_initializerContext; 
CSharpParser.Initializer_valueContext = Initializer_valueContext; 
CSharpParser.Collection_initializerContext = Collection_initializerContext; 
CSharpParser.Element_initializerContext = Element_initializerContext; 
CSharpParser.Anonymous_object_initializerContext = Anonymous_object_initializerContext; 
CSharpParser.Member_declarator_listContext = Member_declarator_listContext; 
CSharpParser.Member_declaratorContext = Member_declaratorContext; 
CSharpParser.Unbound_type_nameContext = Unbound_type_nameContext; 
CSharpParser.Generic_dimension_specifierContext = Generic_dimension_specifierContext; 
CSharpParser.IsTypeContext = IsTypeContext; 
CSharpParser.IsTypePatternArmsContext = IsTypePatternArmsContext; 
CSharpParser.IsTypePatternArmContext = IsTypePatternArmContext; 
CSharpParser.Lambda_expressionContext = Lambda_expressionContext; 
CSharpParser.Anonymous_function_signatureContext = Anonymous_function_signatureContext; 
CSharpParser.Explicit_anonymous_function_parameter_listContext = Explicit_anonymous_function_parameter_listContext; 
CSharpParser.Explicit_anonymous_function_parameterContext = Explicit_anonymous_function_parameterContext; 
CSharpParser.Implicit_anonymous_function_parameter_listContext = Implicit_anonymous_function_parameter_listContext; 
CSharpParser.Anonymous_function_bodyContext = Anonymous_function_bodyContext; 
CSharpParser.Query_expressionContext = Query_expressionContext; 
CSharpParser.From_clauseContext = From_clauseContext; 
CSharpParser.Query_bodyContext = Query_bodyContext; 
CSharpParser.Query_body_clauseContext = Query_body_clauseContext; 
CSharpParser.Let_clauseContext = Let_clauseContext; 
CSharpParser.Where_clauseContext = Where_clauseContext; 
CSharpParser.Combined_join_clauseContext = Combined_join_clauseContext; 
CSharpParser.Orderby_clauseContext = Orderby_clauseContext; 
CSharpParser.OrderingContext = OrderingContext; 
CSharpParser.Select_or_group_clauseContext = Select_or_group_clauseContext; 
CSharpParser.Query_continuationContext = Query_continuationContext; 
CSharpParser.StatementContext = StatementContext; 
CSharpParser.DeclarationStatementContext = DeclarationStatementContext; 
CSharpParser.Local_function_declarationContext = Local_function_declarationContext; 
CSharpParser.Local_function_headerContext = Local_function_headerContext; 
CSharpParser.Local_function_modifiersContext = Local_function_modifiersContext; 
CSharpParser.Local_function_bodyContext = Local_function_bodyContext; 
CSharpParser.Labeled_StatementContext = Labeled_StatementContext; 
CSharpParser.Embedded_statementContext = Embedded_statementContext; 
CSharpParser.Simple_embedded_statementContext = Simple_embedded_statementContext; 
CSharpParser.BlockContext = BlockContext; 
CSharpParser.Local_variable_declarationContext = Local_variable_declarationContext; 
CSharpParser.Local_variable_typeContext = Local_variable_typeContext; 
CSharpParser.Local_variable_declaratorContext = Local_variable_declaratorContext; 
CSharpParser.Local_variable_initializerContext = Local_variable_initializerContext; 
CSharpParser.Local_constant_declarationContext = Local_constant_declarationContext; 
CSharpParser.If_bodyContext = If_bodyContext; 
CSharpParser.Switch_sectionContext = Switch_sectionContext; 
CSharpParser.Switch_labelContext = Switch_labelContext; 
CSharpParser.Case_guardContext = Case_guardContext; 
CSharpParser.Statement_listContext = Statement_listContext; 
CSharpParser.For_initializerContext = For_initializerContext; 
CSharpParser.For_iteratorContext = For_iteratorContext; 
CSharpParser.Catch_clausesContext = Catch_clausesContext; 
CSharpParser.Specific_catch_clauseContext = Specific_catch_clauseContext; 
CSharpParser.General_catch_clauseContext = General_catch_clauseContext; 
CSharpParser.Exception_filterContext = Exception_filterContext; 
CSharpParser.Finally_clauseContext = Finally_clauseContext; 
CSharpParser.Resource_acquisitionContext = Resource_acquisitionContext; 
CSharpParser.Namespace_declarationContext = Namespace_declarationContext; 
CSharpParser.Qualified_identifierContext = Qualified_identifierContext; 
CSharpParser.Namespace_bodyContext = Namespace_bodyContext; 
CSharpParser.Extern_alias_directivesContext = Extern_alias_directivesContext; 
CSharpParser.Extern_alias_directiveContext = Extern_alias_directiveContext; 
CSharpParser.Using_directivesContext = Using_directivesContext; 
CSharpParser.Using_directiveContext = Using_directiveContext; 
CSharpParser.Namespace_member_declarationsContext = Namespace_member_declarationsContext; 
CSharpParser.Namespace_member_declarationContext = Namespace_member_declarationContext; 
CSharpParser.Type_declarationContext = Type_declarationContext; 
CSharpParser.Qualified_alias_memberContext = Qualified_alias_memberContext; 
CSharpParser.Type_parameter_listContext = Type_parameter_listContext; 
CSharpParser.Type_parameterContext = Type_parameterContext; 
CSharpParser.Class_baseContext = Class_baseContext; 
CSharpParser.Interface_type_listContext = Interface_type_listContext; 
CSharpParser.Type_parameter_constraints_clausesContext = Type_parameter_constraints_clausesContext; 
CSharpParser.Type_parameter_constraints_clauseContext = Type_parameter_constraints_clauseContext; 
CSharpParser.Type_parameter_constraintsContext = Type_parameter_constraintsContext; 
CSharpParser.Primary_constraintContext = Primary_constraintContext; 
CSharpParser.Secondary_constraintsContext = Secondary_constraintsContext; 
CSharpParser.Constructor_constraintContext = Constructor_constraintContext; 
CSharpParser.Class_bodyContext = Class_bodyContext; 
CSharpParser.Class_member_declarationsContext = Class_member_declarationsContext; 
CSharpParser.Class_member_declarationContext = Class_member_declarationContext; 
CSharpParser.All_member_modifiersContext = All_member_modifiersContext; 
CSharpParser.All_member_modifierContext = All_member_modifierContext; 
CSharpParser.Common_member_declarationContext = Common_member_declarationContext; 
CSharpParser.Typed_member_declarationContext = Typed_member_declarationContext; 
CSharpParser.Constant_declaratorsContext = Constant_declaratorsContext; 
CSharpParser.Constant_declaratorContext = Constant_declaratorContext; 
CSharpParser.Variable_declaratorsContext = Variable_declaratorsContext; 
CSharpParser.Variable_declaratorContext = Variable_declaratorContext; 
CSharpParser.Variable_initializerContext = Variable_initializerContext; 
CSharpParser.Return_typeContext = Return_typeContext; 
CSharpParser.Member_nameContext = Member_nameContext; 
CSharpParser.Method_bodyContext = Method_bodyContext; 
CSharpParser.Formal_parameter_listContext = Formal_parameter_listContext; 
CSharpParser.Fixed_parametersContext = Fixed_parametersContext; 
CSharpParser.Fixed_parameterContext = Fixed_parameterContext; 
CSharpParser.Parameter_modifierContext = Parameter_modifierContext; 
CSharpParser.Parameter_arrayContext = Parameter_arrayContext; 
CSharpParser.Accessor_declarationsContext = Accessor_declarationsContext; 
CSharpParser.Get_accessor_declarationContext = Get_accessor_declarationContext; 
CSharpParser.Set_accessor_declarationContext = Set_accessor_declarationContext; 
CSharpParser.Accessor_modifierContext = Accessor_modifierContext; 
CSharpParser.Accessor_bodyContext = Accessor_bodyContext; 
CSharpParser.Event_accessor_declarationsContext = Event_accessor_declarationsContext; 
CSharpParser.Add_accessor_declarationContext = Add_accessor_declarationContext; 
CSharpParser.Remove_accessor_declarationContext = Remove_accessor_declarationContext; 
CSharpParser.Overloadable_operatorContext = Overloadable_operatorContext; 
CSharpParser.Conversion_operator_declaratorContext = Conversion_operator_declaratorContext; 
CSharpParser.Constructor_initializerContext = Constructor_initializerContext; 
CSharpParser.BodyContext = BodyContext; 
CSharpParser.Struct_interfacesContext = Struct_interfacesContext; 
CSharpParser.Struct_bodyContext = Struct_bodyContext; 
CSharpParser.Struct_member_declarationContext = Struct_member_declarationContext; 
CSharpParser.Array_typeContext = Array_typeContext; 
CSharpParser.Rank_specifierContext = Rank_specifierContext; 
CSharpParser.Array_initializerContext = Array_initializerContext; 
CSharpParser.Variant_type_parameter_listContext = Variant_type_parameter_listContext; 
CSharpParser.Variant_type_parameterContext = Variant_type_parameterContext; 
CSharpParser.Variance_annotationContext = Variance_annotationContext; 
CSharpParser.Interface_baseContext = Interface_baseContext; 
CSharpParser.Interface_bodyContext = Interface_bodyContext; 
CSharpParser.Interface_member_declarationContext = Interface_member_declarationContext; 
CSharpParser.Interface_accessorsContext = Interface_accessorsContext; 
CSharpParser.Enum_baseContext = Enum_baseContext; 
CSharpParser.Enum_bodyContext = Enum_bodyContext; 
CSharpParser.Enum_member_declarationContext = Enum_member_declarationContext; 
CSharpParser.Global_attribute_sectionContext = Global_attribute_sectionContext; 
CSharpParser.Global_attribute_targetContext = Global_attribute_targetContext; 
CSharpParser.AttributesContext = AttributesContext; 
CSharpParser.Attribute_sectionContext = Attribute_sectionContext; 
CSharpParser.Attribute_targetContext = Attribute_targetContext; 
CSharpParser.Attribute_listContext = Attribute_listContext; 
CSharpParser.AttributeContext = AttributeContext; 
CSharpParser.Attribute_argumentContext = Attribute_argumentContext; 
CSharpParser.Pointer_typeContext = Pointer_typeContext; 
CSharpParser.Fixed_pointer_declaratorsContext = Fixed_pointer_declaratorsContext; 
CSharpParser.Fixed_pointer_declaratorContext = Fixed_pointer_declaratorContext; 
CSharpParser.Fixed_pointer_initializerContext = Fixed_pointer_initializerContext; 
CSharpParser.Fixed_size_buffer_declaratorContext = Fixed_size_buffer_declaratorContext; 
CSharpParser.Stackalloc_initializerContext = Stackalloc_initializerContext; 
CSharpParser.Right_arrowContext = Right_arrowContext; 
CSharpParser.Right_shiftContext = Right_shiftContext; 
CSharpParser.Right_shift_assignmentContext = Right_shift_assignmentContext; 
CSharpParser.LiteralContext = LiteralContext; 
CSharpParser.Boolean_literalContext = Boolean_literalContext; 
CSharpParser.String_literalContext = String_literalContext; 
CSharpParser.Interpolated_regular_stringContext = Interpolated_regular_stringContext; 
CSharpParser.Interpolated_verbatium_stringContext = Interpolated_verbatium_stringContext; 
CSharpParser.Interpolated_regular_string_partContext = Interpolated_regular_string_partContext; 
CSharpParser.Interpolated_verbatium_string_partContext = Interpolated_verbatium_string_partContext; 
CSharpParser.Interpolated_string_expressionContext = Interpolated_string_expressionContext; 
CSharpParser.KeywordContext = KeywordContext; 
CSharpParser.Class_definitionContext = Class_definitionContext; 
CSharpParser.Struct_definitionContext = Struct_definitionContext; 
CSharpParser.Interface_definitionContext = Interface_definitionContext; 
CSharpParser.Enum_definitionContext = Enum_definitionContext; 
CSharpParser.Delegate_definitionContext = Delegate_definitionContext; 
CSharpParser.Event_declarationContext = Event_declarationContext; 
CSharpParser.Field_declarationContext = Field_declarationContext; 
CSharpParser.Property_declarationContext = Property_declarationContext; 
CSharpParser.Constant_declarationContext = Constant_declarationContext; 
CSharpParser.Indexer_declarationContext = Indexer_declarationContext; 
CSharpParser.Destructor_definitionContext = Destructor_definitionContext; 
CSharpParser.Constructor_declarationContext = Constructor_declarationContext; 
CSharpParser.Method_declarationContext = Method_declarationContext; 
CSharpParser.Method_member_nameContext = Method_member_nameContext; 
CSharpParser.Operator_declarationContext = Operator_declarationContext; 
CSharpParser.Arg_declarationContext = Arg_declarationContext; 
CSharpParser.Method_invocationContext = Method_invocationContext; 
CSharpParser.Object_creation_expressionContext = Object_creation_expressionContext; 
CSharpParser.IdentifierContext = IdentifierContext; 
