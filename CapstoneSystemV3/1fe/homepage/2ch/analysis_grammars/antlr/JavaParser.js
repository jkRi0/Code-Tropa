// Generated from ./antlr-src/JavaParser.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from './antlr4.web.js';
import { Parser } from './antlr4.web.js';
import JavaParserListener from './JavaParserListener.js';
import JavaParserVisitor from './JavaParserVisitor.js';

// import JavaParserBase from './JavaParserBase.js';

const serializedATN = [4,1,129,1844,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,1,0,3,0,260,
8,0,1,0,1,0,5,0,264,8,0,10,0,12,0,267,9,0,1,0,1,0,5,0,271,8,0,10,0,12,0,
274,9,0,1,0,1,0,1,0,1,0,3,0,280,8,0,1,1,5,1,283,8,1,10,1,12,1,286,9,1,1,
1,1,1,1,2,5,2,291,8,2,10,2,12,2,294,9,2,1,2,1,2,1,2,1,2,1,3,1,3,3,3,302,
8,3,1,3,1,3,1,3,3,3,307,8,3,1,3,1,3,1,4,5,4,312,8,4,10,4,12,4,315,9,4,1,
4,1,4,1,4,1,4,1,4,3,4,322,8,4,1,5,1,5,1,5,1,5,1,5,3,5,329,8,5,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,341,8,6,1,7,1,7,3,7,345,8,7,1,8,1,8,1,
8,3,8,350,8,8,1,8,1,8,3,8,354,8,8,1,8,1,8,3,8,358,8,8,1,8,1,8,3,8,362,8,
8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,370,8,9,10,9,12,9,373,9,9,1,9,1,9,1,10,5,10,
378,8,10,10,10,12,10,381,9,10,1,10,1,10,1,10,5,10,386,8,10,10,10,12,10,389,
9,10,1,10,3,10,392,8,10,1,11,1,11,1,11,5,11,397,8,11,10,11,12,11,400,9,11,
1,12,1,12,1,12,1,12,3,12,406,8,12,1,12,1,12,3,12,410,8,12,1,12,3,12,413,
8,12,1,12,3,12,416,8,12,1,12,1,12,1,13,1,13,1,13,5,13,423,8,13,10,13,12,
13,426,9,13,1,14,5,14,429,8,14,10,14,12,14,432,9,14,1,14,1,14,3,14,436,8,
14,1,14,3,14,439,8,14,1,15,1,15,5,15,443,8,15,10,15,12,15,446,9,15,1,16,
1,16,1,16,3,16,451,8,16,1,16,1,16,3,16,455,8,16,1,16,1,16,3,16,459,8,16,
1,16,1,16,1,17,1,17,5,17,465,8,17,10,17,12,17,468,9,17,1,17,1,17,1,18,1,
18,5,18,474,8,18,10,18,12,18,477,9,18,1,18,1,18,1,19,1,19,3,19,483,8,19,
1,19,1,19,5,19,487,8,19,10,19,12,19,490,9,19,1,19,3,19,493,8,19,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,505,8,20,1,21,1,21,1,21,1,21,
1,21,5,21,512,8,21,10,21,12,21,515,9,21,1,21,1,21,3,21,519,8,21,1,21,1,21,
1,22,1,22,3,22,525,8,22,1,23,1,23,3,23,529,8,23,1,24,1,24,1,24,1,25,1,25,
1,25,1,26,1,26,1,26,1,26,3,26,541,8,26,1,26,1,26,1,27,5,27,546,8,27,10,27,
12,27,549,9,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,5,29,559,8,29,10,
29,12,29,562,9,29,1,29,1,29,3,29,566,8,29,1,30,1,30,1,30,1,30,1,30,1,30,
1,30,1,30,3,30,576,8,30,1,31,1,31,1,31,1,31,5,31,582,8,31,10,31,12,31,585,
9,31,1,31,1,31,1,32,1,32,1,32,5,32,592,8,32,10,32,12,32,595,9,32,1,32,1,
32,1,32,1,33,5,33,601,8,33,10,33,12,33,604,9,33,1,33,1,33,1,34,1,34,1,34,
1,34,1,34,1,34,3,34,614,8,34,1,35,5,35,617,8,35,10,35,12,35,620,9,35,1,35,
1,35,1,35,1,36,5,36,626,8,36,10,36,12,36,629,9,36,1,36,1,36,1,36,1,36,1,
36,5,36,636,8,36,10,36,12,36,639,9,36,1,36,1,36,3,36,643,8,36,1,36,1,36,
1,37,1,37,1,37,5,37,650,8,37,10,37,12,37,653,9,37,1,38,1,38,1,38,3,38,658,
8,38,1,39,1,39,1,39,5,39,663,8,39,10,39,12,39,666,9,39,1,40,1,40,3,40,670,
8,40,1,41,1,41,1,41,1,41,5,41,676,8,41,10,41,12,41,679,9,41,1,41,3,41,682,
8,41,3,41,684,8,41,1,41,1,41,1,42,1,42,1,42,5,42,691,8,42,10,42,12,42,694,
9,42,3,42,696,8,42,1,42,1,42,3,42,700,8,42,4,42,702,8,42,11,42,12,42,703,
1,42,1,42,5,42,708,8,42,10,42,12,42,711,9,42,1,42,1,42,3,42,715,8,42,5,42,
717,8,42,10,42,12,42,720,9,42,1,43,1,43,1,43,5,43,725,8,43,10,43,12,43,728,
9,43,1,44,1,44,5,44,732,8,44,10,44,12,44,735,9,44,1,44,1,44,1,44,3,44,740,
8,44,3,44,742,8,44,1,45,1,45,1,45,5,45,747,8,45,10,45,12,45,750,9,45,1,46,
1,46,1,46,3,46,755,8,46,1,46,1,46,5,46,759,8,46,10,46,12,46,762,9,46,3,46,
764,8,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,772,8,47,10,47,12,47,775,9,47,
1,47,1,47,1,48,1,48,1,48,5,48,782,8,48,10,48,12,48,785,9,48,1,49,5,49,788,
8,49,10,49,12,49,791,9,49,1,49,1,49,5,49,795,8,49,10,49,12,49,798,9,49,1,
49,3,49,801,8,49,1,49,1,49,1,50,1,50,1,50,5,50,808,8,50,10,50,12,50,811,
9,50,1,51,5,51,814,8,51,10,51,12,51,817,9,51,1,51,1,51,1,51,1,52,1,52,1,
52,5,52,825,8,52,10,52,12,52,828,9,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
3,53,837,8,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,5,56,846,8,56,10,56,12,
56,849,9,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,3,57,858,8,57,1,58,1,58,1,
58,1,58,5,58,864,8,58,10,58,12,58,867,9,58,3,58,869,8,58,1,58,1,58,1,59,
1,59,1,59,1,59,1,59,1,59,3,59,879,8,59,1,60,1,60,1,60,1,60,1,60,1,60,5,60,
887,8,60,10,60,12,60,890,9,60,3,60,892,8,60,1,60,3,60,895,8,60,1,60,3,60,
898,8,60,1,61,1,61,1,61,3,61,903,8,61,1,62,1,62,1,62,1,62,5,62,909,8,62,
10,62,12,62,912,9,62,3,62,914,8,62,1,62,3,62,917,8,62,1,62,1,62,1,63,1,63,
1,63,1,63,1,63,1,64,1,64,5,64,928,8,64,10,64,12,64,931,9,64,1,64,1,64,1,
65,5,65,936,8,65,10,65,12,65,939,9,65,1,65,1,65,3,65,943,8,65,1,66,1,66,
1,66,1,66,1,66,1,66,3,66,951,8,66,1,66,1,66,3,66,955,8,66,1,66,1,66,3,66,
959,8,66,1,66,1,66,3,66,963,8,66,1,66,1,66,3,66,967,8,66,3,66,969,8,66,1,
67,1,67,3,67,973,8,67,1,68,1,68,1,68,1,68,3,68,979,8,68,1,69,1,69,1,70,1,
70,1,70,1,71,5,71,987,8,71,10,71,12,71,990,9,71,1,71,3,71,993,8,71,1,71,
1,71,1,71,1,71,5,71,999,8,71,10,71,12,71,1002,9,71,1,71,1,71,1,72,1,72,5,
72,1008,8,72,10,72,12,72,1011,9,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
72,1,72,5,72,1022,8,72,10,72,12,72,1025,9,72,3,72,1027,8,72,1,72,1,72,1,
72,1,72,1,72,1,72,1,72,1,72,5,72,1037,8,72,10,72,12,72,1040,9,72,3,72,1042,
8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,5,72,1056,
8,72,10,72,12,72,1059,9,72,1,72,1,72,3,72,1063,8,72,1,73,1,73,1,74,1,74,
1,74,3,74,1070,8,74,1,74,1,74,1,74,3,74,1075,8,74,1,74,1,74,1,75,1,75,3,
75,1081,8,75,1,75,1,75,1,76,1,76,1,76,5,76,1088,8,76,10,76,12,76,1091,9,
76,1,76,1,76,1,77,5,77,1096,8,77,10,77,12,77,1099,9,77,1,77,1,77,5,77,1103,
8,77,10,77,12,77,1106,9,77,1,77,3,77,1109,8,77,1,77,1,77,1,78,1,78,1,78,
5,78,1116,8,78,10,78,12,78,1119,9,78,1,78,1,78,1,79,1,79,5,79,1125,8,79,
10,79,12,79,1128,9,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,3,80,1137,8,80,
1,81,5,81,1140,8,81,10,81,12,81,1143,9,81,1,81,1,81,1,81,1,81,1,81,1,81,
1,81,1,81,3,81,1153,8,81,1,82,1,82,1,83,1,83,1,84,5,84,1160,8,84,10,84,12,
84,1163,9,84,1,84,1,84,1,84,1,84,3,84,1169,8,84,1,85,1,85,1,85,1,85,1,85,
3,85,1176,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1187,8,
85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,4,85,1212,8,85,11,85,12,85,
1213,1,85,3,85,1217,8,85,1,85,3,85,1220,8,85,1,85,1,85,1,85,1,85,5,85,1226,
8,85,10,85,12,85,1229,9,85,1,85,3,85,1232,8,85,1,85,1,85,1,85,1,85,1,85,
1,85,5,85,1240,8,85,10,85,12,85,1243,9,85,1,85,5,85,1246,8,85,10,85,12,85,
1249,9,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1261,8,
85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1270,8,85,1,85,1,85,1,85,3,85,
1275,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1288,
8,85,1,85,1,85,1,85,1,85,3,85,1294,8,85,1,86,1,86,1,86,5,86,1299,8,86,10,
86,12,86,1302,9,86,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,5,87,1312,8,87,
10,87,12,87,1315,9,87,1,88,1,88,1,88,1,89,1,89,1,89,3,89,1323,8,89,1,89,
1,89,1,90,1,90,1,90,5,90,1330,8,90,10,90,12,90,1333,9,90,1,91,5,91,1336,
8,91,10,91,12,91,1339,9,91,1,91,1,91,1,91,1,91,1,91,3,91,1346,8,91,1,91,
1,91,1,91,1,91,3,91,1352,8,91,1,92,1,92,1,92,4,92,1357,8,92,11,92,12,92,
1358,1,92,4,92,1362,8,92,11,92,12,92,1363,1,93,1,93,1,93,1,93,1,93,1,93,
3,93,1372,8,93,1,93,3,93,1375,8,93,1,94,1,94,3,94,1379,8,94,1,94,1,94,3,
94,1383,8,94,1,94,1,94,3,94,1387,8,94,3,94,1389,8,94,1,95,1,95,3,95,1393,
8,95,1,96,5,96,1396,8,96,10,96,12,96,1399,9,96,1,96,1,96,3,96,1403,8,96,
1,96,1,96,1,96,1,96,1,97,1,97,1,97,5,97,1412,8,97,10,97,12,97,1415,9,97,
1,98,1,98,1,98,3,98,1420,8,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,99,3,
99,1430,8,99,1,99,1,99,3,99,1434,8,99,1,99,1,99,1,99,3,99,1439,8,99,1,99,
1,99,1,99,1,99,1,99,1,99,1,99,5,99,1448,8,99,10,99,12,99,1451,9,99,1,99,
1,99,1,99,5,99,1456,8,99,10,99,12,99,1459,9,99,1,99,1,99,1,99,1,99,1,99,
1,99,3,99,1467,8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,
99,1,99,1,99,1,99,3,99,1483,8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,
99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
1,99,1,99,1,99,1,99,1,99,1,99,3,99,1528,8,99,1,99,1,99,1,99,1,99,3,99,1534,
8,99,1,99,1,99,1,99,3,99,1539,8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,
99,1548,8,99,5,99,1550,8,99,10,99,12,99,1553,9,99,1,100,5,100,1556,8,100,
10,100,12,100,1559,9,100,1,100,1,100,5,100,1563,8,100,10,100,12,100,1566,
9,100,1,100,1,100,1,100,1,100,1,100,3,100,1573,8,100,1,100,1,100,3,100,1577,
8,100,1,101,1,101,1,101,5,101,1582,8,101,10,101,12,101,1585,9,101,1,102,
1,102,1,103,1,103,1,103,1,103,1,104,1,104,1,104,3,104,1596,8,104,1,104,1,
104,1,104,1,104,1,104,5,104,1603,8,104,10,104,12,104,1606,9,104,1,104,1,
104,1,104,1,104,3,104,1612,8,104,1,104,3,104,1615,8,104,1,105,1,105,3,105,
1619,8,105,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,
106,1,106,1,106,1,106,1,106,1,106,3,106,1637,8,106,3,106,1639,8,106,1,107,
1,107,1,107,1,107,1,107,1,107,5,107,1647,8,107,10,107,12,107,1650,9,107,
1,107,1,107,1,108,1,108,1,108,1,108,1,108,3,108,1659,8,108,1,108,1,108,1,
108,5,108,1664,8,108,10,108,12,108,1667,9,108,1,108,3,108,1670,8,108,3,108,
1672,8,108,1,108,1,108,1,108,1,108,1,108,3,108,1679,8,108,1,109,1,109,1,
109,1,110,1,110,1,111,1,111,5,111,1688,8,111,10,111,12,111,1691,9,111,3,
111,1693,8,111,1,112,1,112,1,113,3,113,1698,8,113,1,113,1,113,1,113,1,113,
1,113,1,113,3,113,1706,8,113,1,114,1,114,3,114,1710,8,114,1,114,1,114,1,
114,3,114,1715,8,114,5,114,1717,8,114,10,114,12,114,1720,9,114,1,114,3,114,
1723,8,114,1,115,1,115,3,115,1727,8,115,1,115,1,115,1,116,1,116,4,116,1733,
8,116,11,116,12,116,1734,1,116,1,116,1,116,1,116,1,116,4,116,1742,8,116,
11,116,12,116,1743,1,116,1,116,5,116,1748,8,116,10,116,12,116,1751,9,116,
3,116,1753,8,116,1,117,1,117,3,117,1757,8,117,1,118,1,118,1,118,1,119,1,
119,1,119,3,119,1765,8,119,1,120,1,120,1,120,3,120,1770,8,120,1,121,1,121,
1,121,1,121,1,122,1,122,1,122,5,122,1779,8,122,10,122,12,122,1782,9,122,
1,123,5,123,1785,8,123,10,123,12,123,1788,9,123,1,123,1,123,3,123,1792,8,
123,1,123,5,123,1795,8,123,10,123,12,123,1798,9,123,1,123,1,123,5,123,1802,
8,123,10,123,12,123,1805,9,123,1,124,1,124,1,125,1,125,1,125,1,125,5,125,
1813,8,125,10,125,12,125,1816,9,125,1,125,1,125,1,126,1,126,1,126,3,126,
1823,8,126,1,126,1,126,3,126,1827,8,126,3,126,1829,8,126,1,127,1,127,1,127,
1,127,1,127,3,127,1836,8,127,1,128,1,128,3,128,1840,8,128,1,128,1,128,1,
128,0,1,198,129,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,
202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,
238,240,242,244,246,248,250,252,254,256,0,15,2,0,18,18,50,50,1,0,68,71,1,
0,72,73,2,0,48,48,58,58,13,0,17,17,31,31,35,36,38,38,41,41,43,44,46,46,56,
56,58,58,60,61,64,64,66,67,129,129,11,0,17,17,31,31,35,36,41,41,44,44,46,
46,56,56,58,58,60,60,66,66,129,129,2,0,91,92,101,104,2,0,105,106,110,110,
1,0,103,104,2,0,89,90,96,97,2,0,95,95,98,98,2,0,88,88,111,121,1,0,101,102,
2,0,94,94,122,122,8,0,3,3,5,5,8,8,14,14,21,21,28,28,30,30,47,47,2049,0,279,
1,0,0,0,2,284,1,0,0,0,4,292,1,0,0,0,6,299,1,0,0,0,8,313,1,0,0,0,10,328,1,
0,0,0,12,340,1,0,0,0,14,344,1,0,0,0,16,346,1,0,0,0,18,365,1,0,0,0,20,379,
1,0,0,0,22,393,1,0,0,0,24,401,1,0,0,0,26,419,1,0,0,0,28,430,1,0,0,0,30,440,
1,0,0,0,32,447,1,0,0,0,34,462,1,0,0,0,36,471,1,0,0,0,38,492,1,0,0,0,40,504,
1,0,0,0,42,506,1,0,0,0,44,524,1,0,0,0,46,528,1,0,0,0,48,530,1,0,0,0,50,533,
1,0,0,0,52,536,1,0,0,0,54,547,1,0,0,0,56,553,1,0,0,0,58,565,1,0,0,0,60,575,
1,0,0,0,62,577,1,0,0,0,64,588,1,0,0,0,66,602,1,0,0,0,68,613,1,0,0,0,70,618,
1,0,0,0,72,627,1,0,0,0,74,646,1,0,0,0,76,654,1,0,0,0,78,659,1,0,0,0,80,669,
1,0,0,0,82,671,1,0,0,0,84,701,1,0,0,0,86,721,1,0,0,0,88,741,1,0,0,0,90,743,
1,0,0,0,92,751,1,0,0,0,94,767,1,0,0,0,96,778,1,0,0,0,98,789,1,0,0,0,100,
804,1,0,0,0,102,815,1,0,0,0,104,821,1,0,0,0,106,836,1,0,0,0,108,838,1,0,
0,0,110,840,1,0,0,0,112,847,1,0,0,0,114,853,1,0,0,0,116,859,1,0,0,0,118,
878,1,0,0,0,120,897,1,0,0,0,122,902,1,0,0,0,124,904,1,0,0,0,126,920,1,0,
0,0,128,925,1,0,0,0,130,942,1,0,0,0,132,968,1,0,0,0,134,972,1,0,0,0,136,
974,1,0,0,0,138,980,1,0,0,0,140,982,1,0,0,0,142,988,1,0,0,0,144,1062,1,0,
0,0,146,1064,1,0,0,0,148,1066,1,0,0,0,150,1078,1,0,0,0,152,1084,1,0,0,0,
154,1097,1,0,0,0,156,1112,1,0,0,0,158,1122,1,0,0,0,160,1136,1,0,0,0,162,
1141,1,0,0,0,164,1154,1,0,0,0,166,1156,1,0,0,0,168,1161,1,0,0,0,170,1293,
1,0,0,0,172,1295,1,0,0,0,174,1308,1,0,0,0,176,1316,1,0,0,0,178,1319,1,0,
0,0,180,1326,1,0,0,0,182,1351,1,0,0,0,184,1356,1,0,0,0,186,1374,1,0,0,0,
188,1388,1,0,0,0,190,1392,1,0,0,0,192,1397,1,0,0,0,194,1408,1,0,0,0,196,
1419,1,0,0,0,198,1466,1,0,0,0,200,1576,1,0,0,0,202,1578,1,0,0,0,204,1586,
1,0,0,0,206,1588,1,0,0,0,208,1614,1,0,0,0,210,1618,1,0,0,0,212,1638,1,0,
0,0,214,1640,1,0,0,0,216,1678,1,0,0,0,218,1680,1,0,0,0,220,1683,1,0,0,0,
222,1692,1,0,0,0,224,1694,1,0,0,0,226,1705,1,0,0,0,228,1722,1,0,0,0,230,
1724,1,0,0,0,232,1752,1,0,0,0,234,1754,1,0,0,0,236,1758,1,0,0,0,238,1764,
1,0,0,0,240,1769,1,0,0,0,242,1771,1,0,0,0,244,1775,1,0,0,0,246,1786,1,0,
0,0,248,1806,1,0,0,0,250,1808,1,0,0,0,252,1828,1,0,0,0,254,1835,1,0,0,0,
256,1837,1,0,0,0,258,260,3,4,2,0,259,258,1,0,0,0,259,260,1,0,0,0,260,265,
1,0,0,0,261,264,3,6,3,0,262,264,5,85,0,0,263,261,1,0,0,0,263,262,1,0,0,0,
264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,272,1,0,0,0,267,265,
1,0,0,0,268,271,3,8,4,0,269,271,5,85,0,0,270,268,1,0,0,0,270,269,1,0,0,0,
271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,272,
1,0,0,0,275,280,5,0,0,1,276,277,3,2,1,0,277,278,5,0,0,1,278,280,1,0,0,0,
279,259,1,0,0,0,279,276,1,0,0,0,280,1,1,0,0,0,281,283,3,6,3,0,282,281,1,
0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,
284,1,0,0,0,287,288,3,142,71,0,288,3,1,0,0,0,289,291,3,114,57,0,290,289,
1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,
294,292,1,0,0,0,295,296,5,37,0,0,296,297,3,104,52,0,297,298,5,85,0,0,298,
5,1,0,0,0,299,301,5,26,0,0,300,302,5,48,0,0,301,300,1,0,0,0,301,302,1,0,
0,0,302,303,1,0,0,0,303,306,3,104,52,0,304,305,5,87,0,0,305,307,5,105,0,
0,306,304,1,0,0,0,306,307,1,0,0,0,307,308,1,0,0,0,308,309,5,85,0,0,309,7,
1,0,0,0,310,312,3,12,6,0,311,310,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,
313,314,1,0,0,0,314,321,1,0,0,0,315,313,1,0,0,0,316,322,3,16,8,0,317,322,
3,24,12,0,318,322,3,32,16,0,319,322,3,126,63,0,320,322,3,148,74,0,321,316,
1,0,0,0,321,317,1,0,0,0,321,318,1,0,0,0,321,319,1,0,0,0,321,320,1,0,0,0,
322,9,1,0,0,0,323,329,3,12,6,0,324,329,5,32,0,0,325,329,5,52,0,0,326,329,
5,57,0,0,327,329,5,63,0,0,328,323,1,0,0,0,328,324,1,0,0,0,328,325,1,0,0,
0,328,326,1,0,0,0,328,327,1,0,0,0,329,11,1,0,0,0,330,341,3,114,57,0,331,
341,5,42,0,0,332,341,5,40,0,0,333,341,5,39,0,0,334,341,5,48,0,0,335,341,
5,1,0,0,336,341,5,19,0,0,337,341,5,49,0,0,338,341,5,46,0,0,339,341,5,34,
0,0,340,330,1,0,0,0,340,331,1,0,0,0,340,332,1,0,0,0,340,333,1,0,0,0,340,
334,1,0,0,0,340,335,1,0,0,0,340,336,1,0,0,0,340,337,1,0,0,0,340,338,1,0,
0,0,340,339,1,0,0,0,341,13,1,0,0,0,342,345,5,19,0,0,343,345,3,114,57,0,344,
342,1,0,0,0,344,343,1,0,0,0,345,15,1,0,0,0,346,347,5,9,0,0,347,349,3,164,
82,0,348,350,3,18,9,0,349,348,1,0,0,0,349,350,1,0,0,0,350,353,1,0,0,0,351,
352,5,18,0,0,352,354,3,246,123,0,353,351,1,0,0,0,353,354,1,0,0,0,354,357,
1,0,0,0,355,356,5,25,0,0,356,358,3,244,122,0,357,355,1,0,0,0,357,358,1,0,
0,0,358,361,1,0,0,0,359,360,5,38,0,0,360,362,3,244,122,0,361,359,1,0,0,0,
361,362,1,0,0,0,362,363,1,0,0,0,363,364,3,34,17,0,364,17,1,0,0,0,365,366,
5,90,0,0,366,371,3,20,10,0,367,368,5,86,0,0,368,370,3,20,10,0,369,367,1,
0,0,0,370,373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,
371,1,0,0,0,374,375,5,89,0,0,375,19,1,0,0,0,376,378,3,114,57,0,377,376,1,
0,0,0,378,381,1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,382,1,0,0,0,381,
379,1,0,0,0,382,391,3,164,82,0,383,387,5,18,0,0,384,386,3,114,57,0,385,384,
1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,388,1,0,0,0,388,390,1,0,0,0,
389,387,1,0,0,0,390,392,3,22,11,0,391,383,1,0,0,0,391,392,1,0,0,0,392,21,
1,0,0,0,393,398,3,246,123,0,394,395,5,107,0,0,395,397,3,246,123,0,396,394,
1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,23,1,0,0,0,400,
398,1,0,0,0,401,402,5,16,0,0,402,405,3,164,82,0,403,404,5,25,0,0,404,406,
3,244,122,0,405,403,1,0,0,0,405,406,1,0,0,0,406,407,1,0,0,0,407,409,5,81,
0,0,408,410,3,26,13,0,409,408,1,0,0,0,409,410,1,0,0,0,410,412,1,0,0,0,411,
413,5,86,0,0,412,411,1,0,0,0,412,413,1,0,0,0,413,415,1,0,0,0,414,416,3,30,
15,0,415,414,1,0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,418,5,82,0,0,418,
25,1,0,0,0,419,424,3,28,14,0,420,421,5,86,0,0,421,423,3,28,14,0,422,420,
1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,27,1,0,0,0,426,
424,1,0,0,0,427,429,3,114,57,0,428,427,1,0,0,0,429,432,1,0,0,0,430,428,1,
0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,430,1,0,0,0,433,435,3,164,82,0,
434,436,3,256,128,0,435,434,1,0,0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,
439,3,34,17,0,438,437,1,0,0,0,438,439,1,0,0,0,439,29,1,0,0,0,440,444,5,85,
0,0,441,443,3,38,19,0,442,441,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,
445,1,0,0,0,445,31,1,0,0,0,446,444,1,0,0,0,447,448,5,29,0,0,448,450,3,164,
82,0,449,451,3,18,9,0,450,449,1,0,0,0,450,451,1,0,0,0,451,454,1,0,0,0,452,
453,5,18,0,0,453,455,3,244,122,0,454,452,1,0,0,0,454,455,1,0,0,0,455,458,
1,0,0,0,456,457,5,38,0,0,457,459,3,244,122,0,458,456,1,0,0,0,458,459,1,0,
0,0,459,460,1,0,0,0,460,461,3,36,18,0,461,33,1,0,0,0,462,466,5,81,0,0,463,
465,3,38,19,0,464,463,1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,466,467,1,
0,0,0,467,469,1,0,0,0,468,466,1,0,0,0,469,470,5,82,0,0,470,35,1,0,0,0,471,
475,5,81,0,0,472,474,3,58,29,0,473,472,1,0,0,0,474,477,1,0,0,0,475,473,1,
0,0,0,475,476,1,0,0,0,476,478,1,0,0,0,477,475,1,0,0,0,478,479,5,82,0,0,479,
37,1,0,0,0,480,493,5,85,0,0,481,483,5,48,0,0,482,481,1,0,0,0,482,483,1,0,
0,0,483,484,1,0,0,0,484,493,3,158,79,0,485,487,3,10,5,0,486,485,1,0,0,0,
487,490,1,0,0,0,488,486,1,0,0,0,488,489,1,0,0,0,489,491,1,0,0,0,490,488,
1,0,0,0,491,493,3,40,20,0,492,480,1,0,0,0,492,482,1,0,0,0,492,488,1,0,0,
0,493,39,1,0,0,0,494,505,3,148,74,0,495,505,3,42,21,0,496,505,3,48,24,0,
497,505,3,56,28,0,498,505,3,52,26,0,499,505,3,50,25,0,500,505,3,32,16,0,
501,505,3,126,63,0,502,505,3,16,8,0,503,505,3,24,12,0,504,494,1,0,0,0,504,
495,1,0,0,0,504,496,1,0,0,0,504,497,1,0,0,0,504,498,1,0,0,0,504,499,1,0,
0,0,504,500,1,0,0,0,504,501,1,0,0,0,504,502,1,0,0,0,504,503,1,0,0,0,505,
41,1,0,0,0,506,507,3,46,23,0,507,508,3,164,82,0,508,513,3,92,46,0,509,510,
5,83,0,0,510,512,5,84,0,0,511,509,1,0,0,0,512,515,1,0,0,0,513,511,1,0,0,
0,513,514,1,0,0,0,514,518,1,0,0,0,515,513,1,0,0,0,516,517,5,55,0,0,517,519,
3,90,45,0,518,516,1,0,0,0,518,519,1,0,0,0,519,520,1,0,0,0,520,521,3,44,22,
0,521,43,1,0,0,0,522,525,3,158,79,0,523,525,5,85,0,0,524,522,1,0,0,0,524,
523,1,0,0,0,525,45,1,0,0,0,526,529,3,246,123,0,527,529,5,62,0,0,528,526,
1,0,0,0,528,527,1,0,0,0,529,47,1,0,0,0,530,531,3,18,9,0,531,532,3,42,21,
0,532,49,1,0,0,0,533,534,3,18,9,0,534,535,3,52,26,0,535,51,1,0,0,0,536,537,
3,164,82,0,537,540,3,92,46,0,538,539,5,55,0,0,539,541,3,90,45,0,540,538,
1,0,0,0,540,541,1,0,0,0,541,542,1,0,0,0,542,543,3,158,79,0,543,53,1,0,0,
0,544,546,3,10,5,0,545,544,1,0,0,0,546,549,1,0,0,0,547,545,1,0,0,0,547,548,
1,0,0,0,548,550,1,0,0,0,549,547,1,0,0,0,550,551,3,164,82,0,551,552,3,158,
79,0,552,55,1,0,0,0,553,554,3,246,123,0,554,555,3,74,37,0,555,556,5,85,0,
0,556,57,1,0,0,0,557,559,3,10,5,0,558,557,1,0,0,0,559,562,1,0,0,0,560,558,
1,0,0,0,560,561,1,0,0,0,561,563,1,0,0,0,562,560,1,0,0,0,563,566,3,60,30,
0,564,566,5,85,0,0,565,560,1,0,0,0,565,564,1,0,0,0,566,59,1,0,0,0,567,576,
3,148,74,0,568,576,3,62,31,0,569,576,3,66,33,0,570,576,3,70,35,0,571,576,
3,32,16,0,572,576,3,126,63,0,573,576,3,16,8,0,574,576,3,24,12,0,575,567,
1,0,0,0,575,568,1,0,0,0,575,569,1,0,0,0,575,570,1,0,0,0,575,571,1,0,0,0,
575,572,1,0,0,0,575,573,1,0,0,0,575,574,1,0,0,0,576,61,1,0,0,0,577,578,3,
246,123,0,578,583,3,64,32,0,579,580,5,86,0,0,580,582,3,64,32,0,581,579,1,
0,0,0,582,585,1,0,0,0,583,581,1,0,0,0,583,584,1,0,0,0,584,586,1,0,0,0,585,
583,1,0,0,0,586,587,5,85,0,0,587,63,1,0,0,0,588,593,3,164,82,0,589,590,5,
83,0,0,590,592,5,84,0,0,591,589,1,0,0,0,592,595,1,0,0,0,593,591,1,0,0,0,
593,594,1,0,0,0,594,596,1,0,0,0,595,593,1,0,0,0,596,597,5,88,0,0,597,598,
3,80,40,0,598,65,1,0,0,0,599,601,3,68,34,0,600,599,1,0,0,0,601,604,1,0,0,
0,602,600,1,0,0,0,602,603,1,0,0,0,603,605,1,0,0,0,604,602,1,0,0,0,605,606,
3,72,36,0,606,67,1,0,0,0,607,614,3,114,57,0,608,614,5,42,0,0,609,614,5,1,
0,0,610,614,5,12,0,0,611,614,5,48,0,0,612,614,5,49,0,0,613,607,1,0,0,0,613,
608,1,0,0,0,613,609,1,0,0,0,613,610,1,0,0,0,613,611,1,0,0,0,613,612,1,0,
0,0,614,69,1,0,0,0,615,617,3,68,34,0,616,615,1,0,0,0,617,620,1,0,0,0,618,
616,1,0,0,0,618,619,1,0,0,0,619,621,1,0,0,0,620,618,1,0,0,0,621,622,3,18,
9,0,622,623,3,72,36,0,623,71,1,0,0,0,624,626,3,114,57,0,625,624,1,0,0,0,
626,629,1,0,0,0,627,625,1,0,0,0,627,628,1,0,0,0,628,630,1,0,0,0,629,627,
1,0,0,0,630,631,3,46,23,0,631,632,3,164,82,0,632,637,3,92,46,0,633,634,5,
83,0,0,634,636,5,84,0,0,635,633,1,0,0,0,636,639,1,0,0,0,637,635,1,0,0,0,
637,638,1,0,0,0,638,642,1,0,0,0,639,637,1,0,0,0,640,641,5,55,0,0,641,643,
3,90,45,0,642,640,1,0,0,0,642,643,1,0,0,0,643,644,1,0,0,0,644,645,3,44,22,
0,645,73,1,0,0,0,646,651,3,76,38,0,647,648,5,86,0,0,648,650,3,76,38,0,649,
647,1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,75,1,0,0,
0,653,651,1,0,0,0,654,657,3,78,39,0,655,656,5,88,0,0,656,658,3,80,40,0,657,
655,1,0,0,0,657,658,1,0,0,0,658,77,1,0,0,0,659,664,3,164,82,0,660,661,5,
83,0,0,661,663,5,84,0,0,662,660,1,0,0,0,663,666,1,0,0,0,664,662,1,0,0,0,
664,665,1,0,0,0,665,79,1,0,0,0,666,664,1,0,0,0,667,670,3,82,41,0,668,670,
3,198,99,0,669,667,1,0,0,0,669,668,1,0,0,0,670,81,1,0,0,0,671,683,5,81,0,
0,672,677,3,80,40,0,673,674,5,86,0,0,674,676,3,80,40,0,675,673,1,0,0,0,676,
679,1,0,0,0,677,675,1,0,0,0,677,678,1,0,0,0,678,681,1,0,0,0,679,677,1,0,
0,0,680,682,5,86,0,0,681,680,1,0,0,0,681,682,1,0,0,0,682,684,1,0,0,0,683,
672,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,686,5,82,0,0,686,83,1,0,
0,0,687,688,3,86,43,0,688,692,5,87,0,0,689,691,3,114,57,0,690,689,1,0,0,
0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,1,0,0,0,693,696,1,0,0,0,694,692,
1,0,0,0,695,687,1,0,0,0,695,696,1,0,0,0,696,697,1,0,0,0,697,699,3,166,83,
0,698,700,3,250,125,0,699,698,1,0,0,0,699,700,1,0,0,0,700,702,1,0,0,0,701,
695,1,0,0,0,702,703,1,0,0,0,703,701,1,0,0,0,703,704,1,0,0,0,704,718,1,0,
0,0,705,709,5,87,0,0,706,708,3,114,57,0,707,706,1,0,0,0,708,711,1,0,0,0,
709,707,1,0,0,0,709,710,1,0,0,0,710,712,1,0,0,0,711,709,1,0,0,0,712,714,
3,166,83,0,713,715,3,250,125,0,714,713,1,0,0,0,714,715,1,0,0,0,715,717,1,
0,0,0,716,705,1,0,0,0,717,720,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,
85,1,0,0,0,720,718,1,0,0,0,721,726,3,164,82,0,722,723,5,87,0,0,723,725,3,
164,82,0,724,722,1,0,0,0,725,728,1,0,0,0,726,724,1,0,0,0,726,727,1,0,0,0,
727,87,1,0,0,0,728,726,1,0,0,0,729,742,3,246,123,0,730,732,3,114,57,0,731,
730,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,734,736,1,0,
0,0,735,733,1,0,0,0,736,739,5,93,0,0,737,738,7,0,0,0,738,740,3,246,123,0,
739,737,1,0,0,0,739,740,1,0,0,0,740,742,1,0,0,0,741,729,1,0,0,0,741,733,
1,0,0,0,742,89,1,0,0,0,743,748,3,104,52,0,744,745,5,86,0,0,745,747,3,104,
52,0,746,744,1,0,0,0,747,750,1,0,0,0,748,746,1,0,0,0,748,749,1,0,0,0,749,
91,1,0,0,0,750,748,1,0,0,0,751,763,5,79,0,0,752,755,3,94,47,0,753,755,3,
98,49,0,754,752,1,0,0,0,754,753,1,0,0,0,755,760,1,0,0,0,756,757,5,86,0,0,
757,759,3,96,48,0,758,756,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,760,761,
1,0,0,0,761,764,1,0,0,0,762,760,1,0,0,0,763,754,1,0,0,0,763,764,1,0,0,0,
764,765,1,0,0,0,765,766,5,80,0,0,766,93,1,0,0,0,767,773,3,246,123,0,768,
769,3,164,82,0,769,770,5,87,0,0,770,772,1,0,0,0,771,768,1,0,0,0,772,775,
1,0,0,0,773,771,1,0,0,0,773,774,1,0,0,0,774,776,1,0,0,0,775,773,1,0,0,0,
776,777,5,53,0,0,777,95,1,0,0,0,778,783,3,98,49,0,779,780,5,86,0,0,780,782,
3,98,49,0,781,779,1,0,0,0,782,785,1,0,0,0,783,781,1,0,0,0,783,784,1,0,0,
0,784,97,1,0,0,0,785,783,1,0,0,0,786,788,3,14,7,0,787,786,1,0,0,0,788,791,
1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,789,1,0,0,0,
792,800,3,246,123,0,793,795,3,114,57,0,794,793,1,0,0,0,795,798,1,0,0,0,796,
794,1,0,0,0,796,797,1,0,0,0,797,799,1,0,0,0,798,796,1,0,0,0,799,801,5,125,
0,0,800,796,1,0,0,0,800,801,1,0,0,0,801,802,1,0,0,0,802,803,3,78,39,0,803,
99,1,0,0,0,804,809,3,102,51,0,805,806,5,86,0,0,806,808,3,102,51,0,807,805,
1,0,0,0,808,811,1,0,0,0,809,807,1,0,0,0,809,810,1,0,0,0,810,101,1,0,0,0,
811,809,1,0,0,0,812,814,3,14,7,0,813,812,1,0,0,0,814,817,1,0,0,0,815,813,
1,0,0,0,815,816,1,0,0,0,816,818,1,0,0,0,817,815,1,0,0,0,818,819,5,61,0,0,
819,820,3,164,82,0,820,103,1,0,0,0,821,826,3,164,82,0,822,823,5,87,0,0,823,
825,3,164,82,0,824,822,1,0,0,0,825,828,1,0,0,0,826,824,1,0,0,0,826,827,1,
0,0,0,827,105,1,0,0,0,828,826,1,0,0,0,829,837,3,108,54,0,830,837,3,110,55,
0,831,837,5,75,0,0,832,837,5,76,0,0,833,837,5,74,0,0,834,837,5,78,0,0,835,
837,5,77,0,0,836,829,1,0,0,0,836,830,1,0,0,0,836,831,1,0,0,0,836,832,1,0,
0,0,836,833,1,0,0,0,836,834,1,0,0,0,836,835,1,0,0,0,837,107,1,0,0,0,838,
839,7,1,0,0,839,109,1,0,0,0,840,841,7,2,0,0,841,111,1,0,0,0,842,843,3,164,
82,0,843,844,5,87,0,0,844,846,1,0,0,0,845,842,1,0,0,0,846,849,1,0,0,0,847,
845,1,0,0,0,847,848,1,0,0,0,848,850,1,0,0,0,849,847,1,0,0,0,850,851,5,124,
0,0,851,852,3,164,82,0,852,113,1,0,0,0,853,854,5,124,0,0,854,855,3,104,52,
0,855,857,1,0,0,0,856,858,3,116,58,0,857,856,1,0,0,0,857,858,1,0,0,0,858,
115,1,0,0,0,859,868,5,79,0,0,860,865,3,118,59,0,861,862,5,86,0,0,862,864,
3,118,59,0,863,861,1,0,0,0,864,867,1,0,0,0,865,863,1,0,0,0,865,866,1,0,0,
0,866,869,1,0,0,0,867,865,1,0,0,0,868,860,1,0,0,0,868,869,1,0,0,0,869,870,
1,0,0,0,870,871,5,80,0,0,871,117,1,0,0,0,872,873,4,59,0,0,873,879,3,120,
60,0,874,875,3,164,82,0,875,876,5,88,0,0,876,877,3,120,60,0,877,879,1,0,
0,0,878,872,1,0,0,0,878,874,1,0,0,0,879,119,1,0,0,0,880,898,3,198,99,0,881,
898,3,114,57,0,882,891,5,81,0,0,883,888,3,120,60,0,884,885,5,86,0,0,885,
887,3,120,60,0,886,884,1,0,0,0,887,890,1,0,0,0,888,886,1,0,0,0,888,889,1,
0,0,0,889,892,1,0,0,0,890,888,1,0,0,0,891,883,1,0,0,0,891,892,1,0,0,0,892,
894,1,0,0,0,893,895,5,86,0,0,894,893,1,0,0,0,894,895,1,0,0,0,895,896,1,0,
0,0,896,898,5,82,0,0,897,880,1,0,0,0,897,881,1,0,0,0,897,882,1,0,0,0,898,
121,1,0,0,0,899,903,3,198,99,0,900,903,3,114,57,0,901,903,3,124,62,0,902,
899,1,0,0,0,902,900,1,0,0,0,902,901,1,0,0,0,903,123,1,0,0,0,904,913,5,81,
0,0,905,910,3,122,61,0,906,907,5,86,0,0,907,909,3,122,61,0,908,906,1,0,0,
0,909,912,1,0,0,0,910,908,1,0,0,0,910,911,1,0,0,0,911,914,1,0,0,0,912,910,
1,0,0,0,913,905,1,0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,917,5,86,0,0,
916,915,1,0,0,0,916,917,1,0,0,0,917,918,1,0,0,0,918,919,5,82,0,0,919,125,
1,0,0,0,920,921,5,124,0,0,921,922,5,29,0,0,922,923,3,164,82,0,923,924,3,
128,64,0,924,127,1,0,0,0,925,929,5,81,0,0,926,928,3,130,65,0,927,926,1,0,
0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,932,1,0,0,0,931,
929,1,0,0,0,932,933,5,82,0,0,933,129,1,0,0,0,934,936,3,10,5,0,935,934,1,
0,0,0,936,939,1,0,0,0,937,935,1,0,0,0,937,938,1,0,0,0,938,940,1,0,0,0,939,
937,1,0,0,0,940,943,3,132,66,0,941,943,5,85,0,0,942,937,1,0,0,0,942,941,
1,0,0,0,943,131,1,0,0,0,944,945,3,246,123,0,945,946,3,134,67,0,946,947,5,
85,0,0,947,969,1,0,0,0,948,950,3,16,8,0,949,951,5,85,0,0,950,949,1,0,0,0,
950,951,1,0,0,0,951,969,1,0,0,0,952,954,3,32,16,0,953,955,5,85,0,0,954,953,
1,0,0,0,954,955,1,0,0,0,955,969,1,0,0,0,956,958,3,24,12,0,957,959,5,85,0,
0,958,957,1,0,0,0,958,959,1,0,0,0,959,969,1,0,0,0,960,962,3,126,63,0,961,
963,5,85,0,0,962,961,1,0,0,0,962,963,1,0,0,0,963,969,1,0,0,0,964,966,3,148,
74,0,965,967,5,85,0,0,966,965,1,0,0,0,966,967,1,0,0,0,967,969,1,0,0,0,968,
944,1,0,0,0,968,948,1,0,0,0,968,952,1,0,0,0,968,956,1,0,0,0,968,960,1,0,
0,0,968,964,1,0,0,0,969,133,1,0,0,0,970,973,3,136,68,0,971,973,3,138,69,
0,972,970,1,0,0,0,972,971,1,0,0,0,973,135,1,0,0,0,974,975,3,164,82,0,975,
976,5,79,0,0,976,978,5,80,0,0,977,979,3,140,70,0,978,977,1,0,0,0,978,979,
1,0,0,0,979,137,1,0,0,0,980,981,3,74,37,0,981,139,1,0,0,0,982,983,5,12,0,
0,983,984,3,122,61,0,984,141,1,0,0,0,985,987,3,114,57,0,986,985,1,0,0,0,
987,990,1,0,0,0,988,986,1,0,0,0,988,989,1,0,0,0,989,992,1,0,0,0,990,988,
1,0,0,0,991,993,5,35,0,0,992,991,1,0,0,0,992,993,1,0,0,0,993,994,1,0,0,0,
994,995,5,31,0,0,995,996,3,104,52,0,996,1000,5,81,0,0,997,999,3,144,72,0,
998,997,1,0,0,0,999,1002,1,0,0,0,1000,998,1,0,0,0,1000,1001,1,0,0,0,1001,
1003,1,0,0,0,1002,1000,1,0,0,0,1003,1004,5,82,0,0,1004,143,1,0,0,0,1005,
1009,5,44,0,0,1006,1008,3,146,73,0,1007,1006,1,0,0,0,1008,1011,1,0,0,0,1009,
1007,1,0,0,0,1009,1010,1,0,0,0,1010,1012,1,0,0,0,1011,1009,1,0,0,0,1012,
1013,3,104,52,0,1013,1014,5,85,0,0,1014,1063,1,0,0,0,1015,1016,5,17,0,0,
1016,1026,3,104,52,0,1017,1018,5,56,0,0,1018,1023,3,104,52,0,1019,1020,5,
86,0,0,1020,1022,3,104,52,0,1021,1019,1,0,0,0,1022,1025,1,0,0,0,1023,1021,
1,0,0,0,1023,1024,1,0,0,0,1024,1027,1,0,0,0,1025,1023,1,0,0,0,1026,1017,
1,0,0,0,1026,1027,1,0,0,0,1027,1028,1,0,0,0,1028,1029,5,85,0,0,1029,1063,
1,0,0,0,1030,1031,5,36,0,0,1031,1041,3,104,52,0,1032,1033,5,56,0,0,1033,
1038,3,104,52,0,1034,1035,5,86,0,0,1035,1037,3,104,52,0,1036,1034,1,0,0,
0,1037,1040,1,0,0,0,1038,1036,1,0,0,0,1038,1039,1,0,0,0,1039,1042,1,0,0,
0,1040,1038,1,0,0,0,1041,1032,1,0,0,0,1041,1042,1,0,0,0,1042,1043,1,0,0,
0,1043,1044,5,85,0,0,1044,1063,1,0,0,0,1045,1046,5,60,0,0,1046,1047,3,104,
52,0,1047,1048,5,85,0,0,1048,1063,1,0,0,0,1049,1050,5,41,0,0,1050,1051,3,
104,52,0,1051,1052,5,66,0,0,1052,1057,3,104,52,0,1053,1054,5,86,0,0,1054,
1056,3,104,52,0,1055,1053,1,0,0,0,1056,1059,1,0,0,0,1057,1055,1,0,0,0,1057,
1058,1,0,0,0,1058,1060,1,0,0,0,1059,1057,1,0,0,0,1060,1061,5,85,0,0,1061,
1063,1,0,0,0,1062,1005,1,0,0,0,1062,1015,1,0,0,0,1062,1030,1,0,0,0,1062,
1045,1,0,0,0,1062,1049,1,0,0,0,1063,145,1,0,0,0,1064,1065,7,3,0,0,1065,147,
1,0,0,0,1066,1067,5,43,0,0,1067,1069,3,164,82,0,1068,1070,3,18,9,0,1069,
1068,1,0,0,0,1069,1070,1,0,0,0,1070,1071,1,0,0,0,1071,1074,3,150,75,0,1072,
1073,5,25,0,0,1073,1075,3,244,122,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,
1075,1076,1,0,0,0,1076,1077,3,156,78,0,1077,149,1,0,0,0,1078,1080,5,79,0,
0,1079,1081,3,152,76,0,1080,1079,1,0,0,0,1080,1081,1,0,0,0,1081,1082,1,0,
0,0,1082,1083,5,80,0,0,1083,151,1,0,0,0,1084,1089,3,154,77,0,1085,1086,5,
86,0,0,1086,1088,3,154,77,0,1087,1085,1,0,0,0,1088,1091,1,0,0,0,1089,1087,
1,0,0,0,1089,1090,1,0,0,0,1090,1092,1,0,0,0,1091,1089,1,0,0,0,1092,1093,
4,76,1,0,1093,153,1,0,0,0,1094,1096,3,114,57,0,1095,1094,1,0,0,0,1096,1099,
1,0,0,0,1097,1095,1,0,0,0,1097,1098,1,0,0,0,1098,1100,1,0,0,0,1099,1097,
1,0,0,0,1100,1108,3,246,123,0,1101,1103,3,114,57,0,1102,1101,1,0,0,0,1103,
1106,1,0,0,0,1104,1102,1,0,0,0,1104,1105,1,0,0,0,1105,1107,1,0,0,0,1106,
1104,1,0,0,0,1107,1109,5,125,0,0,1108,1104,1,0,0,0,1108,1109,1,0,0,0,1109,
1110,1,0,0,0,1110,1111,3,164,82,0,1111,155,1,0,0,0,1112,1117,5,81,0,0,1113,
1116,3,38,19,0,1114,1116,3,54,27,0,1115,1113,1,0,0,0,1115,1114,1,0,0,0,1116,
1119,1,0,0,0,1117,1115,1,0,0,0,1117,1118,1,0,0,0,1118,1120,1,0,0,0,1119,
1117,1,0,0,0,1120,1121,5,82,0,0,1121,157,1,0,0,0,1122,1126,5,81,0,0,1123,
1125,3,160,80,0,1124,1123,1,0,0,0,1125,1128,1,0,0,0,1126,1124,1,0,0,0,1126,
1127,1,0,0,0,1127,1129,1,0,0,0,1128,1126,1,0,0,0,1129,1130,5,82,0,0,1130,
159,1,0,0,0,1131,1132,3,162,81,0,1132,1133,5,85,0,0,1133,1137,1,0,0,0,1134,
1137,3,168,84,0,1135,1137,3,170,85,0,1136,1131,1,0,0,0,1136,1134,1,0,0,0,
1136,1135,1,0,0,0,1137,161,1,0,0,0,1138,1140,3,14,7,0,1139,1138,1,0,0,0,
1140,1143,1,0,0,0,1141,1139,1,0,0,0,1141,1142,1,0,0,0,1142,1152,1,0,0,0,
1143,1141,1,0,0,0,1144,1145,5,61,0,0,1145,1146,3,164,82,0,1146,1147,5,88,
0,0,1147,1148,3,198,99,0,1148,1153,1,0,0,0,1149,1150,3,246,123,0,1150,1151,
3,74,37,0,1151,1153,1,0,0,0,1152,1144,1,0,0,0,1152,1149,1,0,0,0,1153,163,
1,0,0,0,1154,1155,7,4,0,0,1155,165,1,0,0,0,1156,1157,7,5,0,0,1157,167,1,
0,0,0,1158,1160,3,12,6,0,1159,1158,1,0,0,0,1160,1163,1,0,0,0,1161,1159,1,
0,0,0,1161,1162,1,0,0,0,1162,1168,1,0,0,0,1163,1161,1,0,0,0,1164,1169,3,
16,8,0,1165,1169,3,32,16,0,1166,1169,3,148,74,0,1167,1169,3,24,12,0,1168,
1164,1,0,0,0,1168,1165,1,0,0,0,1168,1166,1,0,0,0,1168,1167,1,0,0,0,1169,
169,1,0,0,0,1170,1294,3,158,79,0,1171,1172,5,2,0,0,1172,1175,3,198,99,0,
1173,1174,5,94,0,0,1174,1176,3,198,99,0,1175,1173,1,0,0,0,1175,1176,1,0,
0,0,1176,1177,1,0,0,0,1177,1178,5,85,0,0,1178,1294,1,0,0,0,1179,1180,5,24,
0,0,1180,1181,5,79,0,0,1181,1182,3,198,99,0,1182,1183,5,80,0,0,1183,1186,
3,170,85,0,1184,1185,5,15,0,0,1185,1187,3,170,85,0,1186,1184,1,0,0,0,1186,
1187,1,0,0,0,1187,1294,1,0,0,0,1188,1189,5,22,0,0,1189,1190,5,79,0,0,1190,
1191,3,188,94,0,1191,1192,5,80,0,0,1192,1193,3,170,85,0,1193,1294,1,0,0,
0,1194,1195,5,65,0,0,1195,1196,5,79,0,0,1196,1197,3,198,99,0,1197,1198,5,
80,0,0,1198,1199,3,170,85,0,1199,1294,1,0,0,0,1200,1201,5,13,0,0,1201,1202,
3,170,85,0,1202,1203,5,65,0,0,1203,1204,5,79,0,0,1204,1205,3,198,99,0,1205,
1206,5,80,0,0,1206,1207,5,85,0,0,1207,1294,1,0,0,0,1208,1209,5,59,0,0,1209,
1219,3,158,79,0,1210,1212,3,172,86,0,1211,1210,1,0,0,0,1212,1213,1,0,0,0,
1213,1211,1,0,0,0,1213,1214,1,0,0,0,1214,1216,1,0,0,0,1215,1217,3,176,88,
0,1216,1215,1,0,0,0,1216,1217,1,0,0,0,1217,1220,1,0,0,0,1218,1220,3,176,
88,0,1219,1211,1,0,0,0,1219,1218,1,0,0,0,1220,1294,1,0,0,0,1221,1222,5,59,
0,0,1222,1223,3,178,89,0,1223,1227,3,158,79,0,1224,1226,3,172,86,0,1225,
1224,1,0,0,0,1226,1229,1,0,0,0,1227,1225,1,0,0,0,1227,1228,1,0,0,0,1228,
1231,1,0,0,0,1229,1227,1,0,0,0,1230,1232,3,176,88,0,1231,1230,1,0,0,0,1231,
1232,1,0,0,0,1232,1294,1,0,0,0,1233,1234,5,51,0,0,1234,1235,5,79,0,0,1235,
1236,3,198,99,0,1236,1237,5,80,0,0,1237,1241,5,81,0,0,1238,1240,3,184,92,
0,1239,1238,1,0,0,0,1240,1243,1,0,0,0,1241,1239,1,0,0,0,1241,1242,1,0,0,
0,1242,1247,1,0,0,0,1243,1241,1,0,0,0,1244,1246,3,186,93,0,1245,1244,1,0,
0,0,1246,1249,1,0,0,0,1247,1245,1,0,0,0,1247,1248,1,0,0,0,1248,1250,1,0,
0,0,1249,1247,1,0,0,0,1250,1251,5,82,0,0,1251,1294,1,0,0,0,1252,1253,5,52,
0,0,1253,1254,5,79,0,0,1254,1255,3,198,99,0,1255,1256,5,80,0,0,1256,1257,
3,158,79,0,1257,1294,1,0,0,0,1258,1260,5,45,0,0,1259,1261,3,198,99,0,1260,
1259,1,0,0,0,1260,1261,1,0,0,0,1261,1262,1,0,0,0,1262,1294,5,85,0,0,1263,
1264,5,54,0,0,1264,1265,3,198,99,0,1265,1266,5,85,0,0,1266,1294,1,0,0,0,
1267,1269,5,4,0,0,1268,1270,3,164,82,0,1269,1268,1,0,0,0,1269,1270,1,0,0,
0,1270,1271,1,0,0,0,1271,1294,5,85,0,0,1272,1274,5,11,0,0,1273,1275,3,164,
82,0,1274,1273,1,0,0,0,1274,1275,1,0,0,0,1275,1276,1,0,0,0,1276,1294,5,85,
0,0,1277,1278,5,67,0,0,1278,1279,3,198,99,0,1279,1280,5,85,0,0,1280,1294,
1,0,0,0,1281,1294,5,85,0,0,1282,1283,3,198,99,0,1283,1284,5,85,0,0,1284,
1294,1,0,0,0,1285,1287,3,214,107,0,1286,1288,5,85,0,0,1287,1286,1,0,0,0,
1287,1288,1,0,0,0,1288,1294,1,0,0,0,1289,1290,3,164,82,0,1290,1291,5,94,
0,0,1291,1292,3,170,85,0,1292,1294,1,0,0,0,1293,1170,1,0,0,0,1293,1171,1,
0,0,0,1293,1179,1,0,0,0,1293,1188,1,0,0,0,1293,1194,1,0,0,0,1293,1200,1,
0,0,0,1293,1208,1,0,0,0,1293,1221,1,0,0,0,1293,1233,1,0,0,0,1293,1252,1,
0,0,0,1293,1258,1,0,0,0,1293,1263,1,0,0,0,1293,1267,1,0,0,0,1293,1272,1,
0,0,0,1293,1277,1,0,0,0,1293,1281,1,0,0,0,1293,1282,1,0,0,0,1293,1285,1,
0,0,0,1293,1289,1,0,0,0,1294,171,1,0,0,0,1295,1296,5,7,0,0,1296,1300,5,79,
0,0,1297,1299,3,14,7,0,1298,1297,1,0,0,0,1299,1302,1,0,0,0,1300,1298,1,0,
0,0,1300,1301,1,0,0,0,1301,1303,1,0,0,0,1302,1300,1,0,0,0,1303,1304,3,174,
87,0,1304,1305,3,164,82,0,1305,1306,5,80,0,0,1306,1307,3,158,79,0,1307,173,
1,0,0,0,1308,1313,3,104,52,0,1309,1310,5,108,0,0,1310,1312,3,104,52,0,1311,
1309,1,0,0,0,1312,1315,1,0,0,0,1313,1311,1,0,0,0,1313,1314,1,0,0,0,1314,
175,1,0,0,0,1315,1313,1,0,0,0,1316,1317,5,20,0,0,1317,1318,3,158,79,0,1318,
177,1,0,0,0,1319,1320,5,79,0,0,1320,1322,3,180,90,0,1321,1323,5,85,0,0,1322,
1321,1,0,0,0,1322,1323,1,0,0,0,1323,1324,1,0,0,0,1324,1325,5,80,0,0,1325,
179,1,0,0,0,1326,1331,3,182,91,0,1327,1328,5,85,0,0,1328,1330,3,182,91,0,
1329,1327,1,0,0,0,1330,1333,1,0,0,0,1331,1329,1,0,0,0,1331,1332,1,0,0,0,
1332,181,1,0,0,0,1333,1331,1,0,0,0,1334,1336,3,14,7,0,1335,1334,1,0,0,0,
1336,1339,1,0,0,0,1337,1335,1,0,0,0,1337,1338,1,0,0,0,1338,1345,1,0,0,0,
1339,1337,1,0,0,0,1340,1341,3,224,112,0,1341,1342,3,78,39,0,1342,1346,1,
0,0,0,1343,1344,5,61,0,0,1344,1346,3,164,82,0,1345,1340,1,0,0,0,1345,1343,
1,0,0,0,1346,1347,1,0,0,0,1347,1348,5,88,0,0,1348,1349,3,198,99,0,1349,1352,
1,0,0,0,1350,1352,3,104,52,0,1351,1337,1,0,0,0,1351,1350,1,0,0,0,1352,183,
1,0,0,0,1353,1354,3,186,93,0,1354,1355,5,94,0,0,1355,1357,1,0,0,0,1356,1353,
1,0,0,0,1357,1358,1,0,0,0,1358,1356,1,0,0,0,1358,1359,1,0,0,0,1359,1361,
1,0,0,0,1360,1362,3,160,80,0,1361,1360,1,0,0,0,1362,1363,1,0,0,0,1363,1361,
1,0,0,0,1363,1364,1,0,0,0,1364,185,1,0,0,0,1365,1371,5,6,0,0,1366,1372,3,
198,99,0,1367,1372,5,129,0,0,1368,1369,3,246,123,0,1369,1370,3,164,82,0,
1370,1372,1,0,0,0,1371,1366,1,0,0,0,1371,1367,1,0,0,0,1371,1368,1,0,0,0,
1372,1375,1,0,0,0,1373,1375,5,12,0,0,1374,1365,1,0,0,0,1374,1373,1,0,0,0,
1375,187,1,0,0,0,1376,1389,3,192,96,0,1377,1379,3,190,95,0,1378,1377,1,0,
0,0,1378,1379,1,0,0,0,1379,1380,1,0,0,0,1380,1382,5,85,0,0,1381,1383,3,198,
99,0,1382,1381,1,0,0,0,1382,1383,1,0,0,0,1383,1384,1,0,0,0,1384,1386,5,85,
0,0,1385,1387,3,194,97,0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,1387,1389,1,
0,0,0,1388,1376,1,0,0,0,1388,1378,1,0,0,0,1389,189,1,0,0,0,1390,1393,3,162,
81,0,1391,1393,3,194,97,0,1392,1390,1,0,0,0,1392,1391,1,0,0,0,1393,191,1,
0,0,0,1394,1396,3,14,7,0,1395,1394,1,0,0,0,1396,1399,1,0,0,0,1397,1395,1,
0,0,0,1397,1398,1,0,0,0,1398,1402,1,0,0,0,1399,1397,1,0,0,0,1400,1403,3,
246,123,0,1401,1403,5,61,0,0,1402,1400,1,0,0,0,1402,1401,1,0,0,0,1403,1404,
1,0,0,0,1404,1405,3,78,39,0,1405,1406,5,94,0,0,1406,1407,3,198,99,0,1407,
193,1,0,0,0,1408,1413,3,198,99,0,1409,1410,5,86,0,0,1410,1412,3,198,99,0,
1411,1409,1,0,0,0,1412,1415,1,0,0,0,1413,1411,1,0,0,0,1413,1414,1,0,0,0,
1414,195,1,0,0,0,1415,1413,1,0,0,0,1416,1420,3,164,82,0,1417,1420,5,53,0,
0,1418,1420,5,50,0,0,1419,1416,1,0,0,0,1419,1417,1,0,0,0,1419,1418,1,0,0,
0,1420,1421,1,0,0,0,1421,1422,3,256,128,0,1422,197,1,0,0,0,1423,1424,6,99,
-1,0,1424,1467,3,212,106,0,1425,1467,3,196,98,0,1426,1427,3,246,123,0,1427,
1433,5,123,0,0,1428,1430,3,250,125,0,1429,1428,1,0,0,0,1429,1430,1,0,0,0,
1430,1431,1,0,0,0,1431,1434,3,164,82,0,1432,1434,5,33,0,0,1433,1429,1,0,
0,0,1433,1432,1,0,0,0,1434,1467,1,0,0,0,1435,1436,3,84,42,0,1436,1438,5,
123,0,0,1437,1439,3,250,125,0,1438,1437,1,0,0,0,1438,1439,1,0,0,0,1439,1440,
1,0,0,0,1440,1441,5,33,0,0,1441,1467,1,0,0,0,1442,1467,3,214,107,0,1443,
1444,7,6,0,0,1444,1467,3,198,99,17,1445,1449,5,79,0,0,1446,1448,3,114,57,
0,1447,1446,1,0,0,0,1448,1451,1,0,0,0,1449,1447,1,0,0,0,1449,1450,1,0,0,
0,1450,1452,1,0,0,0,1451,1449,1,0,0,0,1452,1457,3,246,123,0,1453,1454,5,
107,0,0,1454,1456,3,246,123,0,1455,1453,1,0,0,0,1456,1459,1,0,0,0,1457,1455,
1,0,0,0,1457,1458,1,0,0,0,1458,1460,1,0,0,0,1459,1457,1,0,0,0,1460,1461,
5,80,0,0,1461,1462,3,198,99,16,1462,1467,1,0,0,0,1463,1464,5,33,0,0,1464,
1467,3,226,113,0,1465,1467,3,206,103,0,1466,1423,1,0,0,0,1466,1425,1,0,0,
0,1466,1426,1,0,0,0,1466,1435,1,0,0,0,1466,1442,1,0,0,0,1466,1443,1,0,0,
0,1466,1445,1,0,0,0,1466,1463,1,0,0,0,1466,1465,1,0,0,0,1467,1551,1,0,0,
0,1468,1469,10,14,0,0,1469,1470,7,7,0,0,1470,1550,3,198,99,15,1471,1472,
10,13,0,0,1472,1473,7,8,0,0,1473,1550,3,198,99,14,1474,1482,10,12,0,0,1475,
1476,5,90,0,0,1476,1483,5,90,0,0,1477,1478,5,89,0,0,1478,1479,5,89,0,0,1479,
1483,5,89,0,0,1480,1481,5,89,0,0,1481,1483,5,89,0,0,1482,1475,1,0,0,0,1482,
1477,1,0,0,0,1482,1480,1,0,0,0,1483,1484,1,0,0,0,1484,1550,3,198,99,13,1485,
1486,10,11,0,0,1486,1487,7,9,0,0,1487,1550,3,198,99,12,1488,1489,10,9,0,
0,1489,1490,7,10,0,0,1490,1550,3,198,99,10,1491,1492,10,8,0,0,1492,1493,
5,107,0,0,1493,1550,3,198,99,9,1494,1495,10,7,0,0,1495,1496,5,109,0,0,1496,
1550,3,198,99,8,1497,1498,10,6,0,0,1498,1499,5,108,0,0,1499,1550,3,198,99,
7,1500,1501,10,5,0,0,1501,1502,5,99,0,0,1502,1550,3,198,99,6,1503,1504,10,
4,0,0,1504,1505,5,100,0,0,1505,1550,3,198,99,5,1506,1507,10,3,0,0,1507,1508,
5,93,0,0,1508,1509,3,198,99,0,1509,1510,5,94,0,0,1510,1511,3,198,99,3,1511,
1550,1,0,0,0,1512,1513,10,2,0,0,1513,1514,7,11,0,0,1514,1550,3,198,99,2,
1515,1516,10,25,0,0,1516,1517,5,83,0,0,1517,1518,3,198,99,0,1518,1519,5,
84,0,0,1519,1550,1,0,0,0,1520,1521,10,24,0,0,1521,1533,5,87,0,0,1522,1534,
3,164,82,0,1523,1534,3,196,98,0,1524,1534,5,53,0,0,1525,1527,5,33,0,0,1526,
1528,3,242,121,0,1527,1526,1,0,0,0,1527,1528,1,0,0,0,1528,1529,1,0,0,0,1529,
1534,3,230,115,0,1530,1531,5,50,0,0,1531,1534,3,252,126,0,1532,1534,3,236,
118,0,1533,1522,1,0,0,0,1533,1523,1,0,0,0,1533,1524,1,0,0,0,1533,1525,1,
0,0,0,1533,1530,1,0,0,0,1533,1532,1,0,0,0,1534,1550,1,0,0,0,1535,1536,10,
22,0,0,1536,1538,5,123,0,0,1537,1539,3,250,125,0,1538,1537,1,0,0,0,1538,
1539,1,0,0,0,1539,1540,1,0,0,0,1540,1550,3,164,82,0,1541,1542,10,18,0,0,
1542,1550,7,12,0,0,1543,1544,10,10,0,0,1544,1547,5,27,0,0,1545,1548,3,246,
123,0,1546,1548,3,200,100,0,1547,1545,1,0,0,0,1547,1546,1,0,0,0,1548,1550,
1,0,0,0,1549,1468,1,0,0,0,1549,1471,1,0,0,0,1549,1474,1,0,0,0,1549,1485,
1,0,0,0,1549,1488,1,0,0,0,1549,1491,1,0,0,0,1549,1494,1,0,0,0,1549,1497,
1,0,0,0,1549,1500,1,0,0,0,1549,1503,1,0,0,0,1549,1506,1,0,0,0,1549,1512,
1,0,0,0,1549,1515,1,0,0,0,1549,1520,1,0,0,0,1549,1535,1,0,0,0,1549,1541,
1,0,0,0,1549,1543,1,0,0,0,1550,1553,1,0,0,0,1551,1549,1,0,0,0,1551,1552,
1,0,0,0,1552,199,1,0,0,0,1553,1551,1,0,0,0,1554,1556,3,14,7,0,1555,1554,
1,0,0,0,1556,1559,1,0,0,0,1557,1555,1,0,0,0,1557,1558,1,0,0,0,1558,1560,
1,0,0,0,1559,1557,1,0,0,0,1560,1564,3,246,123,0,1561,1563,3,114,57,0,1562,
1561,1,0,0,0,1563,1566,1,0,0,0,1564,1562,1,0,0,0,1564,1565,1,0,0,0,1565,
1567,1,0,0,0,1566,1564,1,0,0,0,1567,1568,3,74,37,0,1568,1577,1,0,0,0,1569,
1570,3,246,123,0,1570,1572,5,79,0,0,1571,1573,3,202,101,0,1572,1571,1,0,
0,0,1572,1573,1,0,0,0,1573,1574,1,0,0,0,1574,1575,5,80,0,0,1575,1577,1,0,
0,0,1576,1557,1,0,0,0,1576,1569,1,0,0,0,1577,201,1,0,0,0,1578,1583,3,204,
102,0,1579,1580,5,86,0,0,1580,1582,3,204,102,0,1581,1579,1,0,0,0,1582,1585,
1,0,0,0,1583,1581,1,0,0,0,1583,1584,1,0,0,0,1584,203,1,0,0,0,1585,1583,1,
0,0,0,1586,1587,3,200,100,0,1587,205,1,0,0,0,1588,1589,3,208,104,0,1589,
1590,5,122,0,0,1590,1591,3,210,105,0,1591,207,1,0,0,0,1592,1615,3,164,82,
0,1593,1595,5,79,0,0,1594,1596,3,96,48,0,1595,1594,1,0,0,0,1595,1596,1,0,
0,0,1596,1597,1,0,0,0,1597,1615,5,80,0,0,1598,1599,5,79,0,0,1599,1604,3,
164,82,0,1600,1601,5,86,0,0,1601,1603,3,164,82,0,1602,1600,1,0,0,0,1603,
1606,1,0,0,0,1604,1602,1,0,0,0,1604,1605,1,0,0,0,1605,1607,1,0,0,0,1606,
1604,1,0,0,0,1607,1608,5,80,0,0,1608,1615,1,0,0,0,1609,1611,5,79,0,0,1610,
1612,3,100,50,0,1611,1610,1,0,0,0,1611,1612,1,0,0,0,1612,1613,1,0,0,0,1613,
1615,5,80,0,0,1614,1592,1,0,0,0,1614,1593,1,0,0,0,1614,1598,1,0,0,0,1614,
1609,1,0,0,0,1615,209,1,0,0,0,1616,1619,3,198,99,0,1617,1619,3,158,79,0,
1618,1616,1,0,0,0,1618,1617,1,0,0,0,1619,211,1,0,0,0,1620,1621,5,79,0,0,
1621,1622,3,198,99,0,1622,1623,5,80,0,0,1623,1639,1,0,0,0,1624,1639,5,53,
0,0,1625,1639,5,50,0,0,1626,1639,3,106,53,0,1627,1639,3,164,82,0,1628,1629,
3,46,23,0,1629,1630,5,87,0,0,1630,1631,5,9,0,0,1631,1639,1,0,0,0,1632,1636,
3,242,121,0,1633,1637,3,254,127,0,1634,1635,5,53,0,0,1635,1637,3,256,128,
0,1636,1633,1,0,0,0,1636,1634,1,0,0,0,1637,1639,1,0,0,0,1638,1620,1,0,0,
0,1638,1624,1,0,0,0,1638,1625,1,0,0,0,1638,1626,1,0,0,0,1638,1627,1,0,0,
0,1638,1628,1,0,0,0,1638,1632,1,0,0,0,1639,213,1,0,0,0,1640,1641,5,51,0,
0,1641,1642,5,79,0,0,1642,1643,3,198,99,0,1643,1644,5,80,0,0,1644,1648,5,
81,0,0,1645,1647,3,216,108,0,1646,1645,1,0,0,0,1647,1650,1,0,0,0,1648,1646,
1,0,0,0,1648,1649,1,0,0,0,1649,1651,1,0,0,0,1650,1648,1,0,0,0,1651,1652,
5,82,0,0,1652,215,1,0,0,0,1653,1671,5,6,0,0,1654,1672,3,194,97,0,1655,1658,
5,78,0,0,1656,1657,5,86,0,0,1657,1659,5,12,0,0,1658,1656,1,0,0,0,1658,1659,
1,0,0,0,1659,1672,1,0,0,0,1660,1665,3,220,110,0,1661,1662,5,86,0,0,1662,
1664,3,220,110,0,1663,1661,1,0,0,0,1664,1667,1,0,0,0,1665,1663,1,0,0,0,1665,
1666,1,0,0,0,1666,1669,1,0,0,0,1667,1665,1,0,0,0,1668,1670,3,218,109,0,1669,
1668,1,0,0,0,1669,1670,1,0,0,0,1670,1672,1,0,0,0,1671,1654,1,0,0,0,1671,
1655,1,0,0,0,1671,1660,1,0,0,0,1672,1673,1,0,0,0,1673,1674,7,13,0,0,1674,
1679,3,222,111,0,1675,1676,5,12,0,0,1676,1677,7,13,0,0,1677,1679,3,222,111,
0,1678,1653,1,0,0,0,1678,1675,1,0,0,0,1679,217,1,0,0,0,1680,1681,5,64,0,
0,1681,1682,3,198,99,0,1682,219,1,0,0,0,1683,1684,3,200,100,0,1684,221,1,
0,0,0,1685,1693,3,158,79,0,1686,1688,3,160,80,0,1687,1686,1,0,0,0,1688,1691,
1,0,0,0,1689,1687,1,0,0,0,1689,1690,1,0,0,0,1690,1693,1,0,0,0,1691,1689,
1,0,0,0,1692,1685,1,0,0,0,1692,1689,1,0,0,0,1693,223,1,0,0,0,1694,1695,3,
84,42,0,1695,225,1,0,0,0,1696,1698,3,242,121,0,1697,1696,1,0,0,0,1697,1698,
1,0,0,0,1698,1699,1,0,0,0,1699,1700,3,228,114,0,1700,1701,3,234,117,0,1701,
1706,1,0,0,0,1702,1703,3,228,114,0,1703,1704,3,232,116,0,1704,1706,1,0,0,
0,1705,1697,1,0,0,0,1705,1702,1,0,0,0,1706,227,1,0,0,0,1707,1709,3,164,82,
0,1708,1710,3,238,119,0,1709,1708,1,0,0,0,1709,1710,1,0,0,0,1710,1718,1,
0,0,0,1711,1712,5,87,0,0,1712,1714,3,164,82,0,1713,1715,3,238,119,0,1714,
1713,1,0,0,0,1714,1715,1,0,0,0,1715,1717,1,0,0,0,1716,1711,1,0,0,0,1717,
1720,1,0,0,0,1718,1716,1,0,0,0,1718,1719,1,0,0,0,1719,1723,1,0,0,0,1720,
1718,1,0,0,0,1721,1723,3,248,124,0,1722,1707,1,0,0,0,1722,1721,1,0,0,0,1723,
229,1,0,0,0,1724,1726,3,164,82,0,1725,1727,3,240,120,0,1726,1725,1,0,0,0,
1726,1727,1,0,0,0,1727,1728,1,0,0,0,1728,1729,3,234,117,0,1729,231,1,0,0,
0,1730,1731,5,83,0,0,1731,1733,5,84,0,0,1732,1730,1,0,0,0,1733,1734,1,0,
0,0,1734,1732,1,0,0,0,1734,1735,1,0,0,0,1735,1736,1,0,0,0,1736,1753,3,82,
41,0,1737,1738,5,83,0,0,1738,1739,3,198,99,0,1739,1740,5,84,0,0,1740,1742,
1,0,0,0,1741,1737,1,0,0,0,1742,1743,1,0,0,0,1743,1741,1,0,0,0,1743,1744,
1,0,0,0,1744,1749,1,0,0,0,1745,1746,5,83,0,0,1746,1748,5,84,0,0,1747,1745,
1,0,0,0,1748,1751,1,0,0,0,1749,1747,1,0,0,0,1749,1750,1,0,0,0,1750,1753,
1,0,0,0,1751,1749,1,0,0,0,1752,1732,1,0,0,0,1752,1741,1,0,0,0,1753,233,1,
0,0,0,1754,1756,3,256,128,0,1755,1757,3,34,17,0,1756,1755,1,0,0,0,1756,1757,
1,0,0,0,1757,235,1,0,0,0,1758,1759,3,242,121,0,1759,1760,3,254,127,0,1760,
237,1,0,0,0,1761,1762,5,90,0,0,1762,1765,5,89,0,0,1763,1765,3,250,125,0,
1764,1761,1,0,0,0,1764,1763,1,0,0,0,1765,239,1,0,0,0,1766,1767,5,90,0,0,
1767,1770,5,89,0,0,1768,1770,3,242,121,0,1769,1766,1,0,0,0,1769,1768,1,0,
0,0,1770,241,1,0,0,0,1771,1772,5,90,0,0,1772,1773,3,244,122,0,1773,1774,
5,89,0,0,1774,243,1,0,0,0,1775,1780,3,246,123,0,1776,1777,5,86,0,0,1777,
1779,3,246,123,0,1778,1776,1,0,0,0,1779,1782,1,0,0,0,1780,1778,1,0,0,0,1780,
1781,1,0,0,0,1781,245,1,0,0,0,1782,1780,1,0,0,0,1783,1785,3,114,57,0,1784,
1783,1,0,0,0,1785,1788,1,0,0,0,1786,1784,1,0,0,0,1786,1787,1,0,0,0,1787,
1791,1,0,0,0,1788,1786,1,0,0,0,1789,1792,3,224,112,0,1790,1792,3,248,124,
0,1791,1789,1,0,0,0,1791,1790,1,0,0,0,1792,1803,1,0,0,0,1793,1795,3,114,
57,0,1794,1793,1,0,0,0,1795,1798,1,0,0,0,1796,1794,1,0,0,0,1796,1797,1,0,
0,0,1797,1799,1,0,0,0,1798,1796,1,0,0,0,1799,1800,5,83,0,0,1800,1802,5,84,
0,0,1801,1796,1,0,0,0,1802,1805,1,0,0,0,1803,1801,1,0,0,0,1803,1804,1,0,
0,0,1804,247,1,0,0,0,1805,1803,1,0,0,0,1806,1807,7,14,0,0,1807,249,1,0,0,
0,1808,1809,5,90,0,0,1809,1814,3,88,44,0,1810,1811,5,86,0,0,1811,1813,3,
88,44,0,1812,1810,1,0,0,0,1813,1816,1,0,0,0,1814,1812,1,0,0,0,1814,1815,
1,0,0,0,1815,1817,1,0,0,0,1816,1814,1,0,0,0,1817,1818,5,89,0,0,1818,251,
1,0,0,0,1819,1829,3,256,128,0,1820,1822,5,87,0,0,1821,1823,3,250,125,0,1822,
1821,1,0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,0,0,1824,1826,3,164,82,0,1825,
1827,3,256,128,0,1826,1825,1,0,0,0,1826,1827,1,0,0,0,1827,1829,1,0,0,0,1828,
1819,1,0,0,0,1828,1820,1,0,0,0,1829,253,1,0,0,0,1830,1831,5,50,0,0,1831,
1836,3,252,126,0,1832,1833,3,164,82,0,1833,1834,3,256,128,0,1834,1836,1,
0,0,0,1835,1830,1,0,0,0,1835,1832,1,0,0,0,1836,255,1,0,0,0,1837,1839,5,79,
0,0,1838,1840,3,194,97,0,1839,1838,1,0,0,0,1839,1840,1,0,0,0,1840,1841,1,
0,0,0,1841,1842,5,80,0,0,1842,257,1,0,0,0,231,259,263,265,270,272,279,284,
292,301,306,313,321,328,340,344,349,353,357,361,371,379,387,391,398,405,
409,412,415,424,430,435,438,444,450,454,458,466,475,482,488,492,504,513,
518,524,528,540,547,560,565,575,583,593,602,613,618,627,637,642,651,657,
664,669,677,681,683,692,695,699,703,709,714,718,726,733,739,741,748,754,
760,763,773,783,789,796,800,809,815,826,836,847,857,865,868,878,888,891,
894,897,902,910,913,916,929,937,942,950,954,958,962,966,968,972,978,988,
992,1000,1009,1023,1026,1038,1041,1057,1062,1069,1074,1080,1089,1097,1104,
1108,1115,1117,1126,1136,1141,1152,1161,1168,1175,1186,1213,1216,1219,1227,
1231,1241,1247,1260,1269,1274,1287,1293,1300,1313,1322,1331,1337,1345,1351,
1358,1363,1371,1374,1378,1382,1386,1388,1392,1397,1402,1413,1419,1429,1433,
1438,1449,1457,1466,1482,1527,1533,1538,1547,1549,1551,1557,1564,1572,1576,
1583,1595,1604,1611,1614,1618,1636,1638,1648,1658,1665,1669,1671,1678,1689,
1692,1697,1705,1709,1714,1718,1722,1726,1734,1743,1749,1752,1756,1764,1769,
1780,1786,1791,1796,1803,1814,1822,1826,1828,1835,1839];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class JavaParser extends Parser  {

    static grammarFileName = "JavaParser.g4";
    static literalNames = [ null, "'abstract'", "'assert'", "'boolean'", 
                            "'break'", "'byte'", "'case'", "'catch'", "'char'", 
                            "'class'", "'const'", "'continue'", "'default'", 
                            "'do'", "'double'", "'else'", "'enum'", "'exports'", 
                            "'extends'", "'final'", "'finally'", "'float'", 
                            "'for'", "'goto'", "'if'", "'implements'", "'import'", 
                            "'instanceof'", "'int'", "'interface'", "'long'", 
                            "'module'", "'native'", "'new'", "'non-sealed'", 
                            "'open'", "'opens'", "'package'", "'permits'", 
                            "'private'", "'protected'", "'provides'", "'public'", 
                            "'record'", "'requires'", "'return'", "'sealed'", 
                            "'short'", "'static'", "'strictfp'", "'super'", 
                            "'switch'", "'synchronized'", "'this'", "'throw'", 
                            "'throws'", "'to'", "'transient'", "'transitive'", 
                            "'try'", "'uses'", "'var'", "'void'", "'volatile'", 
                            "'when'", "'while'", "'with'", "'yield'", null, 
                            null, null, null, null, null, null, null, null, 
                            null, "'null'", "'('", "')'", "'{'", "'}'", 
                            "'['", "']'", "';'", "','", "'.'", "'='", "'>'", 
                            "'<'", "'!'", "'~'", "'?'", "':'", "'=='", "'<='", 
                            "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", 
                            "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", 
                            "'%'", "'+='", "'-='", "'*='", "'/='", "'&='", 
                            "'|='", "'^='", "'%='", "'<<='", "'>>='", "'>>>='", 
                            "'->'", "'::'", "'@'", "'...'" ];
    static symbolicNames = [ null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", 
                             "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", 
                             "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
                             "ENUM", "EXPORTS", "EXTENDS", "FINAL", "FINALLY", 
                             "FLOAT", "FOR", "GOTO", "IF", "IMPLEMENTS", 
                             "IMPORT", "INSTANCEOF", "INT", "INTERFACE", 
                             "LONG", "MODULE", "NATIVE", "NEW", "NON_SEALED", 
                             "OPEN", "OPENS", "PACKAGE", "PERMITS", "PRIVATE", 
                             "PROTECTED", "PROVIDES", "PUBLIC", "RECORD", 
                             "REQUIRES", "RETURN", "SEALED", "SHORT", "STATIC", 
                             "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", 
                             "THIS", "THROW", "THROWS", "TO", "TRANSIENT", 
                             "TRANSITIVE", "TRY", "USES", "VAR", "VOID", 
                             "VOLATILE", "WHEN", "WHILE", "WITH", "YIELD", 
                             "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", 
                             "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", 
                             "BOOL_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", 
                             "TEXT_BLOCK", "NULL_LITERAL", "LPAREN", "RPAREN", 
                             "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", 
                             "COMMA", "DOT", "ASSIGN", "GT", "LT", "BANG", 
                             "TILDE", "QUESTION", "COLON", "EQUAL", "LE", 
                             "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", 
                             "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", 
                             "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", 
                             "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
                             "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
                             "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "ARROW", 
                             "COLONCOLON", "AT", "ELLIPSIS", "WS", "COMMENT", 
                             "LINE_COMMENT", "IDENTIFIER" ];
    static ruleNames = [ "compilationUnit", "modularCompulationUnit", "packageDeclaration", 
                         "importDeclaration", "typeDeclaration", "modifier", 
                         "classOrInterfaceModifier", "variableModifier", 
                         "classDeclaration", "typeParameters", "typeParameter", 
                         "typeBound", "enumDeclaration", "enumConstants", 
                         "enumConstant", "enumBodyDeclarations", "interfaceDeclaration", 
                         "classBody", "interfaceBody", "classBodyDeclaration", 
                         "memberDeclaration", "methodDeclaration", "methodBody", 
                         "typeTypeOrVoid", "genericMethodDeclaration", "genericConstructorDeclaration", 
                         "constructorDeclaration", "compactConstructorDeclaration", 
                         "fieldDeclaration", "interfaceBodyDeclaration", 
                         "interfaceMemberDeclaration", "constDeclaration", 
                         "constantDeclarator", "interfaceMethodDeclaration", 
                         "interfaceMethodModifier", "genericInterfaceMethodDeclaration", 
                         "interfaceCommonBodyDeclaration", "variableDeclarators", 
                         "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                         "arrayInitializer", "classType", "packageName", 
                         "typeArgument", "qualifiedNameList", "formalParameters", 
                         "receiverParameter", "formalParameterList", "formalParameter", 
                         "lambdaLVTIList", "lambdaLVTIParameter", "qualifiedName", 
                         "literal", "integerLiteral", "floatLiteral", "altAnnotationQualifiedName", 
                         "annotation", "annotationFieldValues", "annotationFieldValue", 
                         "annotationValue", "elementValue", "elementValueArrayInitializer", 
                         "annotationTypeDeclaration", "annotationTypeBody", 
                         "annotationTypeElementDeclaration", "annotationTypeElementRest", 
                         "annotationMethodOrConstantRest", "annotationMethodRest", 
                         "annotationConstantRest", "defaultValue", "moduleDeclaration", 
                         "moduleDirective", "requiresModifier", "recordDeclaration", 
                         "recordHeader", "recordComponentList", "recordComponent", 
                         "recordBody", "block", "blockStatement", "localVariableDeclaration", 
                         "identifier", "typeIdentifier", "localTypeDeclaration", 
                         "statement", "catchClause", "catchType", "finallyBlock", 
                         "resourceSpecification", "resources", "resource", 
                         "switchBlockStatementGroup", "switchLabel", "forControl", 
                         "forInit", "enhancedForControl", "expressionList", 
                         "methodCall", "expression", "pattern", "componentPatternList", 
                         "componentPattern", "lambdaExpression", "lambdaParameters", 
                         "lambdaBody", "primary", "switchExpression", "switchLabeledRule", 
                         "guard", "casePattern", "switchRuleOutcome", "classOrInterfaceType", 
                         "creator", "createdName", "innerCreator", "arrayCreatorRest", 
                         "classCreatorRest", "explicitGenericInvocation", 
                         "typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", 
                         "nonWildcardTypeArguments", "typeList", "typeType", 
                         "primitiveType", "typeArguments", "superSuffix", 
                         "explicitGenericInvocationSuffix", "arguments" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = JavaParser.ruleNames;
        this.literalNames = JavaParser.literalNames;
        this.symbolicNames = JavaParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 59:
    	    		return this.annotationFieldValue_sempred(localctx, predIndex);
    	case 76:
    	    		return this.recordComponentList_sempred(localctx, predIndex);
    	case 99:
    	    		return this.expression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    annotationFieldValue_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return  this.IsNotIdentifierAssign() ;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    recordComponentList_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return  this.DoLastRecordComponent() ;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 14);
    		case 3:
    			return this.precpred(this._ctx, 13);
    		case 4:
    			return this.precpred(this._ctx, 12);
    		case 5:
    			return this.precpred(this._ctx, 11);
    		case 6:
    			return this.precpred(this._ctx, 9);
    		case 7:
    			return this.precpred(this._ctx, 8);
    		case 8:
    			return this.precpred(this._ctx, 7);
    		case 9:
    			return this.precpred(this._ctx, 6);
    		case 10:
    			return this.precpred(this._ctx, 5);
    		case 11:
    			return this.precpred(this._ctx, 4);
    		case 12:
    			return this.precpred(this._ctx, 3);
    		case 13:
    			return this.precpred(this._ctx, 2);
    		case 14:
    			return this.precpred(this._ctx, 25);
    		case 15:
    			return this.precpred(this._ctx, 24);
    		case 16:
    			return this.precpred(this._ctx, 22);
    		case 17:
    			return this.precpred(this._ctx, 18);
    		case 18:
    			return this.precpred(this._ctx, 10);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	compilationUnit() {
	    let localctx = new CompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, JavaParser.RULE_compilationUnit);
	    var _la = 0;
	    try {
	        this.state = 279;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 259;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	            if(la_===1) {
	                this.state = 258;
	                this.packageDeclaration();

	            }
	            this.state = 265;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 263;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 26:
	                        this.state = 261;
	                        this.importDeclaration();
	                        break;
	                    case 85:
	                        this.state = 262;
	                        this.match(JavaParser.SEMI);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 267;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,2,this._ctx);
	            }

	            this.state = 272;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 537461250) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 54113) !== 0) || _la===85 || _la===124) {
	                this.state = 270;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 1:
	                case 9:
	                case 16:
	                case 19:
	                case 29:
	                case 34:
	                case 39:
	                case 40:
	                case 42:
	                case 43:
	                case 46:
	                case 48:
	                case 49:
	                case 124:
	                    this.state = 268;
	                    this.typeDeclaration();
	                    break;
	                case 85:
	                    this.state = 269;
	                    this.match(JavaParser.SEMI);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 274;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 275;
	            this.match(JavaParser.EOF);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 276;
	            this.modularCompulationUnit();
	            this.state = 277;
	            this.match(JavaParser.EOF);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modularCompulationUnit() {
	    let localctx = new ModularCompulationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, JavaParser.RULE_modularCompulationUnit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 281;
	            this.importDeclaration();
	            this.state = 286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 287;
	        this.moduleDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageDeclaration() {
	    let localctx = new PackageDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, JavaParser.RULE_packageDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 292;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===124) {
	            this.state = 289;
	            this.annotation();
	            this.state = 294;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 295;
	        this.match(JavaParser.PACKAGE);
	        this.state = 296;
	        this.qualifiedName();
	        this.state = 297;
	        this.match(JavaParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDeclaration() {
	    let localctx = new ImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, JavaParser.RULE_importDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 299;
	        this.match(JavaParser.IMPORT);
	        this.state = 301;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===48) {
	            this.state = 300;
	            this.match(JavaParser.STATIC);
	        }

	        this.state = 303;
	        this.qualifiedName();
	        this.state = 306;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===87) {
	            this.state = 304;
	            this.match(JavaParser.DOT);
	            this.state = 305;
	            this.match(JavaParser.MUL);
	        }

	        this.state = 308;
	        this.match(JavaParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDeclaration() {
	    let localctx = new TypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, JavaParser.RULE_typeDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 313;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 310;
	                this.classOrInterfaceModifier(); 
	            }
	            this.state = 315;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
	        }

	        this.state = 321;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 9:
	            this.state = 316;
	            this.classDeclaration();
	            break;
	        case 16:
	            this.state = 317;
	            this.enumDeclaration();
	            break;
	        case 29:
	            this.state = 318;
	            this.interfaceDeclaration();
	            break;
	        case 124:
	            this.state = 319;
	            this.annotationTypeDeclaration();
	            break;
	        case 43:
	            this.state = 320;
	            this.recordDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifier() {
	    let localctx = new ModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, JavaParser.RULE_modifier);
	    try {
	        this.state = 328;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 19:
	        case 34:
	        case 39:
	        case 40:
	        case 42:
	        case 46:
	        case 48:
	        case 49:
	        case 124:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 323;
	            this.classOrInterfaceModifier();
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 324;
	            this.match(JavaParser.NATIVE);
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 325;
	            this.match(JavaParser.SYNCHRONIZED);
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 326;
	            this.match(JavaParser.TRANSIENT);
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 327;
	            this.match(JavaParser.VOLATILE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrInterfaceModifier() {
	    let localctx = new ClassOrInterfaceModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, JavaParser.RULE_classOrInterfaceModifier);
	    try {
	        this.state = 340;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 124:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 330;
	            this.annotation();
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 331;
	            this.match(JavaParser.PUBLIC);
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 332;
	            this.match(JavaParser.PROTECTED);
	            break;
	        case 39:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 333;
	            this.match(JavaParser.PRIVATE);
	            break;
	        case 48:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 334;
	            this.match(JavaParser.STATIC);
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 335;
	            this.match(JavaParser.ABSTRACT);
	            break;
	        case 19:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 336;
	            this.match(JavaParser.FINAL);
	            break;
	        case 49:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 337;
	            this.match(JavaParser.STRICTFP);
	            break;
	        case 46:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 338;
	            this.match(JavaParser.SEALED);
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 339;
	            this.match(JavaParser.NON_SEALED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableModifier() {
	    let localctx = new VariableModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, JavaParser.RULE_variableModifier);
	    try {
	        this.state = 344;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 19:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 342;
	            this.match(JavaParser.FINAL);
	            break;
	        case 124:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 343;
	            this.annotation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, JavaParser.RULE_classDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 346;
	        this.match(JavaParser.CLASS);
	        this.state = 347;
	        this.identifier();
	        this.state = 349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 348;
	            this.typeParameters();
	        }

	        this.state = 353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18) {
	            this.state = 351;
	            this.match(JavaParser.EXTENDS);
	            this.state = 352;
	            this.typeType();
	        }

	        this.state = 357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 355;
	            this.match(JavaParser.IMPLEMENTS);
	            this.state = 356;
	            this.typeList();
	        }

	        this.state = 361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===38) {
	            this.state = 359;
	            this.match(JavaParser.PERMITS);
	            this.state = 360;
	            this.typeList();
	        }

	        this.state = 363;
	        this.classBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameters() {
	    let localctx = new TypeParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, JavaParser.RULE_typeParameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 365;
	        this.match(JavaParser.LT);
	        this.state = 366;
	        this.typeParameter();
	        this.state = 371;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 367;
	            this.match(JavaParser.COMMA);
	            this.state = 368;
	            this.typeParameter();
	            this.state = 373;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 374;
	        this.match(JavaParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameter() {
	    let localctx = new TypeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, JavaParser.RULE_typeParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 379;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===124) {
	            this.state = 376;
	            this.annotation();
	            this.state = 381;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 382;
	        this.identifier();
	        this.state = 391;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18) {
	            this.state = 383;
	            this.match(JavaParser.EXTENDS);
	            this.state = 387;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 384;
	                    this.annotation(); 
	                }
	                this.state = 389;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	            }

	            this.state = 390;
	            this.typeBound();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeBound() {
	    let localctx = new TypeBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, JavaParser.RULE_typeBound);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 393;
	        this.typeType();
	        this.state = 398;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===107) {
	            this.state = 394;
	            this.match(JavaParser.BITAND);
	            this.state = 395;
	            this.typeType();
	            this.state = 400;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumDeclaration() {
	    let localctx = new EnumDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, JavaParser.RULE_enumDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 401;
	        this.match(JavaParser.ENUM);
	        this.state = 402;
	        this.identifier();
	        this.state = 405;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 403;
	            this.match(JavaParser.IMPLEMENTS);
	            this.state = 404;
	            this.typeList();
	        }

	        this.state = 407;
	        this.match(JavaParser.LBRACE);
	        this.state = 409;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 17)) & ~0x1f) === 0 && ((1 << (_la - 17)) & 757874689) !== 0) || ((((_la - 56)) & ~0x1f) === 0 && ((1 << (_la - 56)) & 3381) !== 0) || _la===124 || _la===129) {
	            this.state = 408;
	            this.enumConstants();
	        }

	        this.state = 412;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===86) {
	            this.state = 411;
	            this.match(JavaParser.COMMA);
	        }

	        this.state = 415;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===85) {
	            this.state = 414;
	            this.enumBodyDeclarations();
	        }

	        this.state = 417;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstants() {
	    let localctx = new EnumConstantsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, JavaParser.RULE_enumConstants);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 419;
	        this.enumConstant();
	        this.state = 424;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 420;
	                this.match(JavaParser.COMMA);
	                this.state = 421;
	                this.enumConstant(); 
	            }
	            this.state = 426;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstant() {
	    let localctx = new EnumConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, JavaParser.RULE_enumConstant);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 430;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===124) {
	            this.state = 427;
	            this.annotation();
	            this.state = 432;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 433;
	        this.identifier();
	        this.state = 435;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===79) {
	            this.state = 434;
	            this.arguments();
	        }

	        this.state = 438;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===81) {
	            this.state = 437;
	            this.classBody();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumBodyDeclarations() {
	    let localctx = new EnumBodyDeclarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, JavaParser.RULE_enumBodyDeclarations);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 440;
	        this.match(JavaParser.SEMI);
	        this.state = 444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4029367082) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4145274845) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 69337101) !== 0) || _la===124 || _la===129) {
	            this.state = 441;
	            this.classBodyDeclaration();
	            this.state = 446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceDeclaration() {
	    let localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, JavaParser.RULE_interfaceDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 447;
	        this.match(JavaParser.INTERFACE);
	        this.state = 448;
	        this.identifier();
	        this.state = 450;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 449;
	            this.typeParameters();
	        }

	        this.state = 454;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18) {
	            this.state = 452;
	            this.match(JavaParser.EXTENDS);
	            this.state = 453;
	            this.typeList();
	        }

	        this.state = 458;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===38) {
	            this.state = 456;
	            this.match(JavaParser.PERMITS);
	            this.state = 457;
	            this.typeList();
	        }

	        this.state = 460;
	        this.interfaceBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBody() {
	    let localctx = new ClassBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, JavaParser.RULE_classBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 462;
	        this.match(JavaParser.LBRACE);
	        this.state = 466;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4029367082) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4145274845) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 69337101) !== 0) || _la===124 || _la===129) {
	            this.state = 463;
	            this.classBodyDeclaration();
	            this.state = 468;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 469;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceBody() {
	    let localctx = new InterfaceBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, JavaParser.RULE_interfaceBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 471;
	        this.match(JavaParser.LBRACE);
	        this.state = 475;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4029371178) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4145274845) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 69206029) !== 0) || _la===124 || _la===129) {
	            this.state = 472;
	            this.interfaceBodyDeclaration();
	            this.state = 477;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 478;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBodyDeclaration() {
	    let localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, JavaParser.RULE_classBodyDeclaration);
	    var _la = 0;
	    try {
	        this.state = 492;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 480;
	            this.match(JavaParser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 482;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===48) {
	                this.state = 481;
	                this.match(JavaParser.STATIC);
	            }

	            this.state = 484;
	            this.block();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 488;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 485;
	                    this.modifier(); 
	                }
	                this.state = 490;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
	            }

	            this.state = 491;
	            this.memberDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberDeclaration() {
	    let localctx = new MemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, JavaParser.RULE_memberDeclaration);
	    try {
	        this.state = 504;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 494;
	            this.recordDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 495;
	            this.methodDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 496;
	            this.genericMethodDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 497;
	            this.fieldDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 498;
	            this.constructorDeclaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 499;
	            this.genericConstructorDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 500;
	            this.interfaceDeclaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 501;
	            this.annotationTypeDeclaration();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 502;
	            this.classDeclaration();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 503;
	            this.enumDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDeclaration() {
	    let localctx = new MethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, JavaParser.RULE_methodDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 506;
	        this.typeTypeOrVoid();
	        this.state = 507;
	        this.identifier();
	        this.state = 508;
	        this.formalParameters();
	        this.state = 513;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 509;
	            this.match(JavaParser.LBRACK);
	            this.state = 510;
	            this.match(JavaParser.RBRACK);
	            this.state = 515;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 518;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===55) {
	            this.state = 516;
	            this.match(JavaParser.THROWS);
	            this.state = 517;
	            this.qualifiedNameList();
	        }

	        this.state = 520;
	        this.methodBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodBody() {
	    let localctx = new MethodBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, JavaParser.RULE_methodBody);
	    try {
	        this.state = 524;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 81:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 522;
	            this.block();
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 523;
	            this.match(JavaParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeTypeOrVoid() {
	    let localctx = new TypeTypeOrVoidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, JavaParser.RULE_typeTypeOrVoid);
	    try {
	        this.state = 528;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 17:
	        case 21:
	        case 28:
	        case 30:
	        case 31:
	        case 35:
	        case 36:
	        case 38:
	        case 41:
	        case 43:
	        case 44:
	        case 46:
	        case 47:
	        case 56:
	        case 58:
	        case 60:
	        case 61:
	        case 64:
	        case 66:
	        case 67:
	        case 124:
	        case 129:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 526;
	            this.typeType();
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 527;
	            this.match(JavaParser.VOID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericMethodDeclaration() {
	    let localctx = new GenericMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, JavaParser.RULE_genericMethodDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 530;
	        this.typeParameters();
	        this.state = 531;
	        this.methodDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericConstructorDeclaration() {
	    let localctx = new GenericConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, JavaParser.RULE_genericConstructorDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 533;
	        this.typeParameters();
	        this.state = 534;
	        this.constructorDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorDeclaration() {
	    let localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, JavaParser.RULE_constructorDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 536;
	        this.identifier();
	        this.state = 537;
	        this.formalParameters();
	        this.state = 540;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===55) {
	            this.state = 538;
	            this.match(JavaParser.THROWS);
	            this.state = 539;
	            this.qualifiedNameList();
	        }

	        this.state = 542;
	        localctx.constructorBody = this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compactConstructorDeclaration() {
	    let localctx = new CompactConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, JavaParser.RULE_compactConstructorDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 547;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 544;
	                this.modifier(); 
	            }
	            this.state = 549;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
	        }

	        this.state = 550;
	        this.identifier();
	        this.state = 551;
	        localctx.constructorBody = this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldDeclaration() {
	    let localctx = new FieldDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, JavaParser.RULE_fieldDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 553;
	        this.typeType();
	        this.state = 554;
	        this.variableDeclarators();
	        this.state = 555;
	        this.match(JavaParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceBodyDeclaration() {
	    let localctx = new InterfaceBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, JavaParser.RULE_interfaceBodyDeclaration);
	    try {
	        this.state = 565;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 3:
	        case 5:
	        case 8:
	        case 9:
	        case 12:
	        case 14:
	        case 16:
	        case 17:
	        case 19:
	        case 21:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 36:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 52:
	        case 56:
	        case 57:
	        case 58:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 66:
	        case 67:
	        case 90:
	        case 124:
	        case 129:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 560;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 557;
	                    this.modifier(); 
	                }
	                this.state = 562;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
	            }

	            this.state = 563;
	            this.interfaceMemberDeclaration();
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 564;
	            this.match(JavaParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMemberDeclaration() {
	    let localctx = new InterfaceMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, JavaParser.RULE_interfaceMemberDeclaration);
	    try {
	        this.state = 575;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 567;
	            this.recordDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 568;
	            this.constDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 569;
	            this.interfaceMethodDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 570;
	            this.genericInterfaceMethodDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 571;
	            this.interfaceDeclaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 572;
	            this.annotationTypeDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 573;
	            this.classDeclaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 574;
	            this.enumDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constDeclaration() {
	    let localctx = new ConstDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, JavaParser.RULE_constDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 577;
	        this.typeType();
	        this.state = 578;
	        this.constantDeclarator();
	        this.state = 583;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 579;
	            this.match(JavaParser.COMMA);
	            this.state = 580;
	            this.constantDeclarator();
	            this.state = 585;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 586;
	        this.match(JavaParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantDeclarator() {
	    let localctx = new ConstantDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, JavaParser.RULE_constantDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 588;
	        this.identifier();
	        this.state = 593;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 589;
	            this.match(JavaParser.LBRACK);
	            this.state = 590;
	            this.match(JavaParser.RBRACK);
	            this.state = 595;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 596;
	        this.match(JavaParser.ASSIGN);
	        this.state = 597;
	        this.variableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodDeclaration() {
	    let localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, JavaParser.RULE_interfaceMethodDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 602;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,53,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 599;
	                this.interfaceMethodModifier(); 
	            }
	            this.state = 604;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,53,this._ctx);
	        }

	        this.state = 605;
	        this.interfaceCommonBodyDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodModifier() {
	    let localctx = new InterfaceMethodModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, JavaParser.RULE_interfaceMethodModifier);
	    try {
	        this.state = 613;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 124:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 607;
	            this.annotation();
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 608;
	            this.match(JavaParser.PUBLIC);
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 609;
	            this.match(JavaParser.ABSTRACT);
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 610;
	            this.match(JavaParser.DEFAULT);
	            break;
	        case 48:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 611;
	            this.match(JavaParser.STATIC);
	            break;
	        case 49:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 612;
	            this.match(JavaParser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericInterfaceMethodDeclaration() {
	    let localctx = new GenericInterfaceMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, JavaParser.RULE_genericInterfaceMethodDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 618;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || _la===12 || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 193) !== 0) || _la===124) {
	            this.state = 615;
	            this.interfaceMethodModifier();
	            this.state = 620;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 621;
	        this.typeParameters();
	        this.state = 622;
	        this.interfaceCommonBodyDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceCommonBodyDeclaration() {
	    let localctx = new InterfaceCommonBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, JavaParser.RULE_interfaceCommonBodyDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 627;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 624;
	                this.annotation(); 
	            }
	            this.state = 629;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
	        }

	        this.state = 630;
	        this.typeTypeOrVoid();
	        this.state = 631;
	        this.identifier();
	        this.state = 632;
	        this.formalParameters();
	        this.state = 637;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 633;
	            this.match(JavaParser.LBRACK);
	            this.state = 634;
	            this.match(JavaParser.RBRACK);
	            this.state = 639;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 642;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===55) {
	            this.state = 640;
	            this.match(JavaParser.THROWS);
	            this.state = 641;
	            this.qualifiedNameList();
	        }

	        this.state = 644;
	        this.methodBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarators() {
	    let localctx = new VariableDeclaratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, JavaParser.RULE_variableDeclarators);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 646;
	        this.variableDeclarator();
	        this.state = 651;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 647;
	                this.match(JavaParser.COMMA);
	                this.state = 648;
	                this.variableDeclarator(); 
	            }
	            this.state = 653;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarator() {
	    let localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, JavaParser.RULE_variableDeclarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 654;
	        this.variableDeclaratorId();
	        this.state = 657;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        if(la_===1) {
	            this.state = 655;
	            this.match(JavaParser.ASSIGN);
	            this.state = 656;
	            this.variableInitializer();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaratorId() {
	    let localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, JavaParser.RULE_variableDeclaratorId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 659;
	        this.identifier();
	        this.state = 664;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 660;
	                this.match(JavaParser.LBRACK);
	                this.state = 661;
	                this.match(JavaParser.RBRACK); 
	            }
	            this.state = 666;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializer() {
	    let localctx = new VariableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, JavaParser.RULE_variableInitializer);
	    try {
	        this.state = 669;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 81:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 667;
	            this.arrayInitializer();
	            break;
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 17:
	        case 21:
	        case 28:
	        case 30:
	        case 31:
	        case 33:
	        case 35:
	        case 36:
	        case 38:
	        case 41:
	        case 43:
	        case 44:
	        case 46:
	        case 47:
	        case 50:
	        case 51:
	        case 53:
	        case 56:
	        case 58:
	        case 60:
	        case 61:
	        case 62:
	        case 64:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 90:
	        case 91:
	        case 92:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 124:
	        case 129:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 668;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayInitializer() {
	    let localctx = new ArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, JavaParser.RULE_arrayInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 671;
	        this.match(JavaParser.LBRACE);
	        this.state = 683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3491905832) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 3130420525) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 117489663) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 276824079) !== 0)) {
	            this.state = 672;
	            this.variableInitializer();
	            this.state = 677;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 673;
	                    this.match(JavaParser.COMMA);
	                    this.state = 674;
	                    this.variableInitializer(); 
	                }
	                this.state = 679;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
	            }

	            this.state = 681;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===86) {
	                this.state = 680;
	                this.match(JavaParser.COMMA);
	            }

	        }

	        this.state = 685;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classType() {
	    let localctx = new ClassTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, JavaParser.RULE_classType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 701; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 695;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        		if(la_===1) {
	        		    this.state = 687;
	        		    this.packageName();
	        		    this.state = 688;
	        		    this.match(JavaParser.DOT);
	        		    this.state = 692;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		    while(_la===124) {
	        		        this.state = 689;
	        		        this.annotation();
	        		        this.state = 694;
	        		        this._errHandler.sync(this);
	        		        _la = this._input.LA(1);
	        		    }

	        		}
	        		this.state = 697;
	        		this.typeIdentifier();
	        		this.state = 699;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        		if(la_===1) {
	        		    this.state = 698;
	        		    this.typeArguments();

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 703; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,69, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 718;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 705;
	                this.match(JavaParser.DOT);
	                this.state = 709;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===124) {
	                    this.state = 706;
	                    this.annotation();
	                    this.state = 711;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 712;
	                this.typeIdentifier();
	                this.state = 714;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	                if(la_===1) {
	                    this.state = 713;
	                    this.typeArguments();

	                } 
	            }
	            this.state = 720;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageName() {
	    let localctx = new PackageNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, JavaParser.RULE_packageName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 721;
	        this.identifier();
	        this.state = 726;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 722;
	                this.match(JavaParser.DOT);
	                this.state = 723;
	                this.identifier(); 
	            }
	            this.state = 728;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgument() {
	    let localctx = new TypeArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, JavaParser.RULE_typeArgument);
	    var _la = 0;
	    try {
	        this.state = 741;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 729;
	            this.typeType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 733;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===124) {
	                this.state = 730;
	                this.annotation();
	                this.state = 735;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 736;
	            this.match(JavaParser.QUESTION);
	            this.state = 739;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18 || _la===50) {
	                this.state = 737;
	                _la = this._input.LA(1);
	                if(!(_la===18 || _la===50)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 738;
	                this.typeType();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedNameList() {
	    let localctx = new QualifiedNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, JavaParser.RULE_qualifiedNameList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 743;
	        this.qualifiedName();
	        this.state = 748;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 744;
	            this.match(JavaParser.COMMA);
	            this.state = 745;
	            this.qualifiedName();
	            this.state = 750;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameters() {
	    let localctx = new FormalParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, JavaParser.RULE_formalParameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 751;
	        this.match(JavaParser.LPAREN);
	        this.state = 763;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3492430120) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 2795510603) !== 0) || _la===67 || _la===124 || _la===129) {
	            this.state = 754;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 752;
	                this.receiverParameter();
	                break;

	            case 2:
	                this.state = 753;
	                this.formalParameter();
	                break;

	            }
	            this.state = 760;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 756;
	                this.match(JavaParser.COMMA);
	                this.state = 757;
	                this.formalParameterList();
	                this.state = 762;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 765;
	        this.match(JavaParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiverParameter() {
	    let localctx = new ReceiverParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, JavaParser.RULE_receiverParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 767;
	        this.typeType();
	        this.state = 773;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 17)) & ~0x1f) === 0 && ((1 << (_la - 17)) & 757874689) !== 0) || ((((_la - 56)) & ~0x1f) === 0 && ((1 << (_la - 56)) & 3381) !== 0) || _la===129) {
	            this.state = 768;
	            this.identifier();
	            this.state = 769;
	            this.match(JavaParser.DOT);
	            this.state = 775;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 776;
	        this.match(JavaParser.THIS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, JavaParser.RULE_formalParameterList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 778;
	        this.formalParameter();
	        this.state = 783;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 779;
	                this.match(JavaParser.COMMA);
	                this.state = 780;
	                this.formalParameter(); 
	            }
	            this.state = 785;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameter() {
	    let localctx = new FormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, JavaParser.RULE_formalParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 789;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 786;
	                this.variableModifier(); 
	            }
	            this.state = 791;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
	        }

	        this.state = 792;
	        this.typeType();
	        this.state = 800;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===124 || _la===125) {
	            this.state = 796;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===124) {
	                this.state = 793;
	                this.annotation();
	                this.state = 798;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 799;
	            this.match(JavaParser.ELLIPSIS);
	        }

	        this.state = 802;
	        this.variableDeclaratorId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaLVTIList() {
	    let localctx = new LambdaLVTIListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, JavaParser.RULE_lambdaLVTIList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 804;
	        this.lambdaLVTIParameter();
	        this.state = 809;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 805;
	            this.match(JavaParser.COMMA);
	            this.state = 806;
	            this.lambdaLVTIParameter();
	            this.state = 811;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaLVTIParameter() {
	    let localctx = new LambdaLVTIParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, JavaParser.RULE_lambdaLVTIParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 815;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19 || _la===124) {
	            this.state = 812;
	            this.variableModifier();
	            this.state = 817;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 818;
	        this.match(JavaParser.VAR);
	        this.state = 819;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedName() {
	    let localctx = new QualifiedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, JavaParser.RULE_qualifiedName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 821;
	        this.identifier();
	        this.state = 826;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 822;
	                this.match(JavaParser.DOT);
	                this.state = 823;
	                this.identifier(); 
	            }
	            this.state = 828;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, JavaParser.RULE_literal);
	    try {
	        this.state = 836;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 829;
	            this.integerLiteral();
	            break;
	        case 72:
	        case 73:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 830;
	            this.floatLiteral();
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 831;
	            this.match(JavaParser.CHAR_LITERAL);
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 832;
	            this.match(JavaParser.STRING_LITERAL);
	            break;
	        case 74:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 833;
	            this.match(JavaParser.BOOL_LITERAL);
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 834;
	            this.match(JavaParser.NULL_LITERAL);
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 835;
	            this.match(JavaParser.TEXT_BLOCK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerLiteral() {
	    let localctx = new IntegerLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, JavaParser.RULE_integerLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 838;
	        _la = this._input.LA(1);
	        if(!(((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floatLiteral() {
	    let localctx = new FloatLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, JavaParser.RULE_floatLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 840;
	        _la = this._input.LA(1);
	        if(!(_la===72 || _la===73)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	altAnnotationQualifiedName() {
	    let localctx = new AltAnnotationQualifiedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, JavaParser.RULE_altAnnotationQualifiedName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 847;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 17)) & ~0x1f) === 0 && ((1 << (_la - 17)) & 757874689) !== 0) || ((((_la - 56)) & ~0x1f) === 0 && ((1 << (_la - 56)) & 3381) !== 0) || _la===129) {
	            this.state = 842;
	            this.identifier();
	            this.state = 843;
	            this.match(JavaParser.DOT);
	            this.state = 849;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 850;
	        this.match(JavaParser.AT);
	        this.state = 851;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, JavaParser.RULE_annotation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 853;
	        this.match(JavaParser.AT);
	        this.state = 854;
	        this.qualifiedName();
	        this.state = 857;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===79) {
	            this.state = 856;
	            this.annotationFieldValues();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationFieldValues() {
	    let localctx = new AnnotationFieldValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, JavaParser.RULE_annotationFieldValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 859;
	        this.match(JavaParser.LPAREN);
	        this.state = 868;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        if(la_===1) {
	            this.state = 860;
	            this.annotationFieldValue();
	            this.state = 865;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 861;
	                this.match(JavaParser.COMMA);
	                this.state = 862;
	                this.annotationFieldValue();
	                this.state = 867;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 870;
	        this.match(JavaParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationFieldValue() {
	    let localctx = new AnnotationFieldValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, JavaParser.RULE_annotationFieldValue);
	    try {
	        this.state = 878;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 872;
	            if (!(  this.IsNotIdentifierAssign() )) {
	                throw new antlr4.error.FailedPredicateException(this, " this.IsNotIdentifierAssign() ");
	            }
	            this.state = 873;
	            this.annotationValue();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 874;
	            this.identifier();
	            this.state = 875;
	            this.match(JavaParser.ASSIGN);
	            this.state = 876;
	            this.annotationValue();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationValue() {
	    let localctx = new AnnotationValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, JavaParser.RULE_annotationValue);
	    var _la = 0;
	    try {
	        this.state = 897;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 880;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 881;
	            this.annotation();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 882;
	            this.match(JavaParser.LBRACE);
	            this.state = 891;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3491905832) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 3130420525) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 117489663) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 276824079) !== 0)) {
	                this.state = 883;
	                this.annotationValue();
	                this.state = 888;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 884;
	                        this.match(JavaParser.COMMA);
	                        this.state = 885;
	                        this.annotationValue(); 
	                    }
	                    this.state = 890;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
	                }

	            }

	            this.state = 894;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===86) {
	                this.state = 893;
	                this.match(JavaParser.COMMA);
	            }

	            this.state = 896;
	            this.match(JavaParser.RBRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValue() {
	    let localctx = new ElementValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, JavaParser.RULE_elementValue);
	    try {
	        this.state = 902;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 899;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 900;
	            this.annotation();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 901;
	            this.elementValueArrayInitializer();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValueArrayInitializer() {
	    let localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, JavaParser.RULE_elementValueArrayInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 904;
	        this.match(JavaParser.LBRACE);
	        this.state = 913;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3491905832) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 3130420525) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 117489663) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 276824079) !== 0)) {
	            this.state = 905;
	            this.elementValue();
	            this.state = 910;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,100,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 906;
	                    this.match(JavaParser.COMMA);
	                    this.state = 907;
	                    this.elementValue(); 
	                }
	                this.state = 912;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,100,this._ctx);
	            }

	        }

	        this.state = 916;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===86) {
	            this.state = 915;
	            this.match(JavaParser.COMMA);
	        }

	        this.state = 918;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeDeclaration() {
	    let localctx = new AnnotationTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, JavaParser.RULE_annotationTypeDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 920;
	        this.match(JavaParser.AT);
	        this.state = 921;
	        this.match(JavaParser.INTERFACE);
	        this.state = 922;
	        this.identifier();
	        this.state = 923;
	        this.annotationTypeBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeBody() {
	    let localctx = new AnnotationTypeBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, JavaParser.RULE_annotationTypeBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 925;
	        this.match(JavaParser.LBRACE);
	        this.state = 929;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4029367082) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3071533021) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 2097165) !== 0) || _la===124 || _la===129) {
	            this.state = 926;
	            this.annotationTypeElementDeclaration();
	            this.state = 931;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 932;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeElementDeclaration() {
	    let localctx = new AnnotationTypeElementDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, JavaParser.RULE_annotationTypeElementDeclaration);
	    try {
	        this.state = 942;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 3:
	        case 5:
	        case 8:
	        case 9:
	        case 14:
	        case 16:
	        case 17:
	        case 19:
	        case 21:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 36:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 52:
	        case 56:
	        case 57:
	        case 58:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 66:
	        case 67:
	        case 124:
	        case 129:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 937;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,104,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 934;
	                    this.modifier(); 
	                }
	                this.state = 939;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,104,this._ctx);
	            }

	            this.state = 940;
	            this.annotationTypeElementRest();
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 941;
	            this.match(JavaParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeElementRest() {
	    let localctx = new AnnotationTypeElementRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, JavaParser.RULE_annotationTypeElementRest);
	    try {
	        this.state = 968;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 944;
	            this.typeType();
	            this.state = 945;
	            this.annotationMethodOrConstantRest();
	            this.state = 946;
	            this.match(JavaParser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 948;
	            this.classDeclaration();
	            this.state = 950;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	            if(la_===1) {
	                this.state = 949;
	                this.match(JavaParser.SEMI);

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 952;
	            this.interfaceDeclaration();
	            this.state = 954;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	            if(la_===1) {
	                this.state = 953;
	                this.match(JavaParser.SEMI);

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 956;
	            this.enumDeclaration();
	            this.state = 958;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	            if(la_===1) {
	                this.state = 957;
	                this.match(JavaParser.SEMI);

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 960;
	            this.annotationTypeDeclaration();
	            this.state = 962;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	            if(la_===1) {
	                this.state = 961;
	                this.match(JavaParser.SEMI);

	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 964;
	            this.recordDeclaration();
	            this.state = 966;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	            if(la_===1) {
	                this.state = 965;
	                this.match(JavaParser.SEMI);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationMethodOrConstantRest() {
	    let localctx = new AnnotationMethodOrConstantRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, JavaParser.RULE_annotationMethodOrConstantRest);
	    try {
	        this.state = 972;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 970;
	            this.annotationMethodRest();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 971;
	            this.annotationConstantRest();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationMethodRest() {
	    let localctx = new AnnotationMethodRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, JavaParser.RULE_annotationMethodRest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 974;
	        this.identifier();
	        this.state = 975;
	        this.match(JavaParser.LPAREN);
	        this.state = 976;
	        this.match(JavaParser.RPAREN);
	        this.state = 978;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12) {
	            this.state = 977;
	            this.defaultValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationConstantRest() {
	    let localctx = new AnnotationConstantRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, JavaParser.RULE_annotationConstantRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 980;
	        this.variableDeclarators();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValue() {
	    let localctx = new DefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, JavaParser.RULE_defaultValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 982;
	        this.match(JavaParser.DEFAULT);
	        this.state = 983;
	        this.elementValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleDeclaration() {
	    let localctx = new ModuleDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, JavaParser.RULE_moduleDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 988;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===124) {
	            this.state = 985;
	            this.annotation();
	            this.state = 990;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 992;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===35) {
	            this.state = 991;
	            this.match(JavaParser.OPEN);
	        }

	        this.state = 994;
	        this.match(JavaParser.MODULE);
	        this.state = 995;
	        this.qualifiedName();
	        this.state = 996;
	        this.match(JavaParser.LBRACE);
	        this.state = 1000;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===17 || ((((_la - 36)) & ~0x1f) === 0 && ((1 << (_la - 36)) & 16777505) !== 0)) {
	            this.state = 997;
	            this.moduleDirective();
	            this.state = 1002;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1003;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleDirective() {
	    let localctx = new ModuleDirectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, JavaParser.RULE_moduleDirective);
	    var _la = 0;
	    try {
	        this.state = 1062;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1005;
	            this.match(JavaParser.REQUIRES);
	            this.state = 1009;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1006;
	                    this.requiresModifier(); 
	                }
	                this.state = 1011;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
	            }

	            this.state = 1012;
	            this.qualifiedName();
	            this.state = 1013;
	            this.match(JavaParser.SEMI);
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1015;
	            this.match(JavaParser.EXPORTS);
	            this.state = 1016;
	            this.qualifiedName();
	            this.state = 1026;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56) {
	                this.state = 1017;
	                this.match(JavaParser.TO);
	                this.state = 1018;
	                this.qualifiedName();
	                this.state = 1023;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===86) {
	                    this.state = 1019;
	                    this.match(JavaParser.COMMA);
	                    this.state = 1020;
	                    this.qualifiedName();
	                    this.state = 1025;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1028;
	            this.match(JavaParser.SEMI);
	            break;
	        case 36:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1030;
	            this.match(JavaParser.OPENS);
	            this.state = 1031;
	            this.qualifiedName();
	            this.state = 1041;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56) {
	                this.state = 1032;
	                this.match(JavaParser.TO);
	                this.state = 1033;
	                this.qualifiedName();
	                this.state = 1038;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===86) {
	                    this.state = 1034;
	                    this.match(JavaParser.COMMA);
	                    this.state = 1035;
	                    this.qualifiedName();
	                    this.state = 1040;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1043;
	            this.match(JavaParser.SEMI);
	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1045;
	            this.match(JavaParser.USES);
	            this.state = 1046;
	            this.qualifiedName();
	            this.state = 1047;
	            this.match(JavaParser.SEMI);
	            break;
	        case 41:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1049;
	            this.match(JavaParser.PROVIDES);
	            this.state = 1050;
	            this.qualifiedName();
	            this.state = 1051;
	            this.match(JavaParser.WITH);
	            this.state = 1052;
	            this.qualifiedName();
	            this.state = 1057;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 1053;
	                this.match(JavaParser.COMMA);
	                this.state = 1054;
	                this.qualifiedName();
	                this.state = 1059;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1060;
	            this.match(JavaParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requiresModifier() {
	    let localctx = new RequiresModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, JavaParser.RULE_requiresModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1064;
	        _la = this._input.LA(1);
	        if(!(_la===48 || _la===58)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordDeclaration() {
	    let localctx = new RecordDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, JavaParser.RULE_recordDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1066;
	        this.match(JavaParser.RECORD);
	        this.state = 1067;
	        this.identifier();
	        this.state = 1069;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 1068;
	            this.typeParameters();
	        }

	        this.state = 1071;
	        this.recordHeader();
	        this.state = 1074;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 1072;
	            this.match(JavaParser.IMPLEMENTS);
	            this.state = 1073;
	            this.typeList();
	        }

	        this.state = 1076;
	        this.recordBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordHeader() {
	    let localctx = new RecordHeaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, JavaParser.RULE_recordHeader);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1078;
	        this.match(JavaParser.LPAREN);
	        this.state = 1080;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3491905832) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 2795510603) !== 0) || _la===67 || _la===124 || _la===129) {
	            this.state = 1079;
	            this.recordComponentList();
	        }

	        this.state = 1082;
	        this.match(JavaParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordComponentList() {
	    let localctx = new RecordComponentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, JavaParser.RULE_recordComponentList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1084;
	        this.recordComponent();
	        this.state = 1089;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,127,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1085;
	                this.match(JavaParser.COMMA);
	                this.state = 1086;
	                this.recordComponent(); 
	            }
	            this.state = 1091;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,127,this._ctx);
	        }

	        this.state = 1092;
	        if (!(  this.DoLastRecordComponent() )) {
	            throw new antlr4.error.FailedPredicateException(this, " this.DoLastRecordComponent() ");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordComponent() {
	    let localctx = new RecordComponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, JavaParser.RULE_recordComponent);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1097;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1094;
	                this.annotation(); 
	            }
	            this.state = 1099;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
	        }

	        this.state = 1100;
	        this.typeType();
	        this.state = 1108;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===124 || _la===125) {
	            this.state = 1104;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===124) {
	                this.state = 1101;
	                this.annotation();
	                this.state = 1106;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1107;
	            this.match(JavaParser.ELLIPSIS);
	        }

	        this.state = 1110;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordBody() {
	    let localctx = new RecordBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, JavaParser.RULE_recordBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1112;
	        this.match(JavaParser.LBRACE);
	        this.state = 1117;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4029367082) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4145274845) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 69337101) !== 0) || _la===124 || _la===129) {
	            this.state = 1115;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1113;
	                this.classBodyDeclaration();
	                break;

	            case 2:
	                this.state = 1114;
	                this.compactConstructorDeclaration();
	                break;

	            }
	            this.state = 1119;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1120;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, JavaParser.RULE_block);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1122;
	        this.match(JavaParser.LBRACE);
	        this.state = 1126;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4050348862) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 3200253935) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 236027903) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 276824079) !== 0)) {
	            this.state = 1123;
	            this.blockStatement();
	            this.state = 1128;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1129;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatement() {
	    let localctx = new BlockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, JavaParser.RULE_blockStatement);
	    try {
	        this.state = 1136;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1131;
	            this.localVariableDeclaration();
	            this.state = 1132;
	            this.match(JavaParser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1134;
	            this.localTypeDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1135;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclaration() {
	    let localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, JavaParser.RULE_localVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1141;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,135,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1138;
	                this.variableModifier(); 
	            }
	            this.state = 1143;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,135,this._ctx);
	        }

	        this.state = 1152;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1144;
	            this.match(JavaParser.VAR);
	            this.state = 1145;
	            this.identifier();
	            this.state = 1146;
	            this.match(JavaParser.ASSIGN);
	            this.state = 1147;
	            this.expression(0);
	            break;

	        case 2:
	            this.state = 1149;
	            this.typeType();
	            this.state = 1150;
	            this.variableDeclarators();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, JavaParser.RULE_identifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1154;
	        _la = this._input.LA(1);
	        if(!(((((_la - 17)) & ~0x1f) === 0 && ((1 << (_la - 17)) & 757874689) !== 0) || ((((_la - 56)) & ~0x1f) === 0 && ((1 << (_la - 56)) & 3381) !== 0) || _la===129)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeIdentifier() {
	    let localctx = new TypeIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, JavaParser.RULE_typeIdentifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1156;
	        _la = this._input.LA(1);
	        if(!(_la===17 || _la===31 || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 2191526467) !== 0) || _la===129)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localTypeDeclaration() {
	    let localctx = new LocalTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, JavaParser.RULE_localTypeDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1161;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || _la===19 || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 53601) !== 0) || _la===124) {
	            this.state = 1158;
	            this.classOrInterfaceModifier();
	            this.state = 1163;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1168;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 9:
	            this.state = 1164;
	            this.classDeclaration();
	            break;
	        case 29:
	            this.state = 1165;
	            this.interfaceDeclaration();
	            break;
	        case 43:
	            this.state = 1166;
	            this.recordDeclaration();
	            break;
	        case 16:
	            this.state = 1167;
	            this.enumDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, JavaParser.RULE_statement);
	    var _la = 0;
	    try {
	        this.state = 1293;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1170;
	            localctx.blockLabel = this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1171;
	            this.match(JavaParser.ASSERT);
	            this.state = 1172;
	            this.expression(0);
	            this.state = 1175;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===94) {
	                this.state = 1173;
	                this.match(JavaParser.COLON);
	                this.state = 1174;
	                this.expression(0);
	            }

	            this.state = 1177;
	            this.match(JavaParser.SEMI);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1179;
	            this.match(JavaParser.IF);
	            this.state = 1180;
	            this.match(JavaParser.LPAREN);
	            this.state = 1181;
	            this.expression(0);
	            this.state = 1182;
	            this.match(JavaParser.RPAREN);
	            this.state = 1183;
	            this.statement();
	            this.state = 1186;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
	            if(la_===1) {
	                this.state = 1184;
	                this.match(JavaParser.ELSE);
	                this.state = 1185;
	                this.statement();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1188;
	            this.match(JavaParser.FOR);
	            this.state = 1189;
	            this.match(JavaParser.LPAREN);
	            this.state = 1190;
	            this.forControl();
	            this.state = 1191;
	            this.match(JavaParser.RPAREN);
	            this.state = 1192;
	            this.statement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1194;
	            this.match(JavaParser.WHILE);
	            this.state = 1195;
	            this.match(JavaParser.LPAREN);
	            this.state = 1196;
	            this.expression(0);
	            this.state = 1197;
	            this.match(JavaParser.RPAREN);
	            this.state = 1198;
	            this.statement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1200;
	            this.match(JavaParser.DO);
	            this.state = 1201;
	            this.statement();
	            this.state = 1202;
	            this.match(JavaParser.WHILE);
	            this.state = 1203;
	            this.match(JavaParser.LPAREN);
	            this.state = 1204;
	            this.expression(0);
	            this.state = 1205;
	            this.match(JavaParser.RPAREN);
	            this.state = 1206;
	            this.match(JavaParser.SEMI);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1208;
	            this.match(JavaParser.TRY);
	            this.state = 1209;
	            this.block();
	            this.state = 1219;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 7:
	                this.state = 1211; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 1210;
	                    this.catchClause();
	                    this.state = 1213; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===7);
	                this.state = 1216;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===20) {
	                    this.state = 1215;
	                    this.finallyBlock();
	                }

	                break;
	            case 20:
	                this.state = 1218;
	                this.finallyBlock();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1221;
	            this.match(JavaParser.TRY);
	            this.state = 1222;
	            this.resourceSpecification();
	            this.state = 1223;
	            this.block();
	            this.state = 1227;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===7) {
	                this.state = 1224;
	                this.catchClause();
	                this.state = 1229;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1231;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 1230;
	                this.finallyBlock();
	            }

	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1233;
	            this.match(JavaParser.SWITCH);
	            this.state = 1234;
	            this.match(JavaParser.LPAREN);
	            this.state = 1235;
	            this.expression(0);
	            this.state = 1236;
	            this.match(JavaParser.RPAREN);
	            this.state = 1237;
	            this.match(JavaParser.LBRACE);
	            this.state = 1241;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,146,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1238;
	                    this.switchBlockStatementGroup(); 
	                }
	                this.state = 1243;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,146,this._ctx);
	            }

	            this.state = 1247;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===6 || _la===12) {
	                this.state = 1244;
	                this.switchLabel();
	                this.state = 1249;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1250;
	            this.match(JavaParser.RBRACE);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1252;
	            this.match(JavaParser.SYNCHRONIZED);
	            this.state = 1253;
	            this.match(JavaParser.LPAREN);
	            this.state = 1254;
	            this.expression(0);
	            this.state = 1255;
	            this.match(JavaParser.RPAREN);
	            this.state = 1256;
	            this.block();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1258;
	            this.match(JavaParser.RETURN);
	            this.state = 1260;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3491905832) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 3130420525) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 117456895) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 276824079) !== 0)) {
	                this.state = 1259;
	                this.expression(0);
	            }

	            this.state = 1262;
	            this.match(JavaParser.SEMI);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1263;
	            this.match(JavaParser.THROW);
	            this.state = 1264;
	            this.expression(0);
	            this.state = 1265;
	            this.match(JavaParser.SEMI);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1267;
	            this.match(JavaParser.BREAK);
	            this.state = 1269;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 17)) & ~0x1f) === 0 && ((1 << (_la - 17)) & 757874689) !== 0) || ((((_la - 56)) & ~0x1f) === 0 && ((1 << (_la - 56)) & 3381) !== 0) || _la===129) {
	                this.state = 1268;
	                this.identifier();
	            }

	            this.state = 1271;
	            this.match(JavaParser.SEMI);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1272;
	            this.match(JavaParser.CONTINUE);
	            this.state = 1274;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 17)) & ~0x1f) === 0 && ((1 << (_la - 17)) & 757874689) !== 0) || ((((_la - 56)) & ~0x1f) === 0 && ((1 << (_la - 56)) & 3381) !== 0) || _la===129) {
	                this.state = 1273;
	                this.identifier();
	            }

	            this.state = 1276;
	            this.match(JavaParser.SEMI);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1277;
	            this.match(JavaParser.YIELD);
	            this.state = 1278;
	            this.expression(0);
	            this.state = 1279;
	            this.match(JavaParser.SEMI);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1281;
	            this.match(JavaParser.SEMI);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1282;
	            localctx.statementExpression = this.expression(0);
	            this.state = 1283;
	            this.match(JavaParser.SEMI);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1285;
	            this.switchExpression();
	            this.state = 1287;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
	            if(la_===1) {
	                this.state = 1286;
	                this.match(JavaParser.SEMI);

	            }
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1289;
	            localctx.identifierLabel = this.identifier();
	            this.state = 1290;
	            this.match(JavaParser.COLON);
	            this.state = 1291;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchClause() {
	    let localctx = new CatchClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, JavaParser.RULE_catchClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1295;
	        this.match(JavaParser.CATCH);
	        this.state = 1296;
	        this.match(JavaParser.LPAREN);
	        this.state = 1300;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19 || _la===124) {
	            this.state = 1297;
	            this.variableModifier();
	            this.state = 1302;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1303;
	        this.catchType();
	        this.state = 1304;
	        this.identifier();
	        this.state = 1305;
	        this.match(JavaParser.RPAREN);
	        this.state = 1306;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchType() {
	    let localctx = new CatchTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, JavaParser.RULE_catchType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1308;
	        this.qualifiedName();
	        this.state = 1313;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===108) {
	            this.state = 1309;
	            this.match(JavaParser.BITOR);
	            this.state = 1310;
	            this.qualifiedName();
	            this.state = 1315;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finallyBlock() {
	    let localctx = new FinallyBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, JavaParser.RULE_finallyBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1316;
	        this.match(JavaParser.FINALLY);
	        this.state = 1317;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceSpecification() {
	    let localctx = new ResourceSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, JavaParser.RULE_resourceSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1319;
	        this.match(JavaParser.LPAREN);
	        this.state = 1320;
	        this.resources();
	        this.state = 1322;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===85) {
	            this.state = 1321;
	            this.match(JavaParser.SEMI);
	        }

	        this.state = 1324;
	        this.match(JavaParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resources() {
	    let localctx = new ResourcesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, JavaParser.RULE_resources);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1326;
	        this.resource();
	        this.state = 1331;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,156,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1327;
	                this.match(JavaParser.SEMI);
	                this.state = 1328;
	                this.resource(); 
	            }
	            this.state = 1333;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,156,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource() {
	    let localctx = new ResourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, JavaParser.RULE_resource);
	    var _la = 0;
	    try {
	        this.state = 1351;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1337;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===19 || _la===124) {
	                this.state = 1334;
	                this.variableModifier();
	                this.state = 1339;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1345;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1340;
	                this.classOrInterfaceType();
	                this.state = 1341;
	                this.variableDeclaratorId();
	                break;

	            case 2:
	                this.state = 1343;
	                this.match(JavaParser.VAR);
	                this.state = 1344;
	                this.identifier();
	                break;

	            }
	            this.state = 1347;
	            this.match(JavaParser.ASSIGN);
	            this.state = 1348;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1350;
	            this.qualifiedName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchBlockStatementGroup() {
	    let localctx = new SwitchBlockStatementGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, JavaParser.RULE_switchBlockStatementGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1356; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1353;
	            this.switchLabel();
	            this.state = 1354;
	            this.match(JavaParser.COLON);
	            this.state = 1358; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===6 || _la===12);
	        this.state = 1361; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1360;
	            this.blockStatement();
	            this.state = 1363; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4050348862) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 3200253935) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 236027903) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 276824079) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchLabel() {
	    let localctx = new SwitchLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, JavaParser.RULE_switchLabel);
	    try {
	        this.state = 1374;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1365;
	            this.match(JavaParser.CASE);
	            this.state = 1371;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1366;
	                localctx.constantExpression = this.expression(0);
	                break;

	            case 2:
	                this.state = 1367;
	                localctx.enumConstantName = this.match(JavaParser.IDENTIFIER);
	                break;

	            case 3:
	                this.state = 1368;
	                this.typeType();
	                this.state = 1369;
	                localctx.varName = this.identifier();
	                break;

	            }
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1373;
	            this.match(JavaParser.DEFAULT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forControl() {
	    let localctx = new ForControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, JavaParser.RULE_forControl);
	    var _la = 0;
	    try {
	        this.state = 1388;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1376;
	            this.enhancedForControl();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1378;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3492430120) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 3130420525) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 117456895) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 276824079) !== 0)) {
	                this.state = 1377;
	                this.forInit();
	            }

	            this.state = 1380;
	            this.match(JavaParser.SEMI);
	            this.state = 1382;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3491905832) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 3130420525) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 117456895) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 276824079) !== 0)) {
	                this.state = 1381;
	                this.expression(0);
	            }

	            this.state = 1384;
	            this.match(JavaParser.SEMI);
	            this.state = 1386;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3491905832) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 3130420525) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 117456895) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 276824079) !== 0)) {
	                this.state = 1385;
	                localctx.forUpdate = this.expressionList();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forInit() {
	    let localctx = new ForInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, JavaParser.RULE_forInit);
	    try {
	        this.state = 1392;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1390;
	            this.localVariableDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1391;
	            this.expressionList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enhancedForControl() {
	    let localctx = new EnhancedForControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, JavaParser.RULE_enhancedForControl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1397;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,169,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1394;
	                this.variableModifier(); 
	            }
	            this.state = 1399;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,169,this._ctx);
	        }

	        this.state = 1402;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1400;
	            this.typeType();
	            break;

	        case 2:
	            this.state = 1401;
	            this.match(JavaParser.VAR);
	            break;

	        }
	        this.state = 1404;
	        this.variableDeclaratorId();
	        this.state = 1405;
	        this.match(JavaParser.COLON);
	        this.state = 1406;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, JavaParser.RULE_expressionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1408;
	        this.expression(0);
	        this.state = 1413;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1409;
	            this.match(JavaParser.COMMA);
	            this.state = 1410;
	            this.expression(0);
	            this.state = 1415;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodCall() {
	    let localctx = new MethodCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, JavaParser.RULE_methodCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1419;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 17:
	        case 31:
	        case 35:
	        case 36:
	        case 38:
	        case 41:
	        case 43:
	        case 44:
	        case 46:
	        case 56:
	        case 58:
	        case 60:
	        case 61:
	        case 64:
	        case 66:
	        case 67:
	        case 129:
	            this.state = 1416;
	            this.identifier();
	            break;
	        case 53:
	            this.state = 1417;
	            this.match(JavaParser.THIS);
	            break;
	        case 50:
	            this.state = 1418;
	            this.match(JavaParser.SUPER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1421;
	        this.arguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 198;
	    this.enterRecursionRule(localctx, 198, JavaParser.RULE_expression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1466;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PrimaryExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1424;
	            this.primary();
	            break;

	        case 2:
	            localctx = new MethodCallExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1425;
	            this.methodCall();
	            break;

	        case 3:
	            localctx = new MethodReferenceExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1426;
	            this.typeType();
	            this.state = 1427;
	            this.match(JavaParser.COLONCOLON);
	            this.state = 1433;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 17:
	            case 31:
	            case 35:
	            case 36:
	            case 38:
	            case 41:
	            case 43:
	            case 44:
	            case 46:
	            case 56:
	            case 58:
	            case 60:
	            case 61:
	            case 64:
	            case 66:
	            case 67:
	            case 90:
	            case 129:
	                this.state = 1429;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===90) {
	                    this.state = 1428;
	                    this.typeArguments();
	                }

	                this.state = 1431;
	                this.identifier();
	                break;
	            case 33:
	                this.state = 1432;
	                this.match(JavaParser.NEW);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            localctx = new MethodReferenceExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1435;
	            this.classType();
	            this.state = 1436;
	            this.match(JavaParser.COLONCOLON);
	            this.state = 1438;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 1437;
	                this.typeArguments();
	            }

	            this.state = 1440;
	            this.match(JavaParser.NEW);
	            break;

	        case 5:
	            localctx = new ExpressionSwitchContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1442;
	            this.switchExpression();
	            break;

	        case 6:
	            localctx = new UnaryOperatorExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1443;
	            localctx.prefix = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 91)) & ~0x1f) === 0 && ((1 << (_la - 91)) & 15363) !== 0))) {
	                localctx.prefix = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1444;
	            this.expression(17);
	            break;

	        case 7:
	            localctx = new CastExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1445;
	            this.match(JavaParser.LPAREN);
	            this.state = 1449;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,176,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1446;
	                    this.annotation(); 
	                }
	                this.state = 1451;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,176,this._ctx);
	            }

	            this.state = 1452;
	            this.typeType();
	            this.state = 1457;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===107) {
	                this.state = 1453;
	                this.match(JavaParser.BITAND);
	                this.state = 1454;
	                this.typeType();
	                this.state = 1459;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1460;
	            this.match(JavaParser.RPAREN);
	            this.state = 1461;
	            this.expression(16);
	            break;

	        case 8:
	            localctx = new ObjectCreationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1463;
	            this.match(JavaParser.NEW);
	            this.state = 1464;
	            this.creator();
	            break;

	        case 9:
	            localctx = new ExpressionLambdaContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1465;
	            this.lambdaExpression();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1551;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,185,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1549;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1468;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 1469;
	                    localctx.bop = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 35) !== 0))) {
	                        localctx.bop = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1470;
	                    this.expression(15);
	                    break;

	                case 2:
	                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1471;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 1472;
	                    localctx.bop = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===103 || _la===104)) {
	                        localctx.bop = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1473;
	                    this.expression(14);
	                    break;

	                case 3:
	                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1474;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 1482;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1475;
	                        this.match(JavaParser.LT);
	                        this.state = 1476;
	                        this.match(JavaParser.LT);
	                        break;

	                    case 2:
	                        this.state = 1477;
	                        this.match(JavaParser.GT);
	                        this.state = 1478;
	                        this.match(JavaParser.GT);
	                        this.state = 1479;
	                        this.match(JavaParser.GT);
	                        break;

	                    case 3:
	                        this.state = 1480;
	                        this.match(JavaParser.GT);
	                        this.state = 1481;
	                        this.match(JavaParser.GT);
	                        break;

	                    }
	                    this.state = 1484;
	                    this.expression(13);
	                    break;

	                case 4:
	                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1485;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 1486;
	                    localctx.bop = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 387) !== 0))) {
	                        localctx.bop = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1487;
	                    this.expression(12);
	                    break;

	                case 5:
	                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1488;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 1489;
	                    localctx.bop = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===95 || _la===98)) {
	                        localctx.bop = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1490;
	                    this.expression(10);
	                    break;

	                case 6:
	                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1491;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 1492;
	                    localctx.bop = this.match(JavaParser.BITAND);
	                    this.state = 1493;
	                    this.expression(9);
	                    break;

	                case 7:
	                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1494;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 1495;
	                    localctx.bop = this.match(JavaParser.CARET);
	                    this.state = 1496;
	                    this.expression(8);
	                    break;

	                case 8:
	                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1497;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 1498;
	                    localctx.bop = this.match(JavaParser.BITOR);
	                    this.state = 1499;
	                    this.expression(7);
	                    break;

	                case 9:
	                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1500;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 1501;
	                    localctx.bop = this.match(JavaParser.AND);
	                    this.state = 1502;
	                    this.expression(6);
	                    break;

	                case 10:
	                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1503;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 1504;
	                    localctx.bop = this.match(JavaParser.OR);
	                    this.state = 1505;
	                    this.expression(5);
	                    break;

	                case 11:
	                    localctx = new TernaryExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1506;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1507;
	                    localctx.bop = this.match(JavaParser.QUESTION);
	                    this.state = 1508;
	                    this.expression(0);
	                    this.state = 1509;
	                    this.match(JavaParser.COLON);
	                    this.state = 1510;
	                    this.expression(3);
	                    break;

	                case 12:
	                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1512;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1513;
	                    localctx.bop = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 88)) & ~0x1f) === 0 && ((1 << (_la - 88)) & 4286578689) !== 0) || _la===120 || _la===121)) {
	                        localctx.bop = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1514;
	                    this.expression(2);
	                    break;

	                case 13:
	                    localctx = new SquareBracketExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1515;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 1516;
	                    this.match(JavaParser.LBRACK);
	                    this.state = 1517;
	                    this.expression(0);
	                    this.state = 1518;
	                    this.match(JavaParser.RBRACK);
	                    break;

	                case 14:
	                    localctx = new MemberReferenceExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1520;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 1521;
	                    localctx.bop = this.match(JavaParser.DOT);
	                    this.state = 1533;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1522;
	                        this.identifier();
	                        break;

	                    case 2:
	                        this.state = 1523;
	                        this.methodCall();
	                        break;

	                    case 3:
	                        this.state = 1524;
	                        this.match(JavaParser.THIS);
	                        break;

	                    case 4:
	                        this.state = 1525;
	                        this.match(JavaParser.NEW);
	                        this.state = 1527;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===90) {
	                            this.state = 1526;
	                            this.nonWildcardTypeArguments();
	                        }

	                        this.state = 1529;
	                        this.innerCreator();
	                        break;

	                    case 5:
	                        this.state = 1530;
	                        this.match(JavaParser.SUPER);
	                        this.state = 1531;
	                        this.superSuffix();
	                        break;

	                    case 6:
	                        this.state = 1532;
	                        this.explicitGenericInvocation();
	                        break;

	                    }
	                    break;

	                case 15:
	                    localctx = new MethodReferenceExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1535;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 1536;
	                    this.match(JavaParser.COLONCOLON);
	                    this.state = 1538;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===90) {
	                        this.state = 1537;
	                        this.typeArguments();
	                    }

	                    this.state = 1540;
	                    this.identifier();
	                    break;

	                case 16:
	                    localctx = new PostIncrementDecrementOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1541;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 1542;
	                    localctx.postfix = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===101 || _la===102)) {
	                        localctx.postfix = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;

	                case 17:
	                    localctx = new InstanceOfOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1543;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 1544;
	                    localctx.bop = this.match(JavaParser.INSTANCEOF);
	                    this.state = 1547;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1545;
	                        this.typeType();
	                        break;

	                    case 2:
	                        this.state = 1546;
	                        this.pattern();
	                        break;

	                    }
	                    break;

	                } 
	            }
	            this.state = 1553;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,185,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	pattern() {
	    let localctx = new PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, JavaParser.RULE_pattern);
	    var _la = 0;
	    try {
	        this.state = 1576;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1557;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,186,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1554;
	                    this.variableModifier(); 
	                }
	                this.state = 1559;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,186,this._ctx);
	            }

	            this.state = 1560;
	            this.typeType();
	            this.state = 1564;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===124) {
	                this.state = 1561;
	                this.annotation();
	                this.state = 1566;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1567;
	            this.variableDeclarators();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1569;
	            this.typeType();
	            this.state = 1570;
	            this.match(JavaParser.LPAREN);
	            this.state = 1572;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3492430120) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 2795510603) !== 0) || _la===67 || _la===124 || _la===129) {
	                this.state = 1571;
	                this.componentPatternList();
	            }

	            this.state = 1574;
	            this.match(JavaParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	componentPatternList() {
	    let localctx = new ComponentPatternListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, JavaParser.RULE_componentPatternList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1578;
	        this.componentPattern();
	        this.state = 1583;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1579;
	            this.match(JavaParser.COMMA);
	            this.state = 1580;
	            this.componentPattern();
	            this.state = 1585;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	componentPattern() {
	    let localctx = new ComponentPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, JavaParser.RULE_componentPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1586;
	        this.pattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaExpression() {
	    let localctx = new LambdaExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, JavaParser.RULE_lambdaExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1588;
	        this.lambdaParameters();
	        this.state = 1589;
	        this.match(JavaParser.ARROW);
	        this.state = 1590;
	        this.lambdaBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaParameters() {
	    let localctx = new LambdaParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, JavaParser.RULE_lambdaParameters);
	    var _la = 0;
	    try {
	        this.state = 1614;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1592;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1593;
	            this.match(JavaParser.LPAREN);
	            this.state = 1595;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3492430120) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 2795510603) !== 0) || _la===67 || _la===124 || _la===129) {
	                this.state = 1594;
	                this.formalParameterList();
	            }

	            this.state = 1597;
	            this.match(JavaParser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1598;
	            this.match(JavaParser.LPAREN);
	            this.state = 1599;
	            this.identifier();
	            this.state = 1604;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 1600;
	                this.match(JavaParser.COMMA);
	                this.state = 1601;
	                this.identifier();
	                this.state = 1606;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1607;
	            this.match(JavaParser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1609;
	            this.match(JavaParser.LPAREN);
	            this.state = 1611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19 || _la===61 || _la===124) {
	                this.state = 1610;
	                this.lambdaLVTIList();
	            }

	            this.state = 1613;
	            this.match(JavaParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaBody() {
	    let localctx = new LambdaBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, JavaParser.RULE_lambdaBody);
	    try {
	        this.state = 1618;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 17:
	        case 21:
	        case 28:
	        case 30:
	        case 31:
	        case 33:
	        case 35:
	        case 36:
	        case 38:
	        case 41:
	        case 43:
	        case 44:
	        case 46:
	        case 47:
	        case 50:
	        case 51:
	        case 53:
	        case 56:
	        case 58:
	        case 60:
	        case 61:
	        case 62:
	        case 64:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 90:
	        case 91:
	        case 92:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 124:
	        case 129:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1616;
	            this.expression(0);
	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1617;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, JavaParser.RULE_primary);
	    try {
	        this.state = 1638;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1620;
	            this.match(JavaParser.LPAREN);
	            this.state = 1621;
	            this.expression(0);
	            this.state = 1622;
	            this.match(JavaParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1624;
	            this.match(JavaParser.THIS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1625;
	            this.match(JavaParser.SUPER);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1626;
	            this.literal();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1627;
	            this.identifier();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1628;
	            this.typeTypeOrVoid();
	            this.state = 1629;
	            this.match(JavaParser.DOT);
	            this.state = 1630;
	            this.match(JavaParser.CLASS);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1632;
	            this.nonWildcardTypeArguments();
	            this.state = 1636;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 17:
	            case 31:
	            case 35:
	            case 36:
	            case 38:
	            case 41:
	            case 43:
	            case 44:
	            case 46:
	            case 50:
	            case 56:
	            case 58:
	            case 60:
	            case 61:
	            case 64:
	            case 66:
	            case 67:
	            case 129:
	                this.state = 1633;
	                this.explicitGenericInvocationSuffix();
	                break;
	            case 53:
	                this.state = 1634;
	                this.match(JavaParser.THIS);
	                this.state = 1635;
	                this.arguments();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchExpression() {
	    let localctx = new SwitchExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, JavaParser.RULE_switchExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1640;
	        this.match(JavaParser.SWITCH);
	        this.state = 1641;
	        this.match(JavaParser.LPAREN);
	        this.state = 1642;
	        this.expression(0);
	        this.state = 1643;
	        this.match(JavaParser.RPAREN);
	        this.state = 1644;
	        this.match(JavaParser.LBRACE);
	        this.state = 1648;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6 || _la===12) {
	            this.state = 1645;
	            this.switchLabeledRule();
	            this.state = 1650;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1651;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchLabeledRule() {
	    let localctx = new SwitchLabeledRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, JavaParser.RULE_switchLabeledRule);
	    var _la = 0;
	    try {
	        this.state = 1678;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1653;
	            this.match(JavaParser.CASE);
	            this.state = 1671;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1654;
	                this.expressionList();
	                break;

	            case 2:
	                this.state = 1655;
	                this.match(JavaParser.NULL_LITERAL);
	                this.state = 1658;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===86) {
	                    this.state = 1656;
	                    this.match(JavaParser.COMMA);
	                    this.state = 1657;
	                    this.match(JavaParser.DEFAULT);
	                }

	                break;

	            case 3:
	                this.state = 1660;
	                this.casePattern();
	                this.state = 1665;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===86) {
	                    this.state = 1661;
	                    this.match(JavaParser.COMMA);
	                    this.state = 1662;
	                    this.casePattern();
	                    this.state = 1667;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1669;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===64) {
	                    this.state = 1668;
	                    this.guard();
	                }

	                break;

	            }
	            this.state = 1673;
	            _la = this._input.LA(1);
	            if(!(_la===94 || _la===122)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1674;
	            this.switchRuleOutcome();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1675;
	            this.match(JavaParser.DEFAULT);
	            this.state = 1676;
	            _la = this._input.LA(1);
	            if(!(_la===94 || _la===122)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1677;
	            this.switchRuleOutcome();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	guard() {
	    let localctx = new GuardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, JavaParser.RULE_guard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1680;
	        this.match(JavaParser.WHEN);
	        this.state = 1681;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	casePattern() {
	    let localctx = new CasePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, JavaParser.RULE_casePattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1683;
	        this.pattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchRuleOutcome() {
	    let localctx = new SwitchRuleOutcomeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, JavaParser.RULE_switchRuleOutcome);
	    var _la = 0;
	    try {
	        this.state = 1692;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1685;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1689;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4050348862) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 3200253935) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 236027903) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 276824079) !== 0)) {
	                this.state = 1686;
	                this.blockStatement();
	                this.state = 1691;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrInterfaceType() {
	    let localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, JavaParser.RULE_classOrInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1694;
	        this.classType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	creator() {
	    let localctx = new CreatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, JavaParser.RULE_creator);
	    var _la = 0;
	    try {
	        this.state = 1705;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1697;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 1696;
	                this.nonWildcardTypeArguments();
	            }

	            this.state = 1699;
	            this.createdName();
	            this.state = 1700;
	            this.classCreatorRest();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1702;
	            this.createdName();
	            this.state = 1703;
	            this.arrayCreatorRest();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createdName() {
	    let localctx = new CreatedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, JavaParser.RULE_createdName);
	    var _la = 0;
	    try {
	        this.state = 1722;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 17:
	        case 31:
	        case 35:
	        case 36:
	        case 38:
	        case 41:
	        case 43:
	        case 44:
	        case 46:
	        case 56:
	        case 58:
	        case 60:
	        case 61:
	        case 64:
	        case 66:
	        case 67:
	        case 129:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1707;
	            this.identifier();
	            this.state = 1709;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 1708;
	                this.typeArgumentsOrDiamond();
	            }

	            this.state = 1718;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===87) {
	                this.state = 1711;
	                this.match(JavaParser.DOT);
	                this.state = 1712;
	                this.identifier();
	                this.state = 1714;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===90) {
	                    this.state = 1713;
	                    this.typeArgumentsOrDiamond();
	                }

	                this.state = 1720;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 21:
	        case 28:
	        case 30:
	        case 47:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1721;
	            this.primitiveType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	innerCreator() {
	    let localctx = new InnerCreatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, JavaParser.RULE_innerCreator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1724;
	        this.identifier();
	        this.state = 1726;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 1725;
	            this.nonWildcardTypeArgumentsOrDiamond();
	        }

	        this.state = 1728;
	        this.classCreatorRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayCreatorRest() {
	    let localctx = new ArrayCreatorRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, JavaParser.RULE_arrayCreatorRest);
	    var _la = 0;
	    try {
	        this.state = 1752;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1732; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1730;
	                this.match(JavaParser.LBRACK);
	                this.state = 1731;
	                this.match(JavaParser.RBRACK);
	                this.state = 1734; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===83);
	            this.state = 1736;
	            this.arrayInitializer();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1741; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1737;
	            		this.match(JavaParser.LBRACK);
	            		this.state = 1738;
	            		this.expression(0);
	            		this.state = 1739;
	            		this.match(JavaParser.RBRACK);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1743; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,214, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 1749;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,215,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1745;
	                    this.match(JavaParser.LBRACK);
	                    this.state = 1746;
	                    this.match(JavaParser.RBRACK); 
	                }
	                this.state = 1751;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,215,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classCreatorRest() {
	    let localctx = new ClassCreatorRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, JavaParser.RULE_classCreatorRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1754;
	        this.arguments();
	        this.state = 1756;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
	        if(la_===1) {
	            this.state = 1755;
	            this.classBody();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitGenericInvocation() {
	    let localctx = new ExplicitGenericInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, JavaParser.RULE_explicitGenericInvocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1758;
	        this.nonWildcardTypeArguments();
	        this.state = 1759;
	        this.explicitGenericInvocationSuffix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgumentsOrDiamond() {
	    let localctx = new TypeArgumentsOrDiamondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, JavaParser.RULE_typeArgumentsOrDiamond);
	    try {
	        this.state = 1764;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1761;
	            this.match(JavaParser.LT);
	            this.state = 1762;
	            this.match(JavaParser.GT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1763;
	            this.typeArguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonWildcardTypeArgumentsOrDiamond() {
	    let localctx = new NonWildcardTypeArgumentsOrDiamondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond);
	    try {
	        this.state = 1769;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1766;
	            this.match(JavaParser.LT);
	            this.state = 1767;
	            this.match(JavaParser.GT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1768;
	            this.nonWildcardTypeArguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonWildcardTypeArguments() {
	    let localctx = new NonWildcardTypeArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, JavaParser.RULE_nonWildcardTypeArguments);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1771;
	        this.match(JavaParser.LT);
	        this.state = 1772;
	        this.typeList();
	        this.state = 1773;
	        this.match(JavaParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeList() {
	    let localctx = new TypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, JavaParser.RULE_typeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1775;
	        this.typeType();
	        this.state = 1780;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1776;
	            this.match(JavaParser.COMMA);
	            this.state = 1777;
	            this.typeType();
	            this.state = 1782;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeType() {
	    let localctx = new TypeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, JavaParser.RULE_typeType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1786;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===124) {
	            this.state = 1783;
	            this.annotation();
	            this.state = 1788;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1791;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 17:
	        case 31:
	        case 35:
	        case 36:
	        case 38:
	        case 41:
	        case 43:
	        case 44:
	        case 46:
	        case 56:
	        case 58:
	        case 60:
	        case 61:
	        case 64:
	        case 66:
	        case 67:
	        case 129:
	            this.state = 1789;
	            this.classOrInterfaceType();
	            break;
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 21:
	        case 28:
	        case 30:
	        case 47:
	            this.state = 1790;
	            this.primitiveType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1803;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,224,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1796;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===124) {
	                    this.state = 1793;
	                    this.annotation();
	                    this.state = 1798;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1799;
	                this.match(JavaParser.LBRACK);
	                this.state = 1800;
	                this.match(JavaParser.RBRACK); 
	            }
	            this.state = 1805;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,224,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, JavaParser.RULE_primitiveType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1806;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 1344291112) !== 0) || _la===47)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArguments() {
	    let localctx = new TypeArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, JavaParser.RULE_typeArguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1808;
	        this.match(JavaParser.LT);
	        this.state = 1809;
	        this.typeArgument();
	        this.state = 1814;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1810;
	            this.match(JavaParser.COMMA);
	            this.state = 1811;
	            this.typeArgument();
	            this.state = 1816;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1817;
	        this.match(JavaParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	superSuffix() {
	    let localctx = new SuperSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, JavaParser.RULE_superSuffix);
	    var _la = 0;
	    try {
	        this.state = 1828;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 79:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1819;
	            this.arguments();
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1820;
	            this.match(JavaParser.DOT);
	            this.state = 1822;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 1821;
	                this.typeArguments();
	            }

	            this.state = 1824;
	            this.identifier();
	            this.state = 1826;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
	            if(la_===1) {
	                this.state = 1825;
	                this.arguments();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitGenericInvocationSuffix() {
	    let localctx = new ExplicitGenericInvocationSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, JavaParser.RULE_explicitGenericInvocationSuffix);
	    try {
	        this.state = 1835;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 50:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1830;
	            this.match(JavaParser.SUPER);
	            this.state = 1831;
	            this.superSuffix();
	            break;
	        case 17:
	        case 31:
	        case 35:
	        case 36:
	        case 38:
	        case 41:
	        case 43:
	        case 44:
	        case 46:
	        case 56:
	        case 58:
	        case 60:
	        case 61:
	        case 64:
	        case 66:
	        case 67:
	        case 129:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1832;
	            this.identifier();
	            this.state = 1833;
	            this.arguments();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, JavaParser.RULE_arguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1837;
	        this.match(JavaParser.LPAREN);
	        this.state = 1839;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3491905832) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 3130420525) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 117456895) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 276824079) !== 0)) {
	            this.state = 1838;
	            this.expressionList();
	        }

	        this.state = 1841;
	        this.match(JavaParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

JavaParser.EOF = antlr4.Token.EOF;
JavaParser.ABSTRACT = 1;
JavaParser.ASSERT = 2;
JavaParser.BOOLEAN = 3;
JavaParser.BREAK = 4;
JavaParser.BYTE = 5;
JavaParser.CASE = 6;
JavaParser.CATCH = 7;
JavaParser.CHAR = 8;
JavaParser.CLASS = 9;
JavaParser.CONST = 10;
JavaParser.CONTINUE = 11;
JavaParser.DEFAULT = 12;
JavaParser.DO = 13;
JavaParser.DOUBLE = 14;
JavaParser.ELSE = 15;
JavaParser.ENUM = 16;
JavaParser.EXPORTS = 17;
JavaParser.EXTENDS = 18;
JavaParser.FINAL = 19;
JavaParser.FINALLY = 20;
JavaParser.FLOAT = 21;
JavaParser.FOR = 22;
JavaParser.GOTO = 23;
JavaParser.IF = 24;
JavaParser.IMPLEMENTS = 25;
JavaParser.IMPORT = 26;
JavaParser.INSTANCEOF = 27;
JavaParser.INT = 28;
JavaParser.INTERFACE = 29;
JavaParser.LONG = 30;
JavaParser.MODULE = 31;
JavaParser.NATIVE = 32;
JavaParser.NEW = 33;
JavaParser.NON_SEALED = 34;
JavaParser.OPEN = 35;
JavaParser.OPENS = 36;
JavaParser.PACKAGE = 37;
JavaParser.PERMITS = 38;
JavaParser.PRIVATE = 39;
JavaParser.PROTECTED = 40;
JavaParser.PROVIDES = 41;
JavaParser.PUBLIC = 42;
JavaParser.RECORD = 43;
JavaParser.REQUIRES = 44;
JavaParser.RETURN = 45;
JavaParser.SEALED = 46;
JavaParser.SHORT = 47;
JavaParser.STATIC = 48;
JavaParser.STRICTFP = 49;
JavaParser.SUPER = 50;
JavaParser.SWITCH = 51;
JavaParser.SYNCHRONIZED = 52;
JavaParser.THIS = 53;
JavaParser.THROW = 54;
JavaParser.THROWS = 55;
JavaParser.TO = 56;
JavaParser.TRANSIENT = 57;
JavaParser.TRANSITIVE = 58;
JavaParser.TRY = 59;
JavaParser.USES = 60;
JavaParser.VAR = 61;
JavaParser.VOID = 62;
JavaParser.VOLATILE = 63;
JavaParser.WHEN = 64;
JavaParser.WHILE = 65;
JavaParser.WITH = 66;
JavaParser.YIELD = 67;
JavaParser.DECIMAL_LITERAL = 68;
JavaParser.HEX_LITERAL = 69;
JavaParser.OCT_LITERAL = 70;
JavaParser.BINARY_LITERAL = 71;
JavaParser.FLOAT_LITERAL = 72;
JavaParser.HEX_FLOAT_LITERAL = 73;
JavaParser.BOOL_LITERAL = 74;
JavaParser.CHAR_LITERAL = 75;
JavaParser.STRING_LITERAL = 76;
JavaParser.TEXT_BLOCK = 77;
JavaParser.NULL_LITERAL = 78;
JavaParser.LPAREN = 79;
JavaParser.RPAREN = 80;
JavaParser.LBRACE = 81;
JavaParser.RBRACE = 82;
JavaParser.LBRACK = 83;
JavaParser.RBRACK = 84;
JavaParser.SEMI = 85;
JavaParser.COMMA = 86;
JavaParser.DOT = 87;
JavaParser.ASSIGN = 88;
JavaParser.GT = 89;
JavaParser.LT = 90;
JavaParser.BANG = 91;
JavaParser.TILDE = 92;
JavaParser.QUESTION = 93;
JavaParser.COLON = 94;
JavaParser.EQUAL = 95;
JavaParser.LE = 96;
JavaParser.GE = 97;
JavaParser.NOTEQUAL = 98;
JavaParser.AND = 99;
JavaParser.OR = 100;
JavaParser.INC = 101;
JavaParser.DEC = 102;
JavaParser.ADD = 103;
JavaParser.SUB = 104;
JavaParser.MUL = 105;
JavaParser.DIV = 106;
JavaParser.BITAND = 107;
JavaParser.BITOR = 108;
JavaParser.CARET = 109;
JavaParser.MOD = 110;
JavaParser.ADD_ASSIGN = 111;
JavaParser.SUB_ASSIGN = 112;
JavaParser.MUL_ASSIGN = 113;
JavaParser.DIV_ASSIGN = 114;
JavaParser.AND_ASSIGN = 115;
JavaParser.OR_ASSIGN = 116;
JavaParser.XOR_ASSIGN = 117;
JavaParser.MOD_ASSIGN = 118;
JavaParser.LSHIFT_ASSIGN = 119;
JavaParser.RSHIFT_ASSIGN = 120;
JavaParser.URSHIFT_ASSIGN = 121;
JavaParser.ARROW = 122;
JavaParser.COLONCOLON = 123;
JavaParser.AT = 124;
JavaParser.ELLIPSIS = 125;
JavaParser.WS = 126;
JavaParser.COMMENT = 127;
JavaParser.LINE_COMMENT = 128;
JavaParser.IDENTIFIER = 129;

JavaParser.RULE_compilationUnit = 0;
JavaParser.RULE_modularCompulationUnit = 1;
JavaParser.RULE_packageDeclaration = 2;
JavaParser.RULE_importDeclaration = 3;
JavaParser.RULE_typeDeclaration = 4;
JavaParser.RULE_modifier = 5;
JavaParser.RULE_classOrInterfaceModifier = 6;
JavaParser.RULE_variableModifier = 7;
JavaParser.RULE_classDeclaration = 8;
JavaParser.RULE_typeParameters = 9;
JavaParser.RULE_typeParameter = 10;
JavaParser.RULE_typeBound = 11;
JavaParser.RULE_enumDeclaration = 12;
JavaParser.RULE_enumConstants = 13;
JavaParser.RULE_enumConstant = 14;
JavaParser.RULE_enumBodyDeclarations = 15;
JavaParser.RULE_interfaceDeclaration = 16;
JavaParser.RULE_classBody = 17;
JavaParser.RULE_interfaceBody = 18;
JavaParser.RULE_classBodyDeclaration = 19;
JavaParser.RULE_memberDeclaration = 20;
JavaParser.RULE_methodDeclaration = 21;
JavaParser.RULE_methodBody = 22;
JavaParser.RULE_typeTypeOrVoid = 23;
JavaParser.RULE_genericMethodDeclaration = 24;
JavaParser.RULE_genericConstructorDeclaration = 25;
JavaParser.RULE_constructorDeclaration = 26;
JavaParser.RULE_compactConstructorDeclaration = 27;
JavaParser.RULE_fieldDeclaration = 28;
JavaParser.RULE_interfaceBodyDeclaration = 29;
JavaParser.RULE_interfaceMemberDeclaration = 30;
JavaParser.RULE_constDeclaration = 31;
JavaParser.RULE_constantDeclarator = 32;
JavaParser.RULE_interfaceMethodDeclaration = 33;
JavaParser.RULE_interfaceMethodModifier = 34;
JavaParser.RULE_genericInterfaceMethodDeclaration = 35;
JavaParser.RULE_interfaceCommonBodyDeclaration = 36;
JavaParser.RULE_variableDeclarators = 37;
JavaParser.RULE_variableDeclarator = 38;
JavaParser.RULE_variableDeclaratorId = 39;
JavaParser.RULE_variableInitializer = 40;
JavaParser.RULE_arrayInitializer = 41;
JavaParser.RULE_classType = 42;
JavaParser.RULE_packageName = 43;
JavaParser.RULE_typeArgument = 44;
JavaParser.RULE_qualifiedNameList = 45;
JavaParser.RULE_formalParameters = 46;
JavaParser.RULE_receiverParameter = 47;
JavaParser.RULE_formalParameterList = 48;
JavaParser.RULE_formalParameter = 49;
JavaParser.RULE_lambdaLVTIList = 50;
JavaParser.RULE_lambdaLVTIParameter = 51;
JavaParser.RULE_qualifiedName = 52;
JavaParser.RULE_literal = 53;
JavaParser.RULE_integerLiteral = 54;
JavaParser.RULE_floatLiteral = 55;
JavaParser.RULE_altAnnotationQualifiedName = 56;
JavaParser.RULE_annotation = 57;
JavaParser.RULE_annotationFieldValues = 58;
JavaParser.RULE_annotationFieldValue = 59;
JavaParser.RULE_annotationValue = 60;
JavaParser.RULE_elementValue = 61;
JavaParser.RULE_elementValueArrayInitializer = 62;
JavaParser.RULE_annotationTypeDeclaration = 63;
JavaParser.RULE_annotationTypeBody = 64;
JavaParser.RULE_annotationTypeElementDeclaration = 65;
JavaParser.RULE_annotationTypeElementRest = 66;
JavaParser.RULE_annotationMethodOrConstantRest = 67;
JavaParser.RULE_annotationMethodRest = 68;
JavaParser.RULE_annotationConstantRest = 69;
JavaParser.RULE_defaultValue = 70;
JavaParser.RULE_moduleDeclaration = 71;
JavaParser.RULE_moduleDirective = 72;
JavaParser.RULE_requiresModifier = 73;
JavaParser.RULE_recordDeclaration = 74;
JavaParser.RULE_recordHeader = 75;
JavaParser.RULE_recordComponentList = 76;
JavaParser.RULE_recordComponent = 77;
JavaParser.RULE_recordBody = 78;
JavaParser.RULE_block = 79;
JavaParser.RULE_blockStatement = 80;
JavaParser.RULE_localVariableDeclaration = 81;
JavaParser.RULE_identifier = 82;
JavaParser.RULE_typeIdentifier = 83;
JavaParser.RULE_localTypeDeclaration = 84;
JavaParser.RULE_statement = 85;
JavaParser.RULE_catchClause = 86;
JavaParser.RULE_catchType = 87;
JavaParser.RULE_finallyBlock = 88;
JavaParser.RULE_resourceSpecification = 89;
JavaParser.RULE_resources = 90;
JavaParser.RULE_resource = 91;
JavaParser.RULE_switchBlockStatementGroup = 92;
JavaParser.RULE_switchLabel = 93;
JavaParser.RULE_forControl = 94;
JavaParser.RULE_forInit = 95;
JavaParser.RULE_enhancedForControl = 96;
JavaParser.RULE_expressionList = 97;
JavaParser.RULE_methodCall = 98;
JavaParser.RULE_expression = 99;
JavaParser.RULE_pattern = 100;
JavaParser.RULE_componentPatternList = 101;
JavaParser.RULE_componentPattern = 102;
JavaParser.RULE_lambdaExpression = 103;
JavaParser.RULE_lambdaParameters = 104;
JavaParser.RULE_lambdaBody = 105;
JavaParser.RULE_primary = 106;
JavaParser.RULE_switchExpression = 107;
JavaParser.RULE_switchLabeledRule = 108;
JavaParser.RULE_guard = 109;
JavaParser.RULE_casePattern = 110;
JavaParser.RULE_switchRuleOutcome = 111;
JavaParser.RULE_classOrInterfaceType = 112;
JavaParser.RULE_creator = 113;
JavaParser.RULE_createdName = 114;
JavaParser.RULE_innerCreator = 115;
JavaParser.RULE_arrayCreatorRest = 116;
JavaParser.RULE_classCreatorRest = 117;
JavaParser.RULE_explicitGenericInvocation = 118;
JavaParser.RULE_typeArgumentsOrDiamond = 119;
JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond = 120;
JavaParser.RULE_nonWildcardTypeArguments = 121;
JavaParser.RULE_typeList = 122;
JavaParser.RULE_typeType = 123;
JavaParser.RULE_primitiveType = 124;
JavaParser.RULE_typeArguments = 125;
JavaParser.RULE_superSuffix = 126;
JavaParser.RULE_explicitGenericInvocationSuffix = 127;
JavaParser.RULE_arguments = 128;

class CompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_compilationUnit;
    }

	EOF() {
	    return this.getToken(JavaParser.EOF, 0);
	};

	packageDeclaration() {
	    return this.getTypedRuleContext(PackageDeclarationContext,0);
	};

	importDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclarationContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.SEMI);
	    } else {
	        return this.getToken(JavaParser.SEMI, i);
	    }
	};


	typeDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(TypeDeclarationContext,i);
	    }
	};

	modularCompulationUnit() {
	    return this.getTypedRuleContext(ModularCompulationUnitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterCompilationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitCompilationUnit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitCompilationUnit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModularCompulationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_modularCompulationUnit;
    }

	moduleDeclaration() {
	    return this.getTypedRuleContext(ModuleDeclarationContext,0);
	};

	importDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterModularCompulationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitModularCompulationUnit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitModularCompulationUnit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_packageDeclaration;
    }

	PACKAGE() {
	    return this.getToken(JavaParser.PACKAGE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterPackageDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitPackageDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitPackageDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_importDeclaration;
    }

	IMPORT() {
	    return this.getToken(JavaParser.IMPORT, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	STATIC() {
	    return this.getToken(JavaParser.STATIC, 0);
	};

	DOT() {
	    return this.getToken(JavaParser.DOT, 0);
	};

	MUL() {
	    return this.getToken(JavaParser.MUL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitImportDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitImportDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeDeclaration;
    }

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	recordDeclaration() {
	    return this.getTypedRuleContext(RecordDeclarationContext,0);
	};

	classOrInterfaceModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassOrInterfaceModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassOrInterfaceModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_modifier;
    }

	classOrInterfaceModifier() {
	    return this.getTypedRuleContext(ClassOrInterfaceModifierContext,0);
	};

	NATIVE() {
	    return this.getToken(JavaParser.NATIVE, 0);
	};

	SYNCHRONIZED() {
	    return this.getToken(JavaParser.SYNCHRONIZED, 0);
	};

	TRANSIENT() {
	    return this.getToken(JavaParser.TRANSIENT, 0);
	};

	VOLATILE() {
	    return this.getToken(JavaParser.VOLATILE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassOrInterfaceModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classOrInterfaceModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(JavaParser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(JavaParser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(JavaParser.PRIVATE, 0);
	};

	STATIC() {
	    return this.getToken(JavaParser.STATIC, 0);
	};

	ABSTRACT() {
	    return this.getToken(JavaParser.ABSTRACT, 0);
	};

	FINAL() {
	    return this.getToken(JavaParser.FINAL, 0);
	};

	STRICTFP() {
	    return this.getToken(JavaParser.STRICTFP, 0);
	};

	SEALED() {
	    return this.getToken(JavaParser.SEALED, 0);
	};

	NON_SEALED() {
	    return this.getToken(JavaParser.NON_SEALED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterClassOrInterfaceModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitClassOrInterfaceModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitClassOrInterfaceModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableModifier;
    }

	FINAL() {
	    return this.getToken(JavaParser.FINAL, 0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterVariableModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitVariableModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitVariableModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classDeclaration;
    }

	CLASS() {
	    return this.getToken(JavaParser.CLASS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	EXTENDS() {
	    return this.getToken(JavaParser.EXTENDS, 0);
	};

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	IMPLEMENTS() {
	    return this.getToken(JavaParser.IMPLEMENTS, 0);
	};

	typeList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeListContext);
	    } else {
	        return this.getTypedRuleContext(TypeListContext,i);
	    }
	};

	PERMITS() {
	    return this.getToken(JavaParser.PERMITS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitClassDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitClassDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeParameters;
    }

	LT() {
	    return this.getToken(JavaParser.LT, 0);
	};

	typeParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterContext,i);
	    }
	};

	GT() {
	    return this.getToken(JavaParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeParameter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	EXTENDS() {
	    return this.getToken(JavaParser.EXTENDS, 0);
	};

	typeBound() {
	    return this.getTypedRuleContext(TypeBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeBound;
    }

	typeType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeTypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeTypeContext,i);
	    }
	};

	BITAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.BITAND);
	    } else {
	        return this.getToken(JavaParser.BITAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enumDeclaration;
    }

	ENUM() {
	    return this.getToken(JavaParser.ENUM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	IMPLEMENTS() {
	    return this.getToken(JavaParser.IMPLEMENTS, 0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enumConstants() {
	    return this.getTypedRuleContext(EnumConstantsContext,0);
	};

	COMMA() {
	    return this.getToken(JavaParser.COMMA, 0);
	};

	enumBodyDeclarations() {
	    return this.getTypedRuleContext(EnumBodyDeclarationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterEnumDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitEnumDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitEnumDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumConstantsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enumConstants;
    }

	enumConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumConstantContext);
	    } else {
	        return this.getTypedRuleContext(EnumConstantContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterEnumConstants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitEnumConstants(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitEnumConstants(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enumConstant;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterEnumConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitEnumConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitEnumConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumBodyDeclarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enumBodyDeclarations;
    }

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterEnumBodyDeclarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitEnumBodyDeclarations(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitEnumBodyDeclarations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceDeclaration;
    }

	INTERFACE() {
	    return this.getToken(JavaParser.INTERFACE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	interfaceBody() {
	    return this.getTypedRuleContext(InterfaceBodyContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	EXTENDS() {
	    return this.getToken(JavaParser.EXTENDS, 0);
	};

	typeList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeListContext);
	    } else {
	        return this.getTypedRuleContext(TypeListContext,i);
	    }
	};

	PERMITS() {
	    return this.getToken(JavaParser.PERMITS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInterfaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInterfaceDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInterfaceDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classBody;
    }

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterClassBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitClassBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitClassBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceBody;
    }

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	interfaceBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInterfaceBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInterfaceBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInterfaceBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classBodyDeclaration;
    }

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	STATIC() {
	    return this.getToken(JavaParser.STATIC, 0);
	};

	memberDeclaration() {
	    return this.getTypedRuleContext(MemberDeclarationContext,0);
	};

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterClassBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitClassBodyDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitClassBodyDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_memberDeclaration;
    }

	recordDeclaration() {
	    return this.getTypedRuleContext(RecordDeclarationContext,0);
	};

	methodDeclaration() {
	    return this.getTypedRuleContext(MethodDeclarationContext,0);
	};

	genericMethodDeclaration() {
	    return this.getTypedRuleContext(GenericMethodDeclarationContext,0);
	};

	fieldDeclaration() {
	    return this.getTypedRuleContext(FieldDeclarationContext,0);
	};

	constructorDeclaration() {
	    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
	};

	genericConstructorDeclaration() {
	    return this.getTypedRuleContext(GenericConstructorDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitMemberDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitMemberDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_methodDeclaration;
    }

	typeTypeOrVoid() {
	    return this.getTypedRuleContext(TypeTypeOrVoidContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.LBRACK);
	    } else {
	        return this.getToken(JavaParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.RBRACK);
	    } else {
	        return this.getToken(JavaParser.RBRACK, i);
	    }
	};


	THROWS() {
	    return this.getToken(JavaParser.THROWS, 0);
	};

	qualifiedNameList() {
	    return this.getTypedRuleContext(QualifiedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitMethodDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitMethodDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_methodBody;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterMethodBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitMethodBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitMethodBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeTypeOrVoidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeTypeOrVoid;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	VOID() {
	    return this.getToken(JavaParser.VOID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeTypeOrVoid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeTypeOrVoid(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeTypeOrVoid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenericMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_genericMethodDeclaration;
    }

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	methodDeclaration() {
	    return this.getTypedRuleContext(MethodDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterGenericMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitGenericMethodDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitGenericMethodDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenericConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_genericConstructorDeclaration;
    }

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	constructorDeclaration() {
	    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterGenericConstructorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitGenericConstructorDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitGenericConstructorDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_constructorDeclaration;
        this.constructorBody = null;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	THROWS() {
	    return this.getToken(JavaParser.THROWS, 0);
	};

	qualifiedNameList() {
	    return this.getTypedRuleContext(QualifiedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterConstructorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitConstructorDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitConstructorDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompactConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_compactConstructorDeclaration;
        this.constructorBody = null;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterCompactConstructorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitCompactConstructorDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitCompactConstructorDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_fieldDeclaration;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	variableDeclarators() {
	    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterFieldDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitFieldDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitFieldDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceBodyDeclaration;
    }

	interfaceMemberDeclaration() {
	    return this.getTypedRuleContext(InterfaceMemberDeclarationContext,0);
	};

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInterfaceBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInterfaceBodyDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInterfaceBodyDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceMemberDeclaration;
    }

	recordDeclaration() {
	    return this.getTypedRuleContext(RecordDeclarationContext,0);
	};

	constDeclaration() {
	    return this.getTypedRuleContext(ConstDeclarationContext,0);
	};

	interfaceMethodDeclaration() {
	    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
	};

	genericInterfaceMethodDeclaration() {
	    return this.getTypedRuleContext(GenericInterfaceMethodDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInterfaceMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInterfaceMemberDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInterfaceMemberDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_constDeclaration;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	constantDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(ConstantDeclaratorContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterConstDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitConstDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitConstDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_constantDeclarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGN() {
	    return this.getToken(JavaParser.ASSIGN, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.LBRACK);
	    } else {
	        return this.getToken(JavaParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.RBRACK);
	    } else {
	        return this.getToken(JavaParser.RBRACK, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterConstantDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitConstantDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitConstantDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceMethodDeclaration;
    }

	interfaceCommonBodyDeclaration() {
	    return this.getTypedRuleContext(InterfaceCommonBodyDeclarationContext,0);
	};

	interfaceMethodModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceMethodModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceMethodModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInterfaceMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInterfaceMethodDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInterfaceMethodDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceMethodModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceMethodModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(JavaParser.PUBLIC, 0);
	};

	ABSTRACT() {
	    return this.getToken(JavaParser.ABSTRACT, 0);
	};

	DEFAULT() {
	    return this.getToken(JavaParser.DEFAULT, 0);
	};

	STATIC() {
	    return this.getToken(JavaParser.STATIC, 0);
	};

	STRICTFP() {
	    return this.getToken(JavaParser.STRICTFP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInterfaceMethodModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInterfaceMethodModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInterfaceMethodModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenericInterfaceMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_genericInterfaceMethodDeclaration;
    }

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	interfaceCommonBodyDeclaration() {
	    return this.getTypedRuleContext(InterfaceCommonBodyDeclarationContext,0);
	};

	interfaceMethodModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceMethodModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceMethodModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterGenericInterfaceMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitGenericInterfaceMethodDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitGenericInterfaceMethodDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceCommonBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceCommonBodyDeclaration;
    }

	typeTypeOrVoid() {
	    return this.getTypedRuleContext(TypeTypeOrVoidContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.LBRACK);
	    } else {
	        return this.getToken(JavaParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.RBRACK);
	    } else {
	        return this.getToken(JavaParser.RBRACK, i);
	    }
	};


	THROWS() {
	    return this.getToken(JavaParser.THROWS, 0);
	};

	qualifiedNameList() {
	    return this.getTypedRuleContext(QualifiedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInterfaceCommonBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInterfaceCommonBodyDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInterfaceCommonBodyDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclaratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableDeclarators;
    }

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterVariableDeclarators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitVariableDeclarators(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitVariableDeclarators(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableDeclarator;
    }

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	ASSIGN() {
	    return this.getToken(JavaParser.ASSIGN, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterVariableDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitVariableDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitVariableDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclaratorIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableDeclaratorId;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.LBRACK);
	    } else {
	        return this.getToken(JavaParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.RBRACK);
	    } else {
	        return this.getToken(JavaParser.RBRACK, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterVariableDeclaratorId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitVariableDeclaratorId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitVariableDeclaratorId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableInitializer;
    }

	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterVariableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitVariableInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitVariableInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_arrayInitializer;
    }

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	variableInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableInitializerContext);
	    } else {
	        return this.getTypedRuleContext(VariableInitializerContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterArrayInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitArrayInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitArrayInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classType;
    }

	typeIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(TypeIdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.DOT);
	    } else {
	        return this.getToken(JavaParser.DOT, i);
	    }
	};


	packageName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PackageNameContext);
	    } else {
	        return this.getTypedRuleContext(PackageNameContext,i);
	    }
	};

	typeArguments = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentsContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentsContext,i);
	    }
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterClassType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitClassType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitClassType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_packageName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.DOT);
	    } else {
	        return this.getToken(JavaParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterPackageName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitPackageName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitPackageName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeArgument;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	QUESTION() {
	    return this.getToken(JavaParser.QUESTION, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	EXTENDS() {
	    return this.getToken(JavaParser.EXTENDS, 0);
	};

	SUPER() {
	    return this.getToken(JavaParser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_qualifiedNameList;
    }

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterQualifiedNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitQualifiedNameList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitQualifiedNameList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_formalParameters;
    }

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	receiverParameter() {
	    return this.getTypedRuleContext(ReceiverParameterContext,0);
	};

	formalParameter() {
	    return this.getTypedRuleContext(FormalParameterContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	formalParameterList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterListContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterFormalParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitFormalParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitFormalParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReceiverParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_receiverParameter;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	THIS() {
	    return this.getToken(JavaParser.THIS, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.DOT);
	    } else {
	        return this.getToken(JavaParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterReceiverParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitReceiverParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitReceiverParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_formalParameterList;
    }

	formalParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitFormalParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitFormalParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_formalParameter;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	ELLIPSIS() {
	    return this.getToken(JavaParser.ELLIPSIS, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitFormalParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitFormalParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaLVTIListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_lambdaLVTIList;
    }

	lambdaLVTIParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LambdaLVTIParameterContext);
	    } else {
	        return this.getTypedRuleContext(LambdaLVTIParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLambdaLVTIList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLambdaLVTIList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLambdaLVTIList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaLVTIParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_lambdaLVTIParameter;
    }

	VAR() {
	    return this.getToken(JavaParser.VAR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLambdaLVTIParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLambdaLVTIParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLambdaLVTIParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_qualifiedName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.DOT);
	    } else {
	        return this.getToken(JavaParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterQualifiedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitQualifiedName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitQualifiedName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_literal;
    }

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	floatLiteral() {
	    return this.getTypedRuleContext(FloatLiteralContext,0);
	};

	CHAR_LITERAL() {
	    return this.getToken(JavaParser.CHAR_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(JavaParser.STRING_LITERAL, 0);
	};

	BOOL_LITERAL() {
	    return this.getToken(JavaParser.BOOL_LITERAL, 0);
	};

	NULL_LITERAL() {
	    return this.getToken(JavaParser.NULL_LITERAL, 0);
	};

	TEXT_BLOCK() {
	    return this.getToken(JavaParser.TEXT_BLOCK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntegerLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_integerLiteral;
    }

	DECIMAL_LITERAL() {
	    return this.getToken(JavaParser.DECIMAL_LITERAL, 0);
	};

	HEX_LITERAL() {
	    return this.getToken(JavaParser.HEX_LITERAL, 0);
	};

	OCT_LITERAL() {
	    return this.getToken(JavaParser.OCT_LITERAL, 0);
	};

	BINARY_LITERAL() {
	    return this.getToken(JavaParser.BINARY_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitIntegerLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitIntegerLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FloatLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_floatLiteral;
    }

	FLOAT_LITERAL() {
	    return this.getToken(JavaParser.FLOAT_LITERAL, 0);
	};

	HEX_FLOAT_LITERAL() {
	    return this.getToken(JavaParser.HEX_FLOAT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterFloatLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitFloatLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitFloatLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AltAnnotationQualifiedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_altAnnotationQualifiedName;
    }

	AT() {
	    return this.getToken(JavaParser.AT, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.DOT);
	    } else {
	        return this.getToken(JavaParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAltAnnotationQualifiedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAltAnnotationQualifiedName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAltAnnotationQualifiedName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotation;
    }

	AT() {
	    return this.getToken(JavaParser.AT, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	annotationFieldValues() {
	    return this.getTypedRuleContext(AnnotationFieldValuesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationFieldValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationFieldValues;
    }

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	annotationFieldValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationFieldValueContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationFieldValueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationFieldValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationFieldValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationFieldValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationFieldValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationFieldValue;
    }

	annotationValue() {
	    return this.getTypedRuleContext(AnnotationValueContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGN() {
	    return this.getToken(JavaParser.ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationFieldValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationFieldValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationFieldValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationValue;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	annotationValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationValueContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationValueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_elementValue;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	elementValueArrayInitializer() {
	    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterElementValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitElementValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitElementValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValueArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_elementValueArrayInitializer;
    }

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	elementValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementValueContext);
	    } else {
	        return this.getTypedRuleContext(ElementValueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterElementValueArrayInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitElementValueArrayInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitElementValueArrayInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationTypeDeclaration;
    }

	AT() {
	    return this.getToken(JavaParser.AT, 0);
	};

	INTERFACE() {
	    return this.getToken(JavaParser.INTERFACE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	annotationTypeBody() {
	    return this.getTypedRuleContext(AnnotationTypeBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationTypeDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationTypeDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationTypeBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationTypeBody;
    }

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	annotationTypeElementDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationTypeElementDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationTypeElementDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationTypeBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationTypeBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationTypeBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationTypeElementDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationTypeElementDeclaration;
    }

	annotationTypeElementRest() {
	    return this.getTypedRuleContext(AnnotationTypeElementRestContext,0);
	};

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationTypeElementDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationTypeElementDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationTypeElementDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationTypeElementRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationTypeElementRest;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	annotationMethodOrConstantRest() {
	    return this.getTypedRuleContext(AnnotationMethodOrConstantRestContext,0);
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	recordDeclaration() {
	    return this.getTypedRuleContext(RecordDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationTypeElementRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationTypeElementRest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationTypeElementRest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationMethodOrConstantRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationMethodOrConstantRest;
    }

	annotationMethodRest() {
	    return this.getTypedRuleContext(AnnotationMethodRestContext,0);
	};

	annotationConstantRest() {
	    return this.getTypedRuleContext(AnnotationConstantRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationMethodOrConstantRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationMethodOrConstantRest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationMethodOrConstantRest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationMethodRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationMethodRest;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationMethodRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationMethodRest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationMethodRest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationConstantRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationConstantRest;
    }

	variableDeclarators() {
	    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationConstantRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationConstantRest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationConstantRest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_defaultValue;
    }

	DEFAULT() {
	    return this.getToken(JavaParser.DEFAULT, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterDefaultValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitDefaultValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitDefaultValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModuleDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_moduleDeclaration;
    }

	MODULE() {
	    return this.getToken(JavaParser.MODULE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	OPEN() {
	    return this.getToken(JavaParser.OPEN, 0);
	};

	moduleDirective = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleDirectiveContext);
	    } else {
	        return this.getTypedRuleContext(ModuleDirectiveContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterModuleDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitModuleDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitModuleDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModuleDirectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_moduleDirective;
    }

	REQUIRES() {
	    return this.getToken(JavaParser.REQUIRES, 0);
	};

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	requiresModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RequiresModifierContext);
	    } else {
	        return this.getTypedRuleContext(RequiresModifierContext,i);
	    }
	};

	EXPORTS() {
	    return this.getToken(JavaParser.EXPORTS, 0);
	};

	TO() {
	    return this.getToken(JavaParser.TO, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	OPENS() {
	    return this.getToken(JavaParser.OPENS, 0);
	};

	USES() {
	    return this.getToken(JavaParser.USES, 0);
	};

	PROVIDES() {
	    return this.getToken(JavaParser.PROVIDES, 0);
	};

	WITH() {
	    return this.getToken(JavaParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterModuleDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitModuleDirective(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitModuleDirective(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RequiresModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_requiresModifier;
    }

	TRANSITIVE() {
	    return this.getToken(JavaParser.TRANSITIVE, 0);
	};

	STATIC() {
	    return this.getToken(JavaParser.STATIC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterRequiresModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitRequiresModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitRequiresModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_recordDeclaration;
    }

	RECORD() {
	    return this.getToken(JavaParser.RECORD, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	recordHeader() {
	    return this.getTypedRuleContext(RecordHeaderContext,0);
	};

	recordBody() {
	    return this.getTypedRuleContext(RecordBodyContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	IMPLEMENTS() {
	    return this.getToken(JavaParser.IMPLEMENTS, 0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterRecordDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitRecordDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitRecordDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordHeaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_recordHeader;
    }

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	recordComponentList() {
	    return this.getTypedRuleContext(RecordComponentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterRecordHeader(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitRecordHeader(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitRecordHeader(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordComponentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_recordComponentList;
    }

	recordComponent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordComponentContext);
	    } else {
	        return this.getTypedRuleContext(RecordComponentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterRecordComponentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitRecordComponentList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitRecordComponentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordComponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_recordComponent;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	ELLIPSIS() {
	    return this.getToken(JavaParser.ELLIPSIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterRecordComponent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitRecordComponent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitRecordComponent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_recordBody;
    }

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	compactConstructorDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompactConstructorDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(CompactConstructorDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterRecordBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitRecordBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitRecordBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_block;
    }

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	blockStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatementContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_blockStatement;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	localTypeDeclaration() {
	    return this.getTypedRuleContext(LocalTypeDeclarationContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterBlockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitBlockStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitBlockStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_localVariableDeclaration;
    }

	VAR() {
	    return this.getToken(JavaParser.VAR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGN() {
	    return this.getToken(JavaParser.ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	variableDeclarators() {
	    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLocalVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLocalVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLocalVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_identifier;
    }

	IDENTIFIER() {
	    return this.getToken(JavaParser.IDENTIFIER, 0);
	};

	MODULE() {
	    return this.getToken(JavaParser.MODULE, 0);
	};

	OPEN() {
	    return this.getToken(JavaParser.OPEN, 0);
	};

	REQUIRES() {
	    return this.getToken(JavaParser.REQUIRES, 0);
	};

	EXPORTS() {
	    return this.getToken(JavaParser.EXPORTS, 0);
	};

	OPENS() {
	    return this.getToken(JavaParser.OPENS, 0);
	};

	TO() {
	    return this.getToken(JavaParser.TO, 0);
	};

	USES() {
	    return this.getToken(JavaParser.USES, 0);
	};

	PROVIDES() {
	    return this.getToken(JavaParser.PROVIDES, 0);
	};

	WHEN() {
	    return this.getToken(JavaParser.WHEN, 0);
	};

	WITH() {
	    return this.getToken(JavaParser.WITH, 0);
	};

	TRANSITIVE() {
	    return this.getToken(JavaParser.TRANSITIVE, 0);
	};

	YIELD() {
	    return this.getToken(JavaParser.YIELD, 0);
	};

	SEALED() {
	    return this.getToken(JavaParser.SEALED, 0);
	};

	PERMITS() {
	    return this.getToken(JavaParser.PERMITS, 0);
	};

	RECORD() {
	    return this.getToken(JavaParser.RECORD, 0);
	};

	VAR() {
	    return this.getToken(JavaParser.VAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeIdentifier;
    }

	IDENTIFIER() {
	    return this.getToken(JavaParser.IDENTIFIER, 0);
	};

	MODULE() {
	    return this.getToken(JavaParser.MODULE, 0);
	};

	OPEN() {
	    return this.getToken(JavaParser.OPEN, 0);
	};

	REQUIRES() {
	    return this.getToken(JavaParser.REQUIRES, 0);
	};

	EXPORTS() {
	    return this.getToken(JavaParser.EXPORTS, 0);
	};

	OPENS() {
	    return this.getToken(JavaParser.OPENS, 0);
	};

	TO() {
	    return this.getToken(JavaParser.TO, 0);
	};

	USES() {
	    return this.getToken(JavaParser.USES, 0);
	};

	PROVIDES() {
	    return this.getToken(JavaParser.PROVIDES, 0);
	};

	WITH() {
	    return this.getToken(JavaParser.WITH, 0);
	};

	TRANSITIVE() {
	    return this.getToken(JavaParser.TRANSITIVE, 0);
	};

	SEALED() {
	    return this.getToken(JavaParser.SEALED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_localTypeDeclaration;
    }

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	recordDeclaration() {
	    return this.getTypedRuleContext(RecordDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	classOrInterfaceModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassOrInterfaceModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassOrInterfaceModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLocalTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLocalTypeDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLocalTypeDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_statement;
        this.blockLabel = null;
        this.statementExpression = null;
        this.identifierLabel = null;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	ASSERT() {
	    return this.getToken(JavaParser.ASSERT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	COLON() {
	    return this.getToken(JavaParser.COLON, 0);
	};

	IF() {
	    return this.getToken(JavaParser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(JavaParser.ELSE, 0);
	};

	FOR() {
	    return this.getToken(JavaParser.FOR, 0);
	};

	forControl() {
	    return this.getTypedRuleContext(ForControlContext,0);
	};

	WHILE() {
	    return this.getToken(JavaParser.WHILE, 0);
	};

	DO() {
	    return this.getToken(JavaParser.DO, 0);
	};

	TRY() {
	    return this.getToken(JavaParser.TRY, 0);
	};

	finallyBlock() {
	    return this.getTypedRuleContext(FinallyBlockContext,0);
	};

	catchClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CatchClauseContext);
	    } else {
	        return this.getTypedRuleContext(CatchClauseContext,i);
	    }
	};

	resourceSpecification() {
	    return this.getTypedRuleContext(ResourceSpecificationContext,0);
	};

	SWITCH() {
	    return this.getToken(JavaParser.SWITCH, 0);
	};

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	switchBlockStatementGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchBlockStatementGroupContext);
	    } else {
	        return this.getTypedRuleContext(SwitchBlockStatementGroupContext,i);
	    }
	};

	switchLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabelContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabelContext,i);
	    }
	};

	SYNCHRONIZED() {
	    return this.getToken(JavaParser.SYNCHRONIZED, 0);
	};

	RETURN() {
	    return this.getToken(JavaParser.RETURN, 0);
	};

	THROW() {
	    return this.getToken(JavaParser.THROW, 0);
	};

	BREAK() {
	    return this.getToken(JavaParser.BREAK, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	CONTINUE() {
	    return this.getToken(JavaParser.CONTINUE, 0);
	};

	YIELD() {
	    return this.getToken(JavaParser.YIELD, 0);
	};

	switchExpression() {
	    return this.getTypedRuleContext(SwitchExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_catchClause;
    }

	CATCH() {
	    return this.getToken(JavaParser.CATCH, 0);
	};

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	catchType() {
	    return this.getTypedRuleContext(CatchTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterCatchClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitCatchClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitCatchClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_catchType;
    }

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	BITOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.BITOR);
	    } else {
	        return this.getToken(JavaParser.BITOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterCatchType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitCatchType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitCatchType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FinallyBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_finallyBlock;
    }

	FINALLY() {
	    return this.getToken(JavaParser.FINALLY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterFinallyBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitFinallyBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitFinallyBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_resourceSpecification;
    }

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	resources() {
	    return this.getTypedRuleContext(ResourcesContext,0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterResourceSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitResourceSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitResourceSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourcesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_resources;
    }

	resource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ResourceContext);
	    } else {
	        return this.getTypedRuleContext(ResourceContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.SEMI);
	    } else {
	        return this.getToken(JavaParser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterResources(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitResources(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitResources(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_resource;
    }

	ASSIGN() {
	    return this.getToken(JavaParser.ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	VAR() {
	    return this.getToken(JavaParser.VAR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterResource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitResource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitResource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchBlockStatementGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_switchBlockStatementGroup;
    }

	switchLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabelContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabelContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COLON);
	    } else {
	        return this.getToken(JavaParser.COLON, i);
	    }
	};


	blockStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatementContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterSwitchBlockStatementGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitSwitchBlockStatementGroup(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitSwitchBlockStatementGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_switchLabel;
        this.constantExpression = null;
        this.enumConstantName = null;
        this.varName = null;
    }

	CASE() {
	    return this.getToken(JavaParser.CASE, 0);
	};

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	IDENTIFIER() {
	    return this.getToken(JavaParser.IDENTIFIER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DEFAULT() {
	    return this.getToken(JavaParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterSwitchLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitSwitchLabel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitSwitchLabel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_forControl;
        this.forUpdate = null;
    }

	enhancedForControl() {
	    return this.getTypedRuleContext(EnhancedForControlContext,0);
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.SEMI);
	    } else {
	        return this.getToken(JavaParser.SEMI, i);
	    }
	};


	forInit() {
	    return this.getTypedRuleContext(ForInitContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterForControl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitForControl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitForControl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_forInit;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterForInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitForInit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitForInit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnhancedForControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enhancedForControl;
    }

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	COLON() {
	    return this.getToken(JavaParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	VAR() {
	    return this.getToken(JavaParser.VAR, 0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterEnhancedForControl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitEnhancedForControl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitEnhancedForControl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitExpressionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitExpressionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_methodCall;
    }

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	THIS() {
	    return this.getToken(JavaParser.THIS, 0);
	};

	SUPER() {
	    return this.getToken(JavaParser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterMethodCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitMethodCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitMethodCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TernaryExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.bop = null;;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COLON() {
	    return this.getToken(JavaParser.COLON, 0);
	};

	QUESTION() {
	    return this.getToken(JavaParser.QUESTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTernaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTernaryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTernaryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaParser.TernaryExpressionContext = TernaryExpressionContext;

class InstanceOfOperatorExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.bop = null;;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	INSTANCEOF() {
	    return this.getToken(JavaParser.INSTANCEOF, 0);
	};

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInstanceOfOperatorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInstanceOfOperatorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInstanceOfOperatorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaParser.InstanceOfOperatorExpressionContext = InstanceOfOperatorExpressionContext;

class UnaryOperatorExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.prefix = null;;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ADD() {
	    return this.getToken(JavaParser.ADD, 0);
	};

	SUB() {
	    return this.getToken(JavaParser.SUB, 0);
	};

	INC() {
	    return this.getToken(JavaParser.INC, 0);
	};

	DEC() {
	    return this.getToken(JavaParser.DEC, 0);
	};

	TILDE() {
	    return this.getToken(JavaParser.TILDE, 0);
	};

	BANG() {
	    return this.getToken(JavaParser.BANG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterUnaryOperatorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitUnaryOperatorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitUnaryOperatorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaParser.UnaryOperatorExpressionContext = UnaryOperatorExpressionContext;

class PrimaryExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitPrimaryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitPrimaryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaParser.PrimaryExpressionContext = PrimaryExpressionContext;

class ObjectCreationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NEW() {
	    return this.getToken(JavaParser.NEW, 0);
	};

	creator() {
	    return this.getTypedRuleContext(CreatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterObjectCreationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitObjectCreationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitObjectCreationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaParser.ObjectCreationExpressionContext = ObjectCreationExpressionContext;

class ExpressionLambdaContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	lambdaExpression() {
	    return this.getTypedRuleContext(LambdaExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterExpressionLambda(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitExpressionLambda(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitExpressionLambda(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaParser.ExpressionLambdaContext = ExpressionLambdaContext;

class PostIncrementDecrementOperatorExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.postfix = null;;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	INC() {
	    return this.getToken(JavaParser.INC, 0);
	};

	DEC() {
	    return this.getToken(JavaParser.DEC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterPostIncrementDecrementOperatorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitPostIncrementDecrementOperatorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitPostIncrementDecrementOperatorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaParser.PostIncrementDecrementOperatorExpressionContext = PostIncrementDecrementOperatorExpressionContext;

class MemberReferenceExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.bop = null;;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DOT() {
	    return this.getToken(JavaParser.DOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	methodCall() {
	    return this.getTypedRuleContext(MethodCallContext,0);
	};

	THIS() {
	    return this.getToken(JavaParser.THIS, 0);
	};

	NEW() {
	    return this.getToken(JavaParser.NEW, 0);
	};

	innerCreator() {
	    return this.getTypedRuleContext(InnerCreatorContext,0);
	};

	SUPER() {
	    return this.getToken(JavaParser.SUPER, 0);
	};

	superSuffix() {
	    return this.getTypedRuleContext(SuperSuffixContext,0);
	};

	explicitGenericInvocation() {
	    return this.getTypedRuleContext(ExplicitGenericInvocationContext,0);
	};

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterMemberReferenceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitMemberReferenceExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitMemberReferenceExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaParser.MemberReferenceExpressionContext = MemberReferenceExpressionContext;

class ExpressionSwitchContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	switchExpression() {
	    return this.getTypedRuleContext(SwitchExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterExpressionSwitch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitExpressionSwitch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitExpressionSwitch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaParser.ExpressionSwitchContext = ExpressionSwitchContext;

class BinaryOperatorExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.bop = null;;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	MUL() {
	    return this.getToken(JavaParser.MUL, 0);
	};

	DIV() {
	    return this.getToken(JavaParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(JavaParser.MOD, 0);
	};

	ADD() {
	    return this.getToken(JavaParser.ADD, 0);
	};

	SUB() {
	    return this.getToken(JavaParser.SUB, 0);
	};

	LT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.LT);
	    } else {
	        return this.getToken(JavaParser.LT, i);
	    }
	};


	GT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.GT);
	    } else {
	        return this.getToken(JavaParser.GT, i);
	    }
	};


	LE() {
	    return this.getToken(JavaParser.LE, 0);
	};

	GE() {
	    return this.getToken(JavaParser.GE, 0);
	};

	EQUAL() {
	    return this.getToken(JavaParser.EQUAL, 0);
	};

	NOTEQUAL() {
	    return this.getToken(JavaParser.NOTEQUAL, 0);
	};

	BITAND() {
	    return this.getToken(JavaParser.BITAND, 0);
	};

	CARET() {
	    return this.getToken(JavaParser.CARET, 0);
	};

	BITOR() {
	    return this.getToken(JavaParser.BITOR, 0);
	};

	AND() {
	    return this.getToken(JavaParser.AND, 0);
	};

	OR() {
	    return this.getToken(JavaParser.OR, 0);
	};

	ASSIGN() {
	    return this.getToken(JavaParser.ASSIGN, 0);
	};

	ADD_ASSIGN() {
	    return this.getToken(JavaParser.ADD_ASSIGN, 0);
	};

	SUB_ASSIGN() {
	    return this.getToken(JavaParser.SUB_ASSIGN, 0);
	};

	MUL_ASSIGN() {
	    return this.getToken(JavaParser.MUL_ASSIGN, 0);
	};

	DIV_ASSIGN() {
	    return this.getToken(JavaParser.DIV_ASSIGN, 0);
	};

	AND_ASSIGN() {
	    return this.getToken(JavaParser.AND_ASSIGN, 0);
	};

	OR_ASSIGN() {
	    return this.getToken(JavaParser.OR_ASSIGN, 0);
	};

	XOR_ASSIGN() {
	    return this.getToken(JavaParser.XOR_ASSIGN, 0);
	};

	RSHIFT_ASSIGN() {
	    return this.getToken(JavaParser.RSHIFT_ASSIGN, 0);
	};

	URSHIFT_ASSIGN() {
	    return this.getToken(JavaParser.URSHIFT_ASSIGN, 0);
	};

	LSHIFT_ASSIGN() {
	    return this.getToken(JavaParser.LSHIFT_ASSIGN, 0);
	};

	MOD_ASSIGN() {
	    return this.getToken(JavaParser.MOD_ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterBinaryOperatorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitBinaryOperatorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitBinaryOperatorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaParser.BinaryOperatorExpressionContext = BinaryOperatorExpressionContext;

class MethodCallExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	methodCall() {
	    return this.getTypedRuleContext(MethodCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterMethodCallExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitMethodCallExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitMethodCallExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaParser.MethodCallExpressionContext = MethodCallExpressionContext;

class MethodReferenceExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	COLONCOLON() {
	    return this.getToken(JavaParser.COLONCOLON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	NEW() {
	    return this.getToken(JavaParser.NEW, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterMethodReferenceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitMethodReferenceExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitMethodReferenceExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaParser.MethodReferenceExpressionContext = MethodReferenceExpressionContext;

class SquareBracketExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LBRACK() {
	    return this.getToken(JavaParser.LBRACK, 0);
	};

	RBRACK() {
	    return this.getToken(JavaParser.RBRACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterSquareBracketExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitSquareBracketExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitSquareBracketExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaParser.SquareBracketExpressionContext = SquareBracketExpressionContext;

class CastExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	typeType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeTypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeTypeContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	BITAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.BITAND);
	    } else {
	        return this.getToken(JavaParser.BITAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitCastExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitCastExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaParser.CastExpressionContext = CastExpressionContext;

class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_pattern;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	variableDeclarators() {
	    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	componentPatternList() {
	    return this.getTypedRuleContext(ComponentPatternListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComponentPatternListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_componentPatternList;
    }

	componentPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComponentPatternContext);
	    } else {
	        return this.getTypedRuleContext(ComponentPatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterComponentPatternList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitComponentPatternList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitComponentPatternList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComponentPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_componentPattern;
    }

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterComponentPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitComponentPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitComponentPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_lambdaExpression;
    }

	lambdaParameters() {
	    return this.getTypedRuleContext(LambdaParametersContext,0);
	};

	ARROW() {
	    return this.getToken(JavaParser.ARROW, 0);
	};

	lambdaBody() {
	    return this.getTypedRuleContext(LambdaBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLambdaExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLambdaExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLambdaExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_lambdaParameters;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	lambdaLVTIList() {
	    return this.getTypedRuleContext(LambdaLVTIListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLambdaParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLambdaParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLambdaParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_lambdaBody;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLambdaBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLambdaBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLambdaBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_primary;
    }

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	THIS() {
	    return this.getToken(JavaParser.THIS, 0);
	};

	SUPER() {
	    return this.getToken(JavaParser.SUPER, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typeTypeOrVoid() {
	    return this.getTypedRuleContext(TypeTypeOrVoidContext,0);
	};

	DOT() {
	    return this.getToken(JavaParser.DOT, 0);
	};

	CLASS() {
	    return this.getToken(JavaParser.CLASS, 0);
	};

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	explicitGenericInvocationSuffix() {
	    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_switchExpression;
    }

	SWITCH() {
	    return this.getToken(JavaParser.SWITCH, 0);
	};

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	switchLabeledRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabeledRuleContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabeledRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterSwitchExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitSwitchExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitSwitchExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchLabeledRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_switchLabeledRule;
    }

	CASE() {
	    return this.getToken(JavaParser.CASE, 0);
	};

	switchRuleOutcome() {
	    return this.getTypedRuleContext(SwitchRuleOutcomeContext,0);
	};

	ARROW() {
	    return this.getToken(JavaParser.ARROW, 0);
	};

	COLON() {
	    return this.getToken(JavaParser.COLON, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	NULL_LITERAL() {
	    return this.getToken(JavaParser.NULL_LITERAL, 0);
	};

	casePattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CasePatternContext);
	    } else {
	        return this.getTypedRuleContext(CasePatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	DEFAULT() {
	    return this.getToken(JavaParser.DEFAULT, 0);
	};

	guard() {
	    return this.getTypedRuleContext(GuardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterSwitchLabeledRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitSwitchLabeledRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitSwitchLabeledRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GuardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_guard;
    }

	WHEN() {
	    return this.getToken(JavaParser.WHEN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterGuard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitGuard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitGuard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CasePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_casePattern;
    }

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterCasePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitCasePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitCasePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchRuleOutcomeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_switchRuleOutcome;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	blockStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatementContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterSwitchRuleOutcome(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitSwitchRuleOutcome(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitSwitchRuleOutcome(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classOrInterfaceType;
    }

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitClassOrInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitClassOrInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_creator;
    }

	createdName() {
	    return this.getTypedRuleContext(CreatedNameContext,0);
	};

	classCreatorRest() {
	    return this.getTypedRuleContext(ClassCreatorRestContext,0);
	};

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	arrayCreatorRest() {
	    return this.getTypedRuleContext(ArrayCreatorRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterCreator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitCreator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitCreator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_createdName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	typeArgumentsOrDiamond = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentsOrDiamondContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.DOT);
	    } else {
	        return this.getToken(JavaParser.DOT, i);
	    }
	};


	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterCreatedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitCreatedName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitCreatedName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InnerCreatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_innerCreator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	classCreatorRest() {
	    return this.getTypedRuleContext(ClassCreatorRestContext,0);
	};

	nonWildcardTypeArgumentsOrDiamond() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsOrDiamondContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInnerCreator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInnerCreator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInnerCreator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayCreatorRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_arrayCreatorRest;
    }

	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.LBRACK);
	    } else {
	        return this.getToken(JavaParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.RBRACK);
	    } else {
	        return this.getToken(JavaParser.RBRACK, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterArrayCreatorRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitArrayCreatorRest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitArrayCreatorRest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassCreatorRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classCreatorRest;
    }

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterClassCreatorRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitClassCreatorRest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitClassCreatorRest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplicitGenericInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_explicitGenericInvocation;
    }

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	explicitGenericInvocationSuffix() {
	    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterExplicitGenericInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitExplicitGenericInvocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitExplicitGenericInvocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentsOrDiamondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeArgumentsOrDiamond;
    }

	LT() {
	    return this.getToken(JavaParser.LT, 0);
	};

	GT() {
	    return this.getToken(JavaParser.GT, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeArgumentsOrDiamond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeArgumentsOrDiamond(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeArgumentsOrDiamond(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonWildcardTypeArgumentsOrDiamondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond;
    }

	LT() {
	    return this.getToken(JavaParser.LT, 0);
	};

	GT() {
	    return this.getToken(JavaParser.GT, 0);
	};

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterNonWildcardTypeArgumentsOrDiamond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitNonWildcardTypeArgumentsOrDiamond(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitNonWildcardTypeArgumentsOrDiamond(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonWildcardTypeArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_nonWildcardTypeArguments;
    }

	LT() {
	    return this.getToken(JavaParser.LT, 0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	GT() {
	    return this.getToken(JavaParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterNonWildcardTypeArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitNonWildcardTypeArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitNonWildcardTypeArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeList;
    }

	typeType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeTypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeType;
    }

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.LBRACK);
	    } else {
	        return this.getToken(JavaParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.RBRACK);
	    } else {
	        return this.getToken(JavaParser.RBRACK, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_primitiveType;
    }

	BOOLEAN() {
	    return this.getToken(JavaParser.BOOLEAN, 0);
	};

	CHAR() {
	    return this.getToken(JavaParser.CHAR, 0);
	};

	BYTE() {
	    return this.getToken(JavaParser.BYTE, 0);
	};

	SHORT() {
	    return this.getToken(JavaParser.SHORT, 0);
	};

	INT() {
	    return this.getToken(JavaParser.INT, 0);
	};

	LONG() {
	    return this.getToken(JavaParser.LONG, 0);
	};

	FLOAT() {
	    return this.getToken(JavaParser.FLOAT, 0);
	};

	DOUBLE() {
	    return this.getToken(JavaParser.DOUBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitPrimitiveType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitPrimitiveType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeArguments;
    }

	LT() {
	    return this.getToken(JavaParser.LT, 0);
	};

	typeArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentContext,i);
	    }
	};

	GT() {
	    return this.getToken(JavaParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SuperSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_superSuffix;
    }

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	DOT() {
	    return this.getToken(JavaParser.DOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterSuperSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitSuperSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitSuperSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplicitGenericInvocationSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_explicitGenericInvocationSuffix;
    }

	SUPER() {
	    return this.getToken(JavaParser.SUPER, 0);
	};

	superSuffix() {
	    return this.getTypedRuleContext(SuperSuffixContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterExplicitGenericInvocationSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitExplicitGenericInvocationSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitExplicitGenericInvocationSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_arguments;
    }

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




JavaParser.CompilationUnitContext = CompilationUnitContext; 
JavaParser.ModularCompulationUnitContext = ModularCompulationUnitContext; 
JavaParser.PackageDeclarationContext = PackageDeclarationContext; 
JavaParser.ImportDeclarationContext = ImportDeclarationContext; 
JavaParser.TypeDeclarationContext = TypeDeclarationContext; 
JavaParser.ModifierContext = ModifierContext; 
JavaParser.ClassOrInterfaceModifierContext = ClassOrInterfaceModifierContext; 
JavaParser.VariableModifierContext = VariableModifierContext; 
JavaParser.ClassDeclarationContext = ClassDeclarationContext; 
JavaParser.TypeParametersContext = TypeParametersContext; 
JavaParser.TypeParameterContext = TypeParameterContext; 
JavaParser.TypeBoundContext = TypeBoundContext; 
JavaParser.EnumDeclarationContext = EnumDeclarationContext; 
JavaParser.EnumConstantsContext = EnumConstantsContext; 
JavaParser.EnumConstantContext = EnumConstantContext; 
JavaParser.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext; 
JavaParser.InterfaceDeclarationContext = InterfaceDeclarationContext; 
JavaParser.ClassBodyContext = ClassBodyContext; 
JavaParser.InterfaceBodyContext = InterfaceBodyContext; 
JavaParser.ClassBodyDeclarationContext = ClassBodyDeclarationContext; 
JavaParser.MemberDeclarationContext = MemberDeclarationContext; 
JavaParser.MethodDeclarationContext = MethodDeclarationContext; 
JavaParser.MethodBodyContext = MethodBodyContext; 
JavaParser.TypeTypeOrVoidContext = TypeTypeOrVoidContext; 
JavaParser.GenericMethodDeclarationContext = GenericMethodDeclarationContext; 
JavaParser.GenericConstructorDeclarationContext = GenericConstructorDeclarationContext; 
JavaParser.ConstructorDeclarationContext = ConstructorDeclarationContext; 
JavaParser.CompactConstructorDeclarationContext = CompactConstructorDeclarationContext; 
JavaParser.FieldDeclarationContext = FieldDeclarationContext; 
JavaParser.InterfaceBodyDeclarationContext = InterfaceBodyDeclarationContext; 
JavaParser.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext; 
JavaParser.ConstDeclarationContext = ConstDeclarationContext; 
JavaParser.ConstantDeclaratorContext = ConstantDeclaratorContext; 
JavaParser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext; 
JavaParser.InterfaceMethodModifierContext = InterfaceMethodModifierContext; 
JavaParser.GenericInterfaceMethodDeclarationContext = GenericInterfaceMethodDeclarationContext; 
JavaParser.InterfaceCommonBodyDeclarationContext = InterfaceCommonBodyDeclarationContext; 
JavaParser.VariableDeclaratorsContext = VariableDeclaratorsContext; 
JavaParser.VariableDeclaratorContext = VariableDeclaratorContext; 
JavaParser.VariableDeclaratorIdContext = VariableDeclaratorIdContext; 
JavaParser.VariableInitializerContext = VariableInitializerContext; 
JavaParser.ArrayInitializerContext = ArrayInitializerContext; 
JavaParser.ClassTypeContext = ClassTypeContext; 
JavaParser.PackageNameContext = PackageNameContext; 
JavaParser.TypeArgumentContext = TypeArgumentContext; 
JavaParser.QualifiedNameListContext = QualifiedNameListContext; 
JavaParser.FormalParametersContext = FormalParametersContext; 
JavaParser.ReceiverParameterContext = ReceiverParameterContext; 
JavaParser.FormalParameterListContext = FormalParameterListContext; 
JavaParser.FormalParameterContext = FormalParameterContext; 
JavaParser.LambdaLVTIListContext = LambdaLVTIListContext; 
JavaParser.LambdaLVTIParameterContext = LambdaLVTIParameterContext; 
JavaParser.QualifiedNameContext = QualifiedNameContext; 
JavaParser.LiteralContext = LiteralContext; 
JavaParser.IntegerLiteralContext = IntegerLiteralContext; 
JavaParser.FloatLiteralContext = FloatLiteralContext; 
JavaParser.AltAnnotationQualifiedNameContext = AltAnnotationQualifiedNameContext; 
JavaParser.AnnotationContext = AnnotationContext; 
JavaParser.AnnotationFieldValuesContext = AnnotationFieldValuesContext; 
JavaParser.AnnotationFieldValueContext = AnnotationFieldValueContext; 
JavaParser.AnnotationValueContext = AnnotationValueContext; 
JavaParser.ElementValueContext = ElementValueContext; 
JavaParser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext; 
JavaParser.AnnotationTypeDeclarationContext = AnnotationTypeDeclarationContext; 
JavaParser.AnnotationTypeBodyContext = AnnotationTypeBodyContext; 
JavaParser.AnnotationTypeElementDeclarationContext = AnnotationTypeElementDeclarationContext; 
JavaParser.AnnotationTypeElementRestContext = AnnotationTypeElementRestContext; 
JavaParser.AnnotationMethodOrConstantRestContext = AnnotationMethodOrConstantRestContext; 
JavaParser.AnnotationMethodRestContext = AnnotationMethodRestContext; 
JavaParser.AnnotationConstantRestContext = AnnotationConstantRestContext; 
JavaParser.DefaultValueContext = DefaultValueContext; 
JavaParser.ModuleDeclarationContext = ModuleDeclarationContext; 
JavaParser.ModuleDirectiveContext = ModuleDirectiveContext; 
JavaParser.RequiresModifierContext = RequiresModifierContext; 
JavaParser.RecordDeclarationContext = RecordDeclarationContext; 
JavaParser.RecordHeaderContext = RecordHeaderContext; 
JavaParser.RecordComponentListContext = RecordComponentListContext; 
JavaParser.RecordComponentContext = RecordComponentContext; 
JavaParser.RecordBodyContext = RecordBodyContext; 
JavaParser.BlockContext = BlockContext; 
JavaParser.BlockStatementContext = BlockStatementContext; 
JavaParser.LocalVariableDeclarationContext = LocalVariableDeclarationContext; 
JavaParser.IdentifierContext = IdentifierContext; 
JavaParser.TypeIdentifierContext = TypeIdentifierContext; 
JavaParser.LocalTypeDeclarationContext = LocalTypeDeclarationContext; 
JavaParser.StatementContext = StatementContext; 
JavaParser.CatchClauseContext = CatchClauseContext; 
JavaParser.CatchTypeContext = CatchTypeContext; 
JavaParser.FinallyBlockContext = FinallyBlockContext; 
JavaParser.ResourceSpecificationContext = ResourceSpecificationContext; 
JavaParser.ResourcesContext = ResourcesContext; 
JavaParser.ResourceContext = ResourceContext; 
JavaParser.SwitchBlockStatementGroupContext = SwitchBlockStatementGroupContext; 
JavaParser.SwitchLabelContext = SwitchLabelContext; 
JavaParser.ForControlContext = ForControlContext; 
JavaParser.ForInitContext = ForInitContext; 
JavaParser.EnhancedForControlContext = EnhancedForControlContext; 
JavaParser.ExpressionListContext = ExpressionListContext; 
JavaParser.MethodCallContext = MethodCallContext; 
JavaParser.ExpressionContext = ExpressionContext; 
JavaParser.PatternContext = PatternContext; 
JavaParser.ComponentPatternListContext = ComponentPatternListContext; 
JavaParser.ComponentPatternContext = ComponentPatternContext; 
JavaParser.LambdaExpressionContext = LambdaExpressionContext; 
JavaParser.LambdaParametersContext = LambdaParametersContext; 
JavaParser.LambdaBodyContext = LambdaBodyContext; 
JavaParser.PrimaryContext = PrimaryContext; 
JavaParser.SwitchExpressionContext = SwitchExpressionContext; 
JavaParser.SwitchLabeledRuleContext = SwitchLabeledRuleContext; 
JavaParser.GuardContext = GuardContext; 
JavaParser.CasePatternContext = CasePatternContext; 
JavaParser.SwitchRuleOutcomeContext = SwitchRuleOutcomeContext; 
JavaParser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext; 
JavaParser.CreatorContext = CreatorContext; 
JavaParser.CreatedNameContext = CreatedNameContext; 
JavaParser.InnerCreatorContext = InnerCreatorContext; 
JavaParser.ArrayCreatorRestContext = ArrayCreatorRestContext; 
JavaParser.ClassCreatorRestContext = ClassCreatorRestContext; 
JavaParser.ExplicitGenericInvocationContext = ExplicitGenericInvocationContext; 
JavaParser.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext; 
JavaParser.NonWildcardTypeArgumentsOrDiamondContext = NonWildcardTypeArgumentsOrDiamondContext; 
JavaParser.NonWildcardTypeArgumentsContext = NonWildcardTypeArgumentsContext; 
JavaParser.TypeListContext = TypeListContext; 
JavaParser.TypeTypeContext = TypeTypeContext; 
JavaParser.PrimitiveTypeContext = PrimitiveTypeContext; 
JavaParser.TypeArgumentsContext = TypeArgumentsContext; 
JavaParser.SuperSuffixContext = SuperSuffixContext; 
JavaParser.ExplicitGenericInvocationSuffixContext = ExplicitGenericInvocationSuffixContext; 
JavaParser.ArgumentsContext = ArgumentsContext; 
